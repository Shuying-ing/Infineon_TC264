	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 99277908"
	.compiler_invocation	"ctc --dep-file=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\.IfxFft_Fft.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc26x -D__CPU_TC26X__ --core=tc1.6.x --iso=99 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\CODE -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Asc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Lin -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Spi -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Icu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmBc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmHl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TimerWithTrigger -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TPwm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Cam -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Dsadc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Rdc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Dts -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Eray -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Phy_Pef7071 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Crc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\IncrEnc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Pwm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\PwmHl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim\\In -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Pwm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\PwmHl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Trig -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Hssl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\I2c -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Driver -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Msc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Can -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Io -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Psi5 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Psi5s -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiMaster -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiSlave -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Sent -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Adc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Platform -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Platform\\Tricore -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Service -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Service\\CpuGeneric -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\seekfree_libraries -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\seekfree_libraries\\common -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\seekfree_peripheral -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\USER -g2 -wW557 --make-target=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.o -t0 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O0 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.src ..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c"
	.compiler_name		"ctc"
	;source	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c'

	
$TC16X
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_calcCSR',code,cluster('IfxFft_Fft_calcCSR')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_calcCSR'
	.align	2
	

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	     2   * \file IfxFft_Fft.c
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	     3   * \brief FFT FFT details
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	     4   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	     5   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	     6   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	     7   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	     9   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    10   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    13   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    15   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    16  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    19  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    20   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    21   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    22   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    23   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    24   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    25   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    26  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    27   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    31   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    32   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    33  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    40   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    41  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    42   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    43   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    44  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    45  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    46  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    47  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    48  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    49  #include "IfxFft_Fft.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    50  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    51  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    52  /*----------------------------------Macros------------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    53  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    54  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    55  #define IFXFFT_FFT_DATA_TRANSFER           (*((volatile uint64 *)IFXFFT_DATA_SPACE))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    56  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    57  #define IFXFFT_FFT_WINDOW_TRANSFER         (*((volatile uint64 *)IFXFFT_WINDOW_SPACE))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    59  #define IFXFFT_FFT_DMADISCARDCHANNELID_OPT (IFXFFT_FFT_DMA_CHANNEL_BASE + 2)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    60  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    61  #define IFXFFT_FFT_DMAOUTPUTCHANNELID_OPT  (IFXFFT_FFT_DMA_CHANNEL_BASE + 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    62  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    63  #define IFXFFT_FFT_DMAINPUTCHANNELID_OPT   (IFXFFT_FFT_DMA_CHANNEL_BASE)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    64  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    65  #define IFXFFT_FFT_DMADISCARDCHANNELID     (dmaDiscard->channelId)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    66  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    67  #define IFXFFT_FFT_DMAOUTPUTCHANNELID      (dmaOutput->channelId)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    68  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    69  #define IFXFFT_FFT_DMAINPUTCHANNELID       (dmaInput->channelId)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    70  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    71  #define IFXFFT_FFT_MOVE_BTR4               1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    73  #define IFXFFT_FFT_MOVE_SIZE               IfxDma_ChannelMoveSize_256bit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    74  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    75  #define IFXFFT_FFT_MOVE_DIV                4
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    76  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    77  #define IFXFFT_FFT_ISALIGNED(address) ((Ifx_AlignOn256((uint32)address) == (uint32)address))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    78  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    79  /** \addtogroup IfxLld_Fft_Fft_ModuleFunctions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    80   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    81  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    82  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    83  /*-----------------------Private Function Prototypes--------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    84  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    85  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    86  /** \brief Configures the CSR register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    87   * \param config Configuration structure for the FFT job
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    88   * \return Desired value to write into the Ifx_FFT.CSR register
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    89   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    90  IFX_STATIC uint32 IfxFft_Fft_calcCSR(const IfxFft_Fft_JobConfig *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    91  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    92  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    93  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    94  /** \addtogroup IfxLld_Fft_Fft_TransformFuntions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    95   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    96  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    97  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    98  /*-----------------------Private Function Prototypes--------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	    99  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   100  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   101  /** \brief Unloads output data from the FFT engine
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   102   * \param job FFT job handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   103   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   104   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   105  IFX_STATIC void IfxFft_Fft_unloadOutput(IfxFft_Fft_Job *job);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   106  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   107  /** \brief Loads input data into the FFT engine
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   108   * \param job FFT job handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   109   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   110   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   111  IFX_STATIC void IfxFft_Fft_loadInput(IfxFft_Fft_Job *job);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   112  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   113  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   114  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   115  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   116  /*-----------------------Private Function Prototypes--------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   117  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   118  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   119  /** \brief Calculates the input counters and output counters
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   120   * \param job job FFT job
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   121   * \param jobConfig jobConfig Pointer to the job configuration
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   122   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   123   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   124  IFX_STATIC void IfxFft_Fft_calcCounters(IfxFft_Fft_Job *job, const IfxFft_Fft_JobConfig *jobConfig);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   125  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   126  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   127  /*------------------------Private Variables/Constants-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   128  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   129  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   130  IFX_STATIC uint64 IfxFft_Fft_dummy256[IFXFFT_FFT_MOVE_DIV];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   131  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   132  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   133  /*-------------------------Function Implementations---------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   134  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   135  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   136  IFX_STATIC uint32 IfxFft_Fft_calcCSR(const IfxFft_Fft_JobConfig *config)
; Function IfxFft_Fft_calcCSR
.L55:
IfxFft_Fft_calcCSR:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   137  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   138      uint32 csr =
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   139          (config->fftLength << IFX_FFT_CSR_LENGTH_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   140          (config->inputFormat << IFX_FFT_CSR_IN_FMT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   141          (config->outputFormat << IFX_FFT_CSR_OUT_FMT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   142          (config->operation << IFX_FFT_CSR_IFFT_OFF) |
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   143          ((config->useWindowFunction ? 0U : 1U) << IFX_FFT_CSR_WIN_BYP_OFF);
	ld.bu	d15,[a4]12
.L765:
	jeq	d15,#0,.L2
.L766:
	mov	d1,#0
.L767:
	j	.L3
.L2:
	mov	d1,#1
.L3:
	ld.bu	d15,[a4]8
.L768:
	sha	d0,d15,#8
.L769:
	ld.bu	d15,[a4]9
.L770:
	sha	d15,d15,#16
.L771:
	or	d0,d15
.L772:
	ld.bu	d15,[a4]10
.L773:
	sha	d15,d15,#18
.L774:
	or	d0,d15
.L775:
	ld.bu	d15,[a4]11
.L776:
	sha	d15,d15,#12
.L777:
	or	d0,d15
.L778:
	sh	d2,d1,#13
.L407:
	or	d2,d0
.L779:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   144      return csr;
	j	.L4

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   145  }
.L4:
	ret
.L326:
	
__IfxFft_Fft_calcCSR_function_end:
	.size	IfxFft_Fft_calcCSR,__IfxFft_Fft_calcCSR_function_end-IfxFft_Fft_calcCSR
.L154:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_cloneAndLinkJobs',code,cluster('IfxFft_Fft_cloneAndLinkJobs')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_cloneAndLinkJobs'
	.align	2
	
	.global	IfxFft_Fft_cloneAndLinkJobs

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   146  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   147  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   148  void IfxFft_Fft_cloneAndLinkJobs(IfxFft_Fft_Job *originalJob, IfxFft_Fft_Job *newJob)
; Function IfxFft_Fft_cloneAndLinkJobs
.L57:
IfxFft_Fft_cloneAndLinkJobs:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   149  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   150      *newJob              = *originalJob;
	lea	a15,[a4]0
.L583:
	lea	a2,[a5]0
	mov.a	a6,#2
.L5:
	ld.d	e0,[a15+]8
	st.d	[a2+]8,e0
	loop	a6,.L5
	ld.w	d15,[a15+]
	st.w	[a2+],d15
.L584:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   151      originalJob->nextJob = newJob;
	st.a	[a4]24,a5
.L585:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   152  }
	ret
.L209:
	
__IfxFft_Fft_cloneAndLinkJobs_function_end:
	.size	IfxFft_Fft_cloneAndLinkJobs,__IfxFft_Fft_cloneAndLinkJobs_function_end-IfxFft_Fft_cloneAndLinkJobs
.L114:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_unloadOutput',code,cluster('IfxFft_Fft_unloadOutput')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_unloadOutput'
	.align	2
	

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   153  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   154  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   155  IFX_STATIC void IfxFft_Fft_unloadOutput(IfxFft_Fft_Job *job)
; Function IfxFft_Fft_unloadOutput
.L59:
IfxFft_Fft_unloadOutput:	.type	func
	mov.aa	a15,a4
.L408:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   156  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   157  #if IFXFFT_FFT_DMA_SUPPORT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   158  #if IFXFFT_FFT_HW_EXEC
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   159      volatile Ifx_SRC_SRCR *srcr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   160      sint16                 discardCount;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   161  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   162  #if !IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   163      IfxDma_Dma_Channel    *dmaOutput  = &(job->fft->outputDmaChannel);
	ld.a	a2,[a15]
.L784:
	lea	a6,[a2]20
.L410:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   164      IfxDma_Dma_Channel    *dmaDiscard = &(job->fft->discardDmaChannel);
	ld.a	a2,[a15]
.L785:
	lea	a2,[a2]32
.L411:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   165      Ifx_DMA               *dmaSFR     = dmaOutput->dma;
	ld.a	a7,[a6]
.L413:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   166  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   167      Ifx_DMA               *dmaSFR     = (&MODULE_DMA);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   168  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   169  #if IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   170      IfxDma_setChannelDestinationAddress(dmaSFR, IFXFFT_FFT_DMAOUTPUTCHANNELID_OPT, job->outputPtr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   171      IfxDma_setChannelTransferCount(dmaSFR, IFXFFT_FFT_DMAOUTPUTCHANNELID_OPT, job->count64.output);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   172  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   173      IfxDma_setChannelDestinationAddress(dmaSFR, IFXFFT_FFT_DMAOUTPUTCHANNELID, job->outputPtr);
	ld.b	d15,[a6]4
.L786:
	ld.a	a4,[a15]12
.L338:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1548  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1549  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1550  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1551  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1553  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1554  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1555  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1556  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1557  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1558      return dma->TSR[channelId].B.CH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1559  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1560  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1561  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1562  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1563  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1564      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1565  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1566  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1567  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1568  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1569  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1570      dma->TSR[channelId].B.RST = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1571  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1572  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1573  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1574  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1575  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1576      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1577  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1579  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1580  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1581  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1582      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1583  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1585  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1586  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1587  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1588      dma->CH[channelId].DADR.U = (uint32)address;
	mul	d15,d15,#32
	addsc.a	a5,a7,d15,#0
.L787:
	mov.d	d15,a4
.L788:
	st.w	[a5]8204,d15
.L339:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   174  ob->count64.output);
	ld.b	d0,[a6]4
.L789:
	ld.hu	d1,[a15]20
.L348:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1548  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1549  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1550  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1551  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1553  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1554  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1555  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1556  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1557  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1558      return dma->TSR[channelId].B.CH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1559  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1560  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1561  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1562  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1563  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1564      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1565  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1566  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1567  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1568  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1569  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1570      dma->TSR[channelId].B.RST = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1571  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1572  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1573  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1574  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1575  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1576      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1577  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1579  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1580  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1581  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1582      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1583  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1585  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1586  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1587  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1588      dma->CH[channelId].DADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1589  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1590  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1591  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1592  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1593  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1594      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1595      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1596      adicr.B.DMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1597      adicr.B.INCD               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1598      adicr.B.CBLD               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1600  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1601  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1602  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1604  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1605      dma->TSR[channelId].B.HLTREQ = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1606  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1608  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1609  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1610  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1611      dma->CH[channelId].CHCSR.B.SIT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1612  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1613  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1614  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1615  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1616  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1617      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1618  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1619  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1620  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1621  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1622  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1623      dma->CH[channelId].ADICR.B.SHCT = shadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1624  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1625  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1626  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1627  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1628  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1629      dma->CH[channelId].CHCFGR.B.CHMODE = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1630  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1631  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1632  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1633  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1634  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1635      dma->CH[channelId].CHCFGR.B.RROAT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1636  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1637  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1638  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1639  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1640  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1641      dma->CH[channelId].CHCFGR.B.RROAT = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1642  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1643  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1645  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1646  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1647      dma->CH[channelId].SADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1648  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1649  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1651  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1653      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1654      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1655      adicr.B.SMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1656      adicr.B.INCS               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1657      adicr.B.CBLS               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1658      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1659  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1660  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1661  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1662  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1663  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1664      dma->SUSENR[channelId].B.SUSEN = enable;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1665  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1666  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1668  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1669  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1670      dma->CH[channelId].CHCFGR.B.TREL = transferCount;
	mul	d15,d0,#32
	addsc.a	a4,a7,d15,#0
	mul	d15,d0,#32
	addsc.a	a5,a7,d15,#0
.L790:
	ld.hu	d15,[a5]8212
.L791:
	insert	d15,d15,d1,#0,#14
	st.h	[a4]8212,d15
.L349:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   175  endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   176      discardCount = (job->count64.result - job->count64.output);
	ld.hu	d15,[a15]22
.L792:
	ld.hu	d0,[a15]20
.L793:
	sub	d15,d0
	extr	d0,d15,#0,#16
.L414:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   177  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   178      if (discardCount > 0)
	jlt	d0,#1,.L6
.L794:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   179      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   180  #if IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   181          IfxDma_setChannelDestinationAddress(dmaSFR, IFXFFT_FFT_DMADISCARDCHANNELID_OPT, IfxFft_Fft_dummy256);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   182          IfxDma_setChannelTransferCount(dmaSFR, IFXFFT_FFT_DMADISCARDCHANNELID_OPT, discardCount);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   183  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   184          IfxDma_setChannelDestinationAddress(dmaSFR, IFXFFT_FFT_DMADISCARDCHANNELID, IfxFft_Fft_dummy256);
	ld.b	d15,[a2]4
.L795:
	movh.a	a4,#@his(IfxFft_Fft_dummy256)
	lea	a4,[a4]@los(IfxFft_Fft_dummy256)
.L357:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1548  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1549  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1550  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1551  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1553  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1554  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1555  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1556  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1557  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1558      return dma->TSR[channelId].B.CH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1559  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1560  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1561  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1562  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1563  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1564      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1565  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1566  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1567  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1568  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1569  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1570      dma->TSR[channelId].B.RST = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1571  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1572  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1573  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1574  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1575  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1576      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1577  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1579  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1580  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1581  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1582      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1583  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1585  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1586  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1587  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1588      dma->CH[channelId].DADR.U = (uint32)address;
	mul	d15,d15,#32
	addsc.a	a5,a7,d15,#0
.L796:
	mov.d	d15,a4
.L797:
	st.w	[a5]8204,d15
.L358:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   185  xDma_setChannelTransferCount(dmaSFR, IFXFFT_FFT_DMADISCARDCHANNELID, discardCount);
	ld.b	d1,[a2]4
.L359:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1548  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1549  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1550  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1551  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1553  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1554  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1555  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1556  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1557  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1558      return dma->TSR[channelId].B.CH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1559  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1560  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1561  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1562  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1563  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1564      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1565  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1566  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1567  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1568  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1569  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1570      dma->TSR[channelId].B.RST = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1571  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1572  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1573  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1574  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1575  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1576      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1577  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1579  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1580  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1581  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1582      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1583  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1585  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1586  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1587  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1588      dma->CH[channelId].DADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1589  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1590  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1591  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1592  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1593  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1594      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1595      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1596      adicr.B.DMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1597      adicr.B.INCD               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1598      adicr.B.CBLD               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1600  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1601  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1602  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1604  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1605      dma->TSR[channelId].B.HLTREQ = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1606  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1608  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1609  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1610  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1611      dma->CH[channelId].CHCSR.B.SIT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1612  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1613  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1614  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1615  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1616  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1617      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1618  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1619  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1620  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1621  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1622  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1623      dma->CH[channelId].ADICR.B.SHCT = shadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1624  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1625  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1626  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1627  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1628  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1629      dma->CH[channelId].CHCFGR.B.CHMODE = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1630  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1631  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1632  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1633  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1634  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1635      dma->CH[channelId].CHCFGR.B.RROAT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1636  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1637  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1638  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1639  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1640  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1641      dma->CH[channelId].CHCFGR.B.RROAT = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1642  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1643  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1645  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1646  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1647      dma->CH[channelId].SADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1648  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1649  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1651  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1653      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1654      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1655      adicr.B.SMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1656      adicr.B.INCS               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1657      adicr.B.CBLS               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1658      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1659  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1660  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1661  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1662  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1663  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1664      dma->SUSENR[channelId].B.SUSEN = enable;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1665  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1666  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1668  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1669  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1670      dma->CH[channelId].CHCFGR.B.TREL = transferCount;
	mul	d15,d1,#32
	addsc.a	a2,a7,d15,#0
.L412:
	mul	d15,d1,#32
	addsc.a	a4,a7,d15,#0
.L798:
	ld.hu	d15,[a4]8212
.L799:
	extr.u	d0,d0,#0,#16
.L415:
	insert	d15,d15,d0,#0,#14
	st.h	[a2]8212,d15
.L360:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   186  endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   187  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   188  #if IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   189          srcr    = IfxDma_getSrcPointer(dmaSFR, IFXFFT_FFT_DMAOUTPUTCHANNELID_OPT);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   190  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   191          srcr    = IfxDma_getSrcPointer(dmaSFR, IFXFFT_FFT_DMAOUTPUTCHANNELID);
	ld.b	d15,[a6]4
.L361:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);      (inlined)
	jz.a	a7,.L7
.L7:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	mul	d15,d15,#4
	mov.a	a2,d15
	movh.a	a3,#61444
	add.a	a3,a2
	lea	a2,[a3]-31488
.L800:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];      (inlined)
	j	.L8

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }      (inlined)
.L8:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   192  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   193          srcr->B = job->fft->srcrOutDis;
	ld.a	a15,[a15]
.L409:
	ld.w	d15,[a15]56
.L801:
	st.w	[a2],d15
.L802:
	j	.L9
.L6:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   194      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   195      else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   196      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   197  #if IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   198          srcr    = IfxDma_getSrcPointer(dmaSFR, IFXFFT_FFT_DMAOUTPUTCHANNELID_OPT);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   199  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   200          srcr    = IfxDma_getSrcPointer(dmaSFR, IFXFFT_FFT_DMAOUTPUTCHANNELID);
	ld.b	d15,[a6]4
.L364:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);      (inlined)
	jz.a	a7,.L10
.L10:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	mul	d15,d15,#4
	mov.a	a2,d15
.L416:
	movh.a	a3,#61444
	add.a	a3,a2
	lea	a2,[a3]-31488
.L803:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];      (inlined)
	j	.L11

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }      (inlined)
.L11:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   201         srcr->B = job->fft->srcrOutEnd;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   202      }
	ld.a	a15,[a15]
.L417:
	ld.w	d15,[a15]60
.L804:
	st.w	[a2],d15
.L9:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   203  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   204  #if IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   205      IfxDma_startChannelTransaction(dmaSFR, IFXFFT_FFT_DMAOUTPUTCHANNELID_OPT);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   206  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   207      IfxDma_startChannelTransaction(dmaSFR, IFXFFT_FFT_DMAOUTPUTCHANNELID);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   208  #endif
	ld.b	d0,[a6]4
.L366:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1548  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1549  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1550  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1551  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1553  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1554  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1555  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1556  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1557  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1558      return dma->TSR[channelId].B.CH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1559  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1560  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1561  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1562  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1563  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1564      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1565  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1566  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1567  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1568  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1569  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1570      dma->TSR[channelId].B.RST = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1571  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1572  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1573  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1574  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1575  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1576      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1577  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1579  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1580  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1581  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1582      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1583  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1585  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1586  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1587  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1588      dma->CH[channelId].DADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1589  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1590  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1591  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1592  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1593  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1594      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1595      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1596      adicr.B.DMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1597      adicr.B.INCD               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1598      adicr.B.CBLD               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1600  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1601  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1602  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1604  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1605      dma->TSR[channelId].B.HLTREQ = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1606  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1608  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1609  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1610  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1611      dma->CH[channelId].CHCSR.B.SIT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1612  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1613  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1614  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1615  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1616  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1617      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1618  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1619  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1620  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1621  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1622  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1623      dma->CH[channelId].ADICR.B.SHCT = shadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1624  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1625  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1626  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1627  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1628  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1629      dma->CH[channelId].CHCFGR.B.CHMODE = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1630  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1631  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1632  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1633  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1634  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1635      dma->CH[channelId].CHCFGR.B.RROAT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1636  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1637  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1638  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1639  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1640  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1641      dma->CH[channelId].CHCFGR.B.RROAT = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1642  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1643  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1645  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1646  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1647      dma->CH[channelId].SADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1648  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1649  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1651  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1653      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1654      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1655      adicr.B.SMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1656      adicr.B.INCS               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1657      adicr.B.CBLS               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1658      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1659  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1660  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1661  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1662  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1663  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1664      dma->SUSENR[channelId].B.SUSEN = enable;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1665  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1666  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1668  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1669  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1670      dma->CH[channelId].CHCFGR.B.TREL = transferCount;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1671  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1672  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1674  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1675  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1676      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1677      IfxScuWdt_clearCpuEndinit(passwd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1678      dma->CLC.B.EDIS = mode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1679      IfxScuWdt_setCpuEndinit(passwd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1680  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1682  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1683  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1684  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1685      dma->CH[channelId].CHCSR.B.SCH = 1;
	mul	d15,d0,#32
	addsc.a	a15,a7,d15,#0
	mul	d15,d0,#32
	addsc.a	a2,a7,d15,#0
.L805:
	ld.bu	d15,[a2]8223
.L806:
	or	d15,#128
	st.b	[a15]8223,d15
.L367:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   209  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   210      sint16  i;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   211      uint64 *output64;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   212  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   213      output64 = job->outputPtr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   214  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   215      for (i = 0; i < job->count64.output; i++)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   216      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   217          *(output64++) = IFXFFT_FFT_DATA_TRANSFER;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   218      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   219  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   220      for ( ; i < job->count64.result; i++)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   221      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   222          volatile uint64 dummy64 = IFXFFT_FFT_DATA_TRANSFER;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   223  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   224          if (dummy64) // avoid warning message (unused variable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   225          {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   226      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   227  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   228  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   229  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   231  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   232  void IfxFft_Fft_initJob(IfxFft_Fft_Job *job, const IfxFft_Fft_JobConfig *jobConfig)
	ret
.L329:
	
__IfxFft_Fft_unloadOutput_function_end:
	.size	IfxFft_Fft_unloadOutput,__IfxFft_Fft_unloadOutput_function_end-IfxFft_Fft_unloadOutput
.L159:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_initJob',code,cluster('IfxFft_Fft_initJob')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_initJob'
	.align	2
	
	.global	IfxFft_Fft_initJob

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   233  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   234      // take over FFT handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   235      job->fft     = jobConfig->fft;
; Function IfxFft_Fft_initJob
.L61:
IfxFft_Fft_initJob:	.type	func
	mov.aa	a12,a4
.L419:
	mov.aa	a13,a5
.L420:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   236      job->nextJob = NULL_PTR;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   237  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   238      // engine control
	ld.a	a2,[a13]
.L590:
	st.a	[a12],a2
.L591:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   239      job->csr.U     = IfxFft_Fft_calcCSR(jobConfig);
	mov.a	a15,#0
.L592:
	st.a	[a12]24,a15
.L593:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   240      job->inputPtr  = jobConfig->inputPtr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   241      job->outputPtr = jobConfig->outputPtr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   242  
	mov.aa	a4,a13
.L418:
	call	IfxFft_Fft_calcCSR
.L421:
	st.w	[a12]4,d2
.L594:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   243      // move counters
	ld.a	a15,[a13]16
.L595:
	st.a	[a12]8,a15
.L596:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   244      IfxFft_Fft_calcCounters(job, jobConfig);
	ld.a	a15,[a13]20
.L597:
	st.a	[a12]12,a15
.L598:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   245  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   246      // config check
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   247      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (IfxFft_getLengthFromCode(jobConfig->fftLength)) <= IFXFFT_MAX_LENGTH);
	mov.aa	a4,a12
.L422:
	mov.aa	a5,a13
.L424:
	call	IfxFft_Fft_calcCounters
.L423:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   248      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, jobConfig->inputLength > 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   249      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, jobConfig->outputLength > 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   250  #if IFXFFT_FFT_DMA_SUPPORT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   251      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (IfxFft_getLengthFromCode(jobConfig->fftLength)) == jobConfig->inputLength);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   252  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   253      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (IfxFft_getLengthFromCode(jobConfig->fftLength)) >= jobConfig->inputLength);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   254  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   255      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (IfxFft_getLengthFromCode(jobConfig->fftLength)) >= jobConfig->outputLength);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   256      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, IFXFFT_FFT_ISALIGNED(jobConfig->outputLength));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   257      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, IFXFFT_FFT_ISALIGNED(job->inputPtr));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   258      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, IFXFFT_FFT_ISALIGNED(job->outputPtr));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   259  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   261  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   262  void IfxFft_Fft_initJobConfig(IfxFft_Fft_JobConfig *config, IfxFft_Fft *fft)
	ret
.L212:
	
__IfxFft_Fft_initJob_function_end:
	.size	IfxFft_Fft_initJob,__IfxFft_Fft_initJob_function_end-IfxFft_Fft_initJob
.L119:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_initJobConfig',code,cluster('IfxFft_Fft_initJobConfig')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_initJobConfig'
	.align	2
	
	.global	IfxFft_Fft_initJobConfig

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   263  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   264      config->fft               = fft;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   265      config->inputLength       = 256;
; Function IfxFft_Fft_initJobConfig
.L63:
IfxFft_Fft_initJobConfig:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   266      config->outputLength      = 256;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   267      config->fftLength         = IfxFft_Length_256;
	st.a	[a4],a5
.L603:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   268      config->inputFormat       = IfxFft_Input_realSInt32;
	mov	d15,#256
.L604:
	st.h	[a4]4,d15
.L605:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   269      config->outputFormat      = IfxFft_Output_complexSInt32;
	mov	d15,#256
.L606:
	st.h	[a4]6,d15
.L607:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   270      config->operation         = IfxFft_Operation_fft;
	mov	d15,#8
.L608:
	st.b	[a4]8,d15
.L609:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   271      config->useWindowFunction = FALSE;
	mov	d15,#1
.L610:
	st.b	[a4]9,d15
.L611:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   272      config->inputPtr          = NULL_PTR;
	mov	d15,#0
.L612:
	st.b	[a4]10,d15
.L613:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   273      config->outputPtr         = NULL_PTR;
	mov	d15,#0
.L614:
	st.b	[a4]11,d15
.L615:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   274  }
	mov	d15,#0
.L616:
	st.b	[a4]12,d15
.L617:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   275  
	mov.a	a15,#0
.L618:
	st.a	[a4]16,a15
.L619:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   276  
	mov.a	a15,#0
.L620:
	st.a	[a4]20,a15
.L621:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   277  void IfxFft_Fft_initModule(IfxFft_Fft *fft, const IfxFft_Fft_Config *config)
	ret
.L216:
	
__IfxFft_Fft_initJobConfig_function_end:
	.size	IfxFft_Fft_initJobConfig,__IfxFft_Fft_initJobConfig_function_end-IfxFft_Fft_initJobConfig
.L124:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_initModule',code,cluster('IfxFft_Fft_initModule')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_initModule'
	.align	2
	
	.global	IfxFft_Fft_initModule

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   278  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   279  #if !IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   280      Ifx_FFT *fftSFR = config->fft;
; Function IfxFft_Fft_initModule
.L65:
IfxFft_Fft_initModule:	.type	func
	mov.aa	a15,a4
.L426:
	mov.aa	a12,a5
.L427:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   281      Ifx_LMU *lmuSFR = config->lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   282  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   283      fft->fft = fftSFR;
	ld.a	a13,[a12]
.L428:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   284      fft->lmu = lmuSFR;
	ld.a	a2,[a12]4
.L429:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   285  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   286      Ifx_FFT *fftSFR = (&MODULE_FFT);
	st.a	[a15],a13
.L504:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   287      Ifx_LMU *lmuSFR = (&MODULE_LMU);
	st.a	[a15]4,a2
.L505:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   288  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   289  #if IFXFFT_FFT_DMA_SUPPORT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   290  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   291      fft->inputIdx = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   292      fft->job[0]   = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   293      fft->job[1]   = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   294  #endif
	mov	d15,#0
.L506:
	st.w	[a15]48,d15
.L507:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   295  
	mov.a	a2,#0
.L430:
	st.a	[a15]64,a2
.L508:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   296      if (IfxFft_isModuleEnabled(fftSFR) == FALSE)
	mov.a	a2,#0
.L509:
	st.a	[a15]68,a2
.L182:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     2   * \file IfxFft.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     3   * \brief FFT  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     4   * \ingroup IfxLld_Fft
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     7   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    44   * \defgroup IfxLld_Fft_Std_Enumerations Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    45   * \ingroup IfxLld_Fft_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    46   * \defgroup IfxLld_Fft_Std_UtilityFunctions Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    47   * \ingroup IfxLld_Fft_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    48   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    49  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    50  #ifndef IFXFFT_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    51  #define IFXFFT_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    52  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    53  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    54  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    55  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    56  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    57  #include "_Impl/IfxFft_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    58  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    59  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    60  #include "IfxFft_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    61  #include "IfxLmu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    62  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    63  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    64  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    65  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    67  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    68  /** \addtogroup IfxLld_Fft_Std_Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    69   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    70  /** \brief Input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    71   * Definition in Ifx_FFT.CSR.B.IN.FMT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    72   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    73  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    74  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    75      IfxFft_Input_complexSInt32 = 0,  /**< \brief 1 complex 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    76      IfxFft_Input_realSInt32    = 1,  /**< \brief 2 real 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    77      IfxFft_Input_complexSInt16 = 2,  /**< \brief 2 complex 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    78      IfxFft_Input_realSInt16    = 3   /**< \brief 4 real 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    79  } IfxFft_Input;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    81  /** \brief Length of transform. Log base 2 of the required transform size.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    82   * Length must be between 3 (transform of 8) and 11 (transform of 2048).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    83   * Definition in Ifx_FFT.CSR.B.LENGTH
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    84   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    85  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    86  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    87      IfxFft_Length_8    = 3,  /**< \brief transform of 8 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    88      IfxFft_Length_16   = 4,  /**< \brief transform of 16 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    89      IfxFft_Length_32   = 5,  /**< \brief transform of 32 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    90      IfxFft_Length_64   = 6,  /**< \brief transform of 64 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    91      IfxFft_Length_128  = 7,  /**< \brief transform of 128 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    92      IfxFft_Length_256  = 8,  /**< \brief transform of 256 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    93      IfxFft_Length_512  = 9,  /**< \brief transform of 512 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    94      IfxFft_Length_1024 = 10  /**< \brief transform of 1024 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    95  } IfxFft_Length;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    96  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    97  /** \brief Operation (FFT / IFFT)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    98   * Definition in Ifx_FFT.CSR.B.IFFT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    99   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   100  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   101  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   102      IfxFft_Operation_fft  = 0, /**< \brief perform FFT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   103      IfxFft_Operation_ifft = 1  /**< \brief perform IFFT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   104  } IfxFft_Operation;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   105  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   106  /** \brief Output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   107   * Definition in Ifx_FFT.CSR.B.OUT.FMT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   108   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   109  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   110  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   111      IfxFft_Output_complexSInt32 = 0,  /**< \brief 1 complex 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   112      IfxFft_Output_complexSInt16 = 1   /**< \brief 2 complex 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   113  } IfxFft_Output;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   114  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   115  /** \brief OCDS Suspend Control (OCDS.SUS)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   116   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   117  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   118  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   119      IfxFft_SuspendMode_none = 0,  /**< \brief No suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   120      IfxFft_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   121      IfxFft_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   122  } IfxFft_SuspendMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   124  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   125  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   126  /** \addtogroup IfxLld_Fft_Std_UtilityFunctions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   127   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   128  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   129  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   131  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   133  /** \brief Disables the FFT module and also the LMU interface
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   134   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   135   * \param lmu pointer to LMU registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   136   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   137   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   138  IFX_INLINE void IfxFft_disableModule(Ifx_FFT *fft, Ifx_LMU *lmu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   139  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   140  /** \brief Enables the FFT module and also the LMU interface
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   141   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   142   * \param lmu pointer to LMU registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   143   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   144   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   145  IFX_INLINE void IfxFft_enableModule(Ifx_FFT *fft, Ifx_LMU *lmu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   146  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   147  /** \brief Returns the input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   148   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   149   * \return Input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   151  IFX_INLINE IfxFft_Input IfxFft_getInputFormat(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   152  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   153  /** \brief Returns the length of the transform (length code, 3 to 10)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   154   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   155   * \return Length of the transform (length code)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   156   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   157  IFX_INLINE IfxFft_Length IfxFft_getLength(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   158  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   159  /** \brief Converts the given input length into the transform length code, to write into Ifx_FFT.CSR.B.LENGTH
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   160   * \param length Input length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   161   * \return Length of the transform (code, 3 to 10)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   162   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   163  IFX_INLINE IfxFft_Length IfxFft_getLengthCode(uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   164  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   165  /** \brief Retruns the actual length of the transform from the length code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   166   * \param length Length of transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   167   * \return Actual length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   168   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   169  IFX_INLINE uint16 IfxFft_getLengthFromCode(IfxFft_Length length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   170  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   171  /** \brief Returns the output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   172   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   173   * \return Output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   175  IFX_INLINE IfxFft_Output IfxFft_getOutputFormat(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   177  /** \brief Returns the status of FFT DONE request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   178   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   179   * \return Status of FFT DONE request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   180   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   181  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerDone(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   183  /** \brief Returns the status of FFT RFS request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   184   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   185   * \return Status of FFT RFS request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   186   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   187  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerRfs(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   188  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   189  /** \brief Returns the actual length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   190   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   191   * \return Actual length of the transform ()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   192   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   193  IFX_INLINE uint16 IfxFft_getTransformLength(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   194  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   195  /** \brief Returns the status of whether the FFT Engine is Idle or has at least one transform in operation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   196   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   197   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   198   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   199  IFX_INLINE boolean IfxFft_isEngineBusy(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   200  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   201  /** \brief Returns the status of whether the module is enabled or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   202   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   203   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   204   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   205  IFX_INLINE boolean IfxFft_isModuleEnabled(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   206  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   207  /** \brief Returns the module's suspend state.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   208   * TRUE :if module is suspended.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   209   * FALSE:if module is not yet suspended.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   210   * \param fft Pointer to FFT module registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   211   * \return Suspend status (TRUE / FALSE)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   212   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   213  IFX_INLINE boolean IfxFft_isModuleSuspended(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   214  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   215  /** \brief Returns the status of whether the module can accept a START operation or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   216   * \param fft Pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   217   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   219  IFX_INLINE boolean IfxFft_isReadyForStart(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   221  /** \brief Configure the Module to Hard/Soft suspend mode.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   222   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   223   * \param fft Pointer to FFT module registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   224   * \param mode Module suspend mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   227  IFX_INLINE void IfxFft_setSuspendMode(Ifx_FFT *fft, IfxFft_SuspendMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   229  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   230  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   232  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   233  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   235  IFX_INLINE void IfxFft_disableModule(Ifx_FFT *fft, Ifx_LMU *lmu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   236  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   237      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   238      IfxScuWdt_clearCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   239      // FFT clock disable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   240      fft->CLC.B.DISR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   241      IfxScuWdt_setCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   242  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   243  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   245  IFX_INLINE void IfxFft_enableModule(Ifx_FFT *fft, Ifx_LMU *lmu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   246  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   247      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   248      IfxScuWdt_clearCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   249      // FFT clock enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   250      fft->CLC.U = 0x0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   251      IfxScuWdt_setCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   252  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   255  IFX_INLINE IfxFft_Input IfxFft_getInputFormat(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   256  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   257      return (IfxFft_Input)fft->CSR.B.IN_FMT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   258  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   259  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   260  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   261  IFX_INLINE IfxFft_Length IfxFft_getLength(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   262  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   263      return (IfxFft_Length)fft->CSR.B.LENGTH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   264  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   265  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   266  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   267  IFX_INLINE IfxFft_Length IfxFft_getLengthCode(uint16 length)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   268  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   269      return (IfxFft_Length)(31 - __clz((uint32)length));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   270  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   272  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   273  IFX_INLINE uint16 IfxFft_getLengthFromCode(IfxFft_Length length)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   274  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   275      return 1 << (uint32)length;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   276  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   277  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   278  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   279  IFX_INLINE IfxFft_Output IfxFft_getOutputFormat(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   280  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   281      return (IfxFft_Output)fft->CSR.B.OUT_FMT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   282  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   283  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   284  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   285  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerDone(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   286  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   287      // only a single FFT available, therefore no check for the fft pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   288      return &MODULE_SRC.FFT.FFT[0].DONE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   289  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   290  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   291  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   292  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerRfs(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   293  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   294      // only a single FFT available, therefore no check for the fft pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   295      return &MODULE_SRC.FFT.FFT[0].RFS;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   296  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   297  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   299  IFX_INLINE uint16 IfxFft_getTransformLength(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   300  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   301      return 1U << fft->CSR.B.LENGTH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   302  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   303  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   305  IFX_INLINE boolean IfxFft_isEngineBusy(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   306  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   307      return fft->CSR.B.BUSY != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   308  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   310  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   311  IFX_INLINE boolean IfxFft_isModuleEnabled(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   312  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   313      return fft->CLC.B.DISS == 0;
	ld.w	d15,[a13]
	extr.u	d15,d15,#1,#1
.L510:
	eq	d15,d15,#0
.L511:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   313      return fft->CLC.B.DISS == 0;      (inlined)
	j	.L12

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   314  }      (inlined)
.L12:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   297   IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->outputPriority > 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   298      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->inputPriority > 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   299      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->intraPriority > 0);
	jne	d15,#0,.L13
.L187:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     2   * \file IfxFft.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     3   * \brief FFT  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     4   * \ingroup IfxLld_Fft
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     7   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    44   * \defgroup IfxLld_Fft_Std_Enumerations Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    45   * \ingroup IfxLld_Fft_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    46   * \defgroup IfxLld_Fft_Std_UtilityFunctions Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    47   * \ingroup IfxLld_Fft_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    48   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    49  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    50  #ifndef IFXFFT_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    51  #define IFXFFT_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    52  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    53  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    54  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    55  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    56  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    57  #include "_Impl/IfxFft_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    58  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    59  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    60  #include "IfxFft_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    61  #include "IfxLmu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    62  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    63  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    64  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    65  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    67  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    68  /** \addtogroup IfxLld_Fft_Std_Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    69   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    70  /** \brief Input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    71   * Definition in Ifx_FFT.CSR.B.IN.FMT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    72   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    73  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    74  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    75      IfxFft_Input_complexSInt32 = 0,  /**< \brief 1 complex 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    76      IfxFft_Input_realSInt32    = 1,  /**< \brief 2 real 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    77      IfxFft_Input_complexSInt16 = 2,  /**< \brief 2 complex 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    78      IfxFft_Input_realSInt16    = 3   /**< \brief 4 real 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    79  } IfxFft_Input;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    81  /** \brief Length of transform. Log base 2 of the required transform size.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    82   * Length must be between 3 (transform of 8) and 11 (transform of 2048).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    83   * Definition in Ifx_FFT.CSR.B.LENGTH
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    84   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    85  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    86  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    87      IfxFft_Length_8    = 3,  /**< \brief transform of 8 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    88      IfxFft_Length_16   = 4,  /**< \brief transform of 16 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    89      IfxFft_Length_32   = 5,  /**< \brief transform of 32 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    90      IfxFft_Length_64   = 6,  /**< \brief transform of 64 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    91      IfxFft_Length_128  = 7,  /**< \brief transform of 128 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    92      IfxFft_Length_256  = 8,  /**< \brief transform of 256 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    93      IfxFft_Length_512  = 9,  /**< \brief transform of 512 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    94      IfxFft_Length_1024 = 10  /**< \brief transform of 1024 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    95  } IfxFft_Length;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    96  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    97  /** \brief Operation (FFT / IFFT)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    98   * Definition in Ifx_FFT.CSR.B.IFFT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    99   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   100  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   101  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   102      IfxFft_Operation_fft  = 0, /**< \brief perform FFT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   103      IfxFft_Operation_ifft = 1  /**< \brief perform IFFT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   104  } IfxFft_Operation;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   105  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   106  /** \brief Output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   107   * Definition in Ifx_FFT.CSR.B.OUT.FMT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   108   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   109  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   110  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   111      IfxFft_Output_complexSInt32 = 0,  /**< \brief 1 complex 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   112      IfxFft_Output_complexSInt16 = 1   /**< \brief 2 complex 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   113  } IfxFft_Output;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   114  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   115  /** \brief OCDS Suspend Control (OCDS.SUS)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   116   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   117  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   118  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   119      IfxFft_SuspendMode_none = 0,  /**< \brief No suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   120      IfxFft_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   121      IfxFft_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   122  } IfxFft_SuspendMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   124  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   125  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   126  /** \addtogroup IfxLld_Fft_Std_UtilityFunctions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   127   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   128  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   129  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   131  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   133  /** \brief Disables the FFT module and also the LMU interface
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   134   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   135   * \param lmu pointer to LMU registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   136   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   137   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   138  IFX_INLINE void IfxFft_disableModule(Ifx_FFT *fft, Ifx_LMU *lmu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   139  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   140  /** \brief Enables the FFT module and also the LMU interface
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   141   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   142   * \param lmu pointer to LMU registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   143   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   144   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   145  IFX_INLINE void IfxFft_enableModule(Ifx_FFT *fft, Ifx_LMU *lmu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   146  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   147  /** \brief Returns the input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   148   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   149   * \return Input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   151  IFX_INLINE IfxFft_Input IfxFft_getInputFormat(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   152  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   153  /** \brief Returns the length of the transform (length code, 3 to 10)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   154   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   155   * \return Length of the transform (length code)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   156   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   157  IFX_INLINE IfxFft_Length IfxFft_getLength(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   158  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   159  /** \brief Converts the given input length into the transform length code, to write into Ifx_FFT.CSR.B.LENGTH
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   160   * \param length Input length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   161   * \return Length of the transform (code, 3 to 10)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   162   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   163  IFX_INLINE IfxFft_Length IfxFft_getLengthCode(uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   164  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   165  /** \brief Retruns the actual length of the transform from the length code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   166   * \param length Length of transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   167   * \return Actual length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   168   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   169  IFX_INLINE uint16 IfxFft_getLengthFromCode(IfxFft_Length length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   170  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   171  /** \brief Returns the output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   172   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   173   * \return Output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   175  IFX_INLINE IfxFft_Output IfxFft_getOutputFormat(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   177  /** \brief Returns the status of FFT DONE request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   178   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   179   * \return Status of FFT DONE request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   180   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   181  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerDone(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   183  /** \brief Returns the status of FFT RFS request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   184   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   185   * \return Status of FFT RFS request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   186   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   187  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerRfs(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   188  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   189  /** \brief Returns the actual length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   190   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   191   * \return Actual length of the transform ()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   192   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   193  IFX_INLINE uint16 IfxFft_getTransformLength(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   194  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   195  /** \brief Returns the status of whether the FFT Engine is Idle or has at least one transform in operation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   196   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   197   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   198   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   199  IFX_INLINE boolean IfxFft_isEngineBusy(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   200  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   201  /** \brief Returns the status of whether the module is enabled or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   202   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   203   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   204   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   205  IFX_INLINE boolean IfxFft_isModuleEnabled(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   206  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   207  /** \brief Returns the module's suspend state.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   208   * TRUE :if module is suspended.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   209   * FALSE:if module is not yet suspended.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   210   * \param fft Pointer to FFT module registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   211   * \return Suspend status (TRUE / FALSE)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   212   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   213  IFX_INLINE boolean IfxFft_isModuleSuspended(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   214  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   215  /** \brief Returns the status of whether the module can accept a START operation or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   216   * \param fft Pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   217   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   219  IFX_INLINE boolean IfxFft_isReadyForStart(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   221  /** \brief Configure the Module to Hard/Soft suspend mode.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   222   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   223   * \param fft Pointer to FFT module registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   224   * \param mode Module suspend mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   227  IFX_INLINE void IfxFft_setSuspendMode(Ifx_FFT *fft, IfxFft_SuspendMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   229  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   230  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   232  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   233  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   235  IFX_INLINE void IfxFft_disableModule(Ifx_FFT *fft, Ifx_LMU *lmu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   236  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   237      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   238      IfxScuWdt_clearCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   239      // FFT clock disable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   240      fft->CLC.B.DISR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   241      IfxScuWdt_setCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   242  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   243  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   245  IFX_INLINE void IfxFft_enableModule(Ifx_FFT *fft, Ifx_LMU *lmu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   246  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   247      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L425:
	mov	d15,d2
.L432:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   248      IfxScuWdt_clearCpuEndinit(password);
	mov	d4,d15
.L431:
	call	IfxScuWdt_clearCpuEndinit
.L433:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   249      // FFT clock enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   250      fft->CLC.U = 0x0;
	mov	d0,#0
.L512:
	st.w	[a13],d0
.L513:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   251      IfxScuWdt_setCpuEndinit(password);
	mov	d4,d15
.L434:
	call	IfxScuWdt_setCpuEndinit
.L13:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   300    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->inputDmaChannelId != IfxDma_ChannelId_none);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   301      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->outputDmaChannelId != IfxDma_ChannelId_none);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   302      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->discardDmaChannelId != IfxDma_ChannelId_none);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   303  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   304      IfxFft_Fft_initDma(fft, config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   305  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   306      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->typeOfService != IfxSrc_Tos_dma);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   307  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   308      if (config->outputPriority > 0)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   309      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   310          volatile Ifx_SRC_SRCR *srcr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   311          // FFT DONE as ISR output
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   312          srcr = IfxFft_getSrcPointerDone(fftSFR);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   313          IfxSrc_init(srcr, config->typeOfService, config->outputPriority);
	mov.aa	a4,a15
.L435:
	mov.aa	a5,a12
.L437:
	call	IfxFft_Fft_initDma
.L436:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   314          IfxSrc_enable(srcr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   315      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   316  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   317  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   318  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   319  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   320  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   321  void IfxFft_Fft_initModuleConfig(IfxFft_Fft_Config *config, Ifx_FFT *fft, Ifx_LMU *lmu)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   322  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   323  #if !IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   324      config->fft = fft;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   325      config->lmu = lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   326  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   327  
	ret
.L172:
	
__IfxFft_Fft_initModule_function_end:
	.size	IfxFft_Fft_initModule,__IfxFft_Fft_initModule_function_end-IfxFft_Fft_initModule
.L94:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_initModuleConfig',code,cluster('IfxFft_Fft_initModuleConfig')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_initModuleConfig'
	.align	2
	
	.global	IfxFft_Fft_initModuleConfig

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   328  #if IFXFFT_FFT_DMA_SUPPORT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   329  #if IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   330      config->inputDmaChannelId   = IFXFFT_FFT_DMA_CHANNEL_BASE;
; Function IfxFft_Fft_initModuleConfig
.L67:
IfxFft_Fft_initModuleConfig:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   331      config->outputDmaChannelId  = IFXFFT_FFT_DMA_CHANNEL_BASE + 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   332      config->discardDmaChannelId = IFXFFT_FFT_DMA_CHANNEL_BASE + 2;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   333  #else
	st.a	[a4],a5
.L518:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   334      config->fft                 = fft;
	st.a	[a4]4,a6
.L519:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   335      config->lmu                 = lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   336      config->inputDmaChannelId   = IfxDma_ChannelId_none;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   337      config->outputDmaChannelId  = IfxDma_ChannelId_none;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   338      config->discardDmaChannelId = IfxDma_ChannelId_none;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   339  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   340  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   341      config->inputPriority  = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   342      config->outputPriority = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   343      config->typeOfService  = IfxSrc_Tos_cpu0;
	st.a	[a4],a5
.L520:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   344  }
	st.a	[a4]4,a6
.L521:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   345  
	mov	d15,#-1
.L522:
	st.b	[a4]15,d15
.L523:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   346  
	mov	d15,#-1
.L524:
	st.b	[a4]16,d15
.L525:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   347  void IfxFft_Fft_initWindow(IfxFft_Fft *fft, const uint64 *windowData)
	mov	d15,#-1
.L526:
	st.b	[a4]17,d15
.L527:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   348  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   349      int           i;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   350      const uint64 *ptr = windowData;
	mov	d15,#0
.L528:
	st.h	[a4]8,d15
.L529:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   351  
	mov	d15,#0
.L530:
	st.h	[a4]12,d15
.L531:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   352  #if !IFXFFT_FFT_OPTIMIZED
	mov	d15,#0
.L532:
	st.b	[a4]14,d15
.L533:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   353      /*IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, MODULE_LMU.MEMCON.B.FFTPFT == 0);*/
	ret
.L195:
	
__IfxFft_Fft_initModuleConfig_function_end:
	.size	IfxFft_Fft_initModuleConfig,__IfxFft_Fft_initModuleConfig_function_end-IfxFft_Fft_initModuleConfig
.L99:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_initWindow',code,cluster('IfxFft_Fft_initWindow')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_initWindow'
	.align	2
	
	.global	IfxFft_Fft_initWindow

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   354      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, !IfxFft_isEngineBusy(fft->fft));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   355      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, IfxFft_isReadyForStart(fft->fft));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   356  #else
; Function IfxFft_Fft_initWindow
.L69:
IfxFft_Fft_initWindow:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   357      /*IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, MODULE_LMU.MEMCON.B.FFTPFT == 0);*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   358      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, !IfxFft_isEngineBusy(&MODULE_FFT));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   359      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, IfxFft_isReadyForStart(&MODULE_FFT));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   360  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   361  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   362      uint64 *wmem = (uint64 *)IFXFFT_WINDOW_SPACE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   363  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   364      for (i = 0; i < (IFXFFT_MAX_WINDOW_LENGTH / (sizeof(uint64) / sizeof(uint16))); i++)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   365      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   366          *(wmem++) = *(ptr++);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   367      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   368  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   370  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   371  void IfxFft_Fft_isrInput(IfxFft_Fft *fft)
	movh.a	a15,#48656
.L438:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   372  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   373  #if IFXFFT_FFT_DMA_SUPPORT
	mov	d15,#0
.L439:
	j	.L14
.L15:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   375  #if IFXFFT_FFT_PIPELINED
	ld.d	e0,[a5]0
.L626:
	st.d	[a15]0,e0
.L627:
	lea	a5,[a5]8
.L628:
	lea	a15,[a15]8
.L629:
	add	d15,#1
.L14:
	mov	d0,#256
.L630:
	jlt.u	d15,d0,.L15
.L631:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   376      IfxFft_Fft_Job *inputJob = fft->job[0];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   377  
	ret
.L220:
	
__IfxFft_Fft_initWindow_function_end:
	.size	IfxFft_Fft_initWindow,__IfxFft_Fft_initWindow_function_end-IfxFft_Fft_initWindow
.L129:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_isrInput',code,cluster('IfxFft_Fft_isrInput')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_isrInput'
	.align	2
	
	.global	IfxFft_Fft_isrInput

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   378      if (fft->inputIdx == 0)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   379      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   380          if (inputJob != NULL_PTR)
; Function IfxFft_Fft_isrInput
.L71:
IfxFft_Fft_isrInput:	.type	func
	mov.aa	a15,a4
.L441:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   381          {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   382              IfxFft_Fft_startJob(inputJob);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   383          }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   384      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   385      else
	ld.a	a4,[a15]64
.L440:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   386      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   387          if (fft->flags & IFXFFT_FFT_FLAG_DONE)
	ld.w	d15,[a15]48
.L538:
	jne	d15,#0,.L16
.L539:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   388          {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   389              fft->flags  = 0;
	jz.a	a4,.L17
.L540:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   390              IfxFft_Fft_unloadOutput(fft->job[1]);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   391              fft->job[1] = fft->job[1]->nextJob;
	call	IfxFft_Fft_startJob
.L17:
	j	.L18
.L16:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   392          }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   393          else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   394          {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   395              if (fft->inputIdx > fft->intraIdx)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   396              {
	ld.w	d15,[a15]44
.L541:
	jz.t	d15:1,.L19
.L542:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   397                  fft->flags = IFXFFT_FFT_FLAG_INPUT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   398              }
	mov	d15,#0
.L543:
	st.w	[a15]44,d15
.L544:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   399          }
	ld.a	a4,[a15]68
.L442:
	call	IfxFft_Fft_unloadOutput
.L545:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   400      }
	ld.a	a2,[a15]68
.L546:
	ld.a	a2,[a2]24
.L547:
	st.a	[a15]68,a2
.L548:
	j	.L20
.L19:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   402      if (fft->inputIdx == IFXFFT_FFT_NUM_JOBS)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   403      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   404          __debug();
	ld.w	d15,[a15]48
.L549:
	ld.w	d0,[a15]52
.L550:
	jge.u	d0,d15,.L21
.L551:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   405      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   406  
	mov	d15,#1
.L552:
	st.w	[a15]44,d15
.L21:
.L20:
.L18:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   407      fft->inputIdx++;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   408  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   409  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   410  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   411  }
	ld.w	d15,[a15]48
.L553:
	mov	d0,#8
.L554:
	jne	d15,d0,.L22
.L555:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   412  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   413  
	debug
.L22:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   414  void IfxFft_Fft_isrOutput(IfxFft_Fft *fft)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   415  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   416  #if IFXFFT_FFT_PIPELINED
	ld.w	d15,[a15]48
.L556:
	add	d15,#1
	st.w	[a15]48,d15
.L557:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   417      IfxFft_Fft_Job *outputJob = fft->job[1];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   418  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   419      if (outputJob != NULL_PTR)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   420      {
	ret
.L200:
	
__IfxFft_Fft_isrInput_function_end:
	.size	IfxFft_Fft_isrInput,__IfxFft_Fft_isrInput_function_end-IfxFft_Fft_isrInput
.L104:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_isrOutput',code,cluster('IfxFft_Fft_isrOutput')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_isrOutput'
	.align	2
	
	.global	IfxFft_Fft_isrOutput

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   421          if (outputJob->nextJob != NULL_PTR)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   422          {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   423              IfxFft_Fft_Job *inputJob = fft->job[0];
; Function IfxFft_Fft_isrOutput
.L73:
IfxFft_Fft_isrOutput:	.type	func
	mov.aa	a15,a4
.L444:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   424  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   425              if (inputJob != NULL_PTR)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   426              {
	ld.a	a12,[a15]68
.L445:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   427                  IfxFft_Fft_startJob(inputJob);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   428              }
	jz.a	a12,.L23
.L562:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   429              else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   430              {
	ld.w	d15,[a12]24
.L563:
	jeq	d15,#0,.L24
.L207:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   431                  if (fft->flags & IFXFFT_FFT_FLAG_DONE)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   432                  {
	ld.a	a4,[a15]64
.L443:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   433                      fft->flags  = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   434                      IfxFft_Fft_unloadOutput(outputJob);
	jz.a	a4,.L25
.L564:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   435                      fft->job[1] = outputJob->nextJob;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   436                  }
	call	IfxFft_Fft_startJob
.L446:
	j	.L26
.L25:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   437                  else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   438                  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   439                      fft->flags = IFXFFT_FFT_FLAG_INPUT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   440                  }
	ld.w	d15,[a15]44
.L565:
	jz.t	d15:1,.L27
.L566:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   441              }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   442          }
	mov	d15,#0
.L567:
	st.w	[a15]44,d15
.L568:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   443          else
	mov.aa	a4,a12
.L447:
	call	IfxFft_Fft_unloadOutput
.L448:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   444          {
	ld.a	a2,[a12]24
.L569:
	st.a	[a15]68,a2
.L570:
	j	.L28
.L27:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   445              if (fft->flags & IFXFFT_FFT_FLAG_DONE)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   446              {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   447                  fft->flags  = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   448                  IfxFft_Fft_unloadOutput(outputJob);
	mov	d15,#1
.L571:
	st.w	[a15]44,d15
.L28:
.L26:
	j	.L29
.L24:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   449                  fft->job[1] = outputJob->nextJob;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   450              }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   451              else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   452              {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   453                  fft->flags = IFXFFT_FFT_FLAG_INPUT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   454              }
	ld.w	d15,[a15]44
.L572:
	jz.t	d15:1,.L30
.L573:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   455          }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   456      }
	mov	d15,#0
.L574:
	st.w	[a15]44,d15
.L575:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   457  
	mov.aa	a4,a12
.L449:
	call	IfxFft_Fft_unloadOutput
.L450:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   458  #else
	ld.a	a2,[a12]24
.L576:
	st.a	[a15]68,a2
.L577:
	j	.L31
.L30:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   459      IfxFft_Fft_Job *outputJob = fft->job[0];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   460  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   461  #if !IFXFFT_FFT_DMA_SUPPORT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   462      IfxFft_Fft_unloadOutput(outputJob);
	mov	d15,#1
.L578:
	st.w	[a15]44,d15
.L31:
.L29:
.L23:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   463  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   464  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   465      if (outputJob->nextJob != NULL_PTR)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   466      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   467          boolean result = IfxFft_Fft_startJob(outputJob->nextJob);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   468          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, result);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   469      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   470      else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   471      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   472          fft->job[0] = NULL_PTR;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   473      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   474  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   475  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   476  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   477  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   478  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   479  IFX_STATIC void IfxFft_Fft_loadInput(IfxFft_Fft_Job *job)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   480  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   481  #if IFXFFT_FFT_DMA_SUPPORT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   482  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   483  #if !IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   484      IfxDma_Dma_Channel *dmaInput = &job->fft->inputDmaChannel;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   485      Ifx_DMA            *dmaSFR   = dmaInput->dma;
	ret
.L204:
	
__IfxFft_Fft_isrOutput_function_end:
	.size	IfxFft_Fft_isrOutput,__IfxFft_Fft_isrOutput_function_end-IfxFft_Fft_isrOutput
.L109:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_loadInput',code,cluster('IfxFft_Fft_loadInput')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_loadInput'
	.align	2
	

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   486  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   487      Ifx_DMA            *dmaSFR   = (&MODULE_DMA);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   488  #endif
; Function IfxFft_Fft_loadInput
.L75:
IfxFft_Fft_loadInput:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   489  #if IFXFFT_FFT_HW_EXEC
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   490  #if IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   491      IfxDma_setChannelSourceAddress(dmaSFR, IFXFFT_FFT_DMAINPUTCHANNELID_OPT, job->inputPtr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   492      IfxDma_setChannelTransferCount(dmaSFR, IFXFFT_FFT_DMAINPUTCHANNELID_OPT, job->count64.input);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   493      IfxDma_startChannelTransaction(dmaSFR, IFXFFT_FFT_DMAINPUTCHANNELID_OPT);
	ld.a	a15,[a4]
.L811:
	lea	a15,[a15]8
.L452:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   494  #else
	ld.a	a2,[a15]
.L454:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   495      IfxDma_setChannelSourceAddress(dmaSFR, IFXFFT_FFT_DMAINPUTCHANNELID, job->inputPtr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   496      IfxDma_setChannelTransferCount(dmaSFR, IFXFFT_FFT_DMAINPUTCHANNELID, job->count64.input);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   497      IfxDma_startChannelTransaction(dmaSFR, IFXFFT_FFT_DMAINPUTCHANNELID);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   498  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   499  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   500  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   501      sint16        i;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   502      const uint64 *input64 = job->inputPtr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   503  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   504      for (i = 0; i < job->count64.input; i++)
	ld.b	d15,[a15]4
.L812:
	ld.a	a5,[a4]8
.L378:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1548  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1549  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1550  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1551  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1553  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1554  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1555  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1556  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1557  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1558      return dma->TSR[channelId].B.CH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1559  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1560  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1561  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1562  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1563  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1564      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1565  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1566  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1567  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1568  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1569  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1570      dma->TSR[channelId].B.RST = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1571  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1572  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1573  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1574  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1575  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1576      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1577  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1579  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1580  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1581  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1582      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1583  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1585  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1586  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1587  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1588      dma->CH[channelId].DADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1589  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1590  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1591  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1592  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1593  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1594      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1595      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1596      adicr.B.DMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1597      adicr.B.INCD               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1598      adicr.B.CBLD               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1600  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1601  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1602  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1604  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1605      dma->TSR[channelId].B.HLTREQ = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1606  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1608  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1609  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1610  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1611      dma->CH[channelId].CHCSR.B.SIT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1612  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1613  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1614  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1615  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1616  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1617      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1618  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1619  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1620  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1621  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1622  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1623      dma->CH[channelId].ADICR.B.SHCT = shadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1624  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1625  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1626  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1627  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1628  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1629      dma->CH[channelId].CHCFGR.B.CHMODE = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1630  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1631  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1632  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1633  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1634  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1635      dma->CH[channelId].CHCFGR.B.RROAT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1636  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1637  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1638  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1639  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1640  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1641      dma->CH[channelId].CHCFGR.B.RROAT = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1642  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1643  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1645  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1646  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1647      dma->CH[channelId].SADR.U = (uint32)address;
	mul	d15,d15,#32
	addsc.a	a6,a2,d15,#0
.L813:
	mov.d	d15,a5
.L814:
	st.w	[a6]8200,d15
.L379:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   505  
	ld.b	d0,[a15]4
.L815:
	ld.hu	d1,[a4]16
.L387:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1548  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1549  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1550  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1551  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1553  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1554  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1555  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1556  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1557  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1558      return dma->TSR[channelId].B.CH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1559  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1560  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1561  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1562  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1563  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1564      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1565  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1566  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1567  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1568  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1569  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1570      dma->TSR[channelId].B.RST = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1571  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1572  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1573  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1574  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1575  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1576      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1577  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1579  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1580  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1581  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1582      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1583  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1585  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1586  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1587  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1588      dma->CH[channelId].DADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1589  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1590  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1591  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1592  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1593  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1594      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1595      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1596      adicr.B.DMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1597      adicr.B.INCD               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1598      adicr.B.CBLD               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1600  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1601  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1602  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1604  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1605      dma->TSR[channelId].B.HLTREQ = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1606  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1608  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1609  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1610  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1611      dma->CH[channelId].CHCSR.B.SIT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1612  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1613  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1614  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1615  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1616  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1617      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1618  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1619  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1620  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1621  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1622  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1623      dma->CH[channelId].ADICR.B.SHCT = shadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1624  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1625  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1626  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1627  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1628  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1629      dma->CH[channelId].CHCFGR.B.CHMODE = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1630  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1631  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1632  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1633  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1634  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1635      dma->CH[channelId].CHCFGR.B.RROAT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1636  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1637  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1638  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1639  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1640  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1641      dma->CH[channelId].CHCFGR.B.RROAT = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1642  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1643  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1645  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1646  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1647      dma->CH[channelId].SADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1648  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1649  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1651  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1653      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1654      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1655      adicr.B.SMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1656      adicr.B.INCS               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1657      adicr.B.CBLS               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1658      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1659  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1660  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1661  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1662  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1663  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1664      dma->SUSENR[channelId].B.SUSEN = enable;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1665  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1666  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1668  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1669  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1670      dma->CH[channelId].CHCFGR.B.TREL = transferCount;
	mul	d15,d0,#32
	addsc.a	a4,a2,d15,#0
.L451:
	mul	d15,d0,#32
	addsc.a	a5,a2,d15,#0
.L816:
	ld.hu	d15,[a5]8212
.L817:
	insert	d15,d15,d1,#0,#14
	st.h	[a4]8212,d15
.L388:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   506      }
	ld.b	d0,[a15]4
.L392:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1536  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1537  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1538  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1539  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1540      return dma->TIME.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1541  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1543  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1544  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1545  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1546      return dma->TSR[channelId].B.RST == 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1547  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1548  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1549  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1550  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1551  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1552      return dma->TSR[channelId].B.HTRE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1553  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1554  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1555  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1556  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1557  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1558      return dma->TSR[channelId].B.CH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1559  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1560  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1561  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1562  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1563  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1564      dma->CH[channelId].CHCSR.U = 0U << IFX_DMA_CH_CHCSR_FROZEN_OFF;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1565  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1566  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1567  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1568  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1569  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1570      dma->TSR[channelId].B.RST = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1571  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1572  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1573  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1574  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1575  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1576      dma->CH[channelId].CHCFGR.B.BLKM = blockMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1577  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1579  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1580  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1581  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1582      dma->CH[channelId].CHCFGR.B.CHMODE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1583  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1585  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1586  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1587  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1588      dma->CH[channelId].DADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1589  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1590  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1591  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1592  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1593  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1594      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1595      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1596      adicr.B.DMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1597      adicr.B.INCD               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1598      adicr.B.CBLD               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1599      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1600  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1601  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1602  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1603  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1604  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1605      dma->TSR[channelId].B.HLTREQ = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1606  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1608  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1609  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1610  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1611      dma->CH[channelId].CHCSR.B.SIT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1612  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1613  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1614  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1615  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1616  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1617      dma->CH[channelId].CHCFGR.B.CHDW = moveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1618  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1619  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1620  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1621  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1622  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1623      dma->CH[channelId].ADICR.B.SHCT = shadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1624  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1625  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1626  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1627  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1628  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1629      dma->CH[channelId].CHCFGR.B.CHMODE = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1630  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1631  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1632  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1633  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1634  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1635      dma->CH[channelId].CHCFGR.B.RROAT = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1636  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1637  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1638  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1639  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1640  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1641      dma->CH[channelId].CHCFGR.B.RROAT = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1642  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1643  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1645  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1646  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1647      dma->CH[channelId].SADR.U = (uint32)address;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1648  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1649  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1651  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1653      Ifx_DMA_CH_ADICR adicr;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1654      adicr.U                    = dma->CH[channelId].ADICR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1655      adicr.B.SMF                = incStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1656      adicr.B.INCS               = direction;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1657      adicr.B.CBLS               = size;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1658      dma->CH[channelId].ADICR.U = adicr.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1659  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1660  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1661  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1662  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1663  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1664      dma->SUSENR[channelId].B.SUSEN = enable;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1665  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1666  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1668  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1669  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1670      dma->CH[channelId].CHCFGR.B.TREL = transferCount;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1671  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1672  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1674  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1675  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1676      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1677      IfxScuWdt_clearCpuEndinit(passwd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1678      dma->CLC.B.EDIS = mode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1679      IfxScuWdt_setCpuEndinit(passwd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1680  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1682  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1683  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1684  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1685      dma->CH[channelId].CHCSR.B.SCH = 1;
	mul	d15,d0,#32
	addsc.a	a15,a2,d15,#0
.L453:
	mul	d15,d0,#32
	addsc.a	a2,a2,d15,#0
.L455:
	ld.bu	d15,[a2]8223
.L818:
	or	d15,#128
	st.b	[a15]8223,d15
.L393:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   507      for ( ; i < job->count64.expect; i++)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   508      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   509          IFXFFT_FFT_DATA_TRANSFER = (uint64)0ULL;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   510      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   511  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   512  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   513  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   514  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   515  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   516  void IfxFft_Fft_modifyDataPointers(IfxFft_Fft_Job *job, const void *inputPtr, void *outputPtr)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   517  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   518      job->inputPtr  = inputPtr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   519      job->outputPtr = outputPtr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   520  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   521  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   522  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   523  boolean IfxFft_Fft_startJob(IfxFft_Fft_Job *job)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   524  {
	ret
.L373:
	
__IfxFft_Fft_loadInput_function_end:
	.size	IfxFft_Fft_loadInput,__IfxFft_Fft_loadInput_function_end-IfxFft_Fft_loadInput
.L164:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_modifyDataPointers',code,cluster('IfxFft_Fft_modifyDataPointers')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_modifyDataPointers'
	.align	2
	
	.global	IfxFft_Fft_modifyDataPointers

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   525      IfxFft_Fft *fft    = job->fft;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   526  #if !IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   527      Ifx_FFT    *fftSFR = fft->fft;
; Function IfxFft_Fft_modifyDataPointers
.L77:
IfxFft_Fft_modifyDataPointers:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   528  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   529      Ifx_FFT    *fftSFR = (&MODULE_FFT);
	st.a	[a4]8,a5
.L636:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   530  #endif
	st.a	[a4]12,a6
.L637:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   531      boolean     result = IfxFft_isReadyForStart(fftSFR);
	ret
.L229:
	
__IfxFft_Fft_modifyDataPointers_function_end:
	.size	IfxFft_Fft_modifyDataPointers,__IfxFft_Fft_modifyDataPointers_function_end-IfxFft_Fft_modifyDataPointers
.L134:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_startJob',code,cluster('IfxFft_Fft_startJob')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_startJob'
	.align	2
	
	.global	IfxFft_Fft_startJob

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   532  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   533      if (result != FALSE)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   534      {
; Function IfxFft_Fft_startJob
.L79:
IfxFft_Fft_startJob:	.type	func
	mov.aa	a12,a4
.L457:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   535          IfxFft_Fft_triggerEngine(fftSFR, job->csr.U);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   536  #if IFXFFT_FFT_PIPELINED
	ld.a	a15,[a12]
.L458:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   537  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   538          if (fft->job[1] == NULL_PTR)
	ld.a	a2,[a15]
.L242:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     2   * \file IfxFft.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     3   * \brief FFT  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     4   * \ingroup IfxLld_Fft
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     7   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    44   * \defgroup IfxLld_Fft_Std_Enumerations Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    45   * \ingroup IfxLld_Fft_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    46   * \defgroup IfxLld_Fft_Std_UtilityFunctions Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    47   * \ingroup IfxLld_Fft_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    48   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    49  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    50  #ifndef IFXFFT_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    51  #define IFXFFT_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    52  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    53  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    54  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    55  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    56  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    57  #include "_Impl/IfxFft_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    58  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    59  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    60  #include "IfxFft_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    61  #include "IfxLmu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    62  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    63  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    64  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    65  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    67  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    68  /** \addtogroup IfxLld_Fft_Std_Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    69   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    70  /** \brief Input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    71   * Definition in Ifx_FFT.CSR.B.IN.FMT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    72   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    73  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    74  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    75      IfxFft_Input_complexSInt32 = 0,  /**< \brief 1 complex 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    76      IfxFft_Input_realSInt32    = 1,  /**< \brief 2 real 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    77      IfxFft_Input_complexSInt16 = 2,  /**< \brief 2 complex 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    78      IfxFft_Input_realSInt16    = 3   /**< \brief 4 real 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    79  } IfxFft_Input;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    81  /** \brief Length of transform. Log base 2 of the required transform size.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    82   * Length must be between 3 (transform of 8) and 11 (transform of 2048).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    83   * Definition in Ifx_FFT.CSR.B.LENGTH
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    84   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    85  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    86  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    87      IfxFft_Length_8    = 3,  /**< \brief transform of 8 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    88      IfxFft_Length_16   = 4,  /**< \brief transform of 16 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    89      IfxFft_Length_32   = 5,  /**< \brief transform of 32 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    90      IfxFft_Length_64   = 6,  /**< \brief transform of 64 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    91      IfxFft_Length_128  = 7,  /**< \brief transform of 128 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    92      IfxFft_Length_256  = 8,  /**< \brief transform of 256 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    93      IfxFft_Length_512  = 9,  /**< \brief transform of 512 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    94      IfxFft_Length_1024 = 10  /**< \brief transform of 1024 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    95  } IfxFft_Length;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    96  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    97  /** \brief Operation (FFT / IFFT)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    98   * Definition in Ifx_FFT.CSR.B.IFFT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    99   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   100  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   101  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   102      IfxFft_Operation_fft  = 0, /**< \brief perform FFT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   103      IfxFft_Operation_ifft = 1  /**< \brief perform IFFT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   104  } IfxFft_Operation;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   105  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   106  /** \brief Output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   107   * Definition in Ifx_FFT.CSR.B.OUT.FMT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   108   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   109  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   110  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   111      IfxFft_Output_complexSInt32 = 0,  /**< \brief 1 complex 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   112      IfxFft_Output_complexSInt16 = 1   /**< \brief 2 complex 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   113  } IfxFft_Output;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   114  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   115  /** \brief OCDS Suspend Control (OCDS.SUS)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   116   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   117  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   118  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   119      IfxFft_SuspendMode_none = 0,  /**< \brief No suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   120      IfxFft_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   121      IfxFft_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   122  } IfxFft_SuspendMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   124  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   125  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   126  /** \addtogroup IfxLld_Fft_Std_UtilityFunctions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   127   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   128  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   129  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   131  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   133  /** \brief Disables the FFT module and also the LMU interface
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   134   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   135   * \param lmu pointer to LMU registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   136   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   137   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   138  IFX_INLINE void IfxFft_disableModule(Ifx_FFT *fft, Ifx_LMU *lmu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   139  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   140  /** \brief Enables the FFT module and also the LMU interface
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   141   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   142   * \param lmu pointer to LMU registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   143   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   144   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   145  IFX_INLINE void IfxFft_enableModule(Ifx_FFT *fft, Ifx_LMU *lmu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   146  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   147  /** \brief Returns the input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   148   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   149   * \return Input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   151  IFX_INLINE IfxFft_Input IfxFft_getInputFormat(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   152  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   153  /** \brief Returns the length of the transform (length code, 3 to 10)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   154   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   155   * \return Length of the transform (length code)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   156   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   157  IFX_INLINE IfxFft_Length IfxFft_getLength(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   158  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   159  /** \brief Converts the given input length into the transform length code, to write into Ifx_FFT.CSR.B.LENGTH
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   160   * \param length Input length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   161   * \return Length of the transform (code, 3 to 10)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   162   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   163  IFX_INLINE IfxFft_Length IfxFft_getLengthCode(uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   164  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   165  /** \brief Retruns the actual length of the transform from the length code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   166   * \param length Length of transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   167   * \return Actual length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   168   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   169  IFX_INLINE uint16 IfxFft_getLengthFromCode(IfxFft_Length length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   170  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   171  /** \brief Returns the output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   172   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   173   * \return Output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   175  IFX_INLINE IfxFft_Output IfxFft_getOutputFormat(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   177  /** \brief Returns the status of FFT DONE request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   178   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   179   * \return Status of FFT DONE request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   180   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   181  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerDone(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   183  /** \brief Returns the status of FFT RFS request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   184   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   185   * \return Status of FFT RFS request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   186   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   187  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerRfs(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   188  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   189  /** \brief Returns the actual length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   190   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   191   * \return Actual length of the transform ()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   192   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   193  IFX_INLINE uint16 IfxFft_getTransformLength(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   194  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   195  /** \brief Returns the status of whether the FFT Engine is Idle or has at least one transform in operation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   196   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   197   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   198   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   199  IFX_INLINE boolean IfxFft_isEngineBusy(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   200  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   201  /** \brief Returns the status of whether the module is enabled or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   202   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   203   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   204   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   205  IFX_INLINE boolean IfxFft_isModuleEnabled(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   206  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   207  /** \brief Returns the module's suspend state.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   208   * TRUE :if module is suspended.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   209   * FALSE:if module is not yet suspended.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   210   * \param fft Pointer to FFT module registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   211   * \return Suspend status (TRUE / FALSE)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   212   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   213  IFX_INLINE boolean IfxFft_isModuleSuspended(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   214  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   215  /** \brief Returns the status of whether the module can accept a START operation or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   216   * \param fft Pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   217   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   219  IFX_INLINE boolean IfxFft_isReadyForStart(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   221  /** \brief Configure the Module to Hard/Soft suspend mode.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   222   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   223   * \param fft Pointer to FFT module registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   224   * \param mode Module suspend mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   227  IFX_INLINE void IfxFft_setSuspendMode(Ifx_FFT *fft, IfxFft_SuspendMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   229  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   230  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   232  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   233  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   235  IFX_INLINE void IfxFft_disableModule(Ifx_FFT *fft, Ifx_LMU *lmu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   236  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   237      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   238      IfxScuWdt_clearCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   239      // FFT clock disable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   240      fft->CLC.B.DISR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   241      IfxScuWdt_setCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   242  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   243  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   245  IFX_INLINE void IfxFft_enableModule(Ifx_FFT *fft, Ifx_LMU *lmu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   246  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   247      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   248      IfxScuWdt_clearCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   249      // FFT clock enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   250      fft->CLC.U = 0x0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   251      IfxScuWdt_setCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   252  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   255  IFX_INLINE IfxFft_Input IfxFft_getInputFormat(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   256  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   257      return (IfxFft_Input)fft->CSR.B.IN_FMT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   258  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   259  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   260  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   261  IFX_INLINE IfxFft_Length IfxFft_getLength(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   262  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   263      return (IfxFft_Length)fft->CSR.B.LENGTH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   264  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   265  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   266  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   267  IFX_INLINE IfxFft_Length IfxFft_getLengthCode(uint16 length)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   268  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   269      return (IfxFft_Length)(31 - __clz((uint32)length));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   270  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   272  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   273  IFX_INLINE uint16 IfxFft_getLengthFromCode(IfxFft_Length length)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   274  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   275      return 1 << (uint32)length;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   276  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   277  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   278  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   279  IFX_INLINE IfxFft_Output IfxFft_getOutputFormat(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   280  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   281      return (IfxFft_Output)fft->CSR.B.OUT_FMT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   282  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   283  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   284  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   285  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerDone(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   286  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   287      // only a single FFT available, therefore no check for the fft pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   288      return &MODULE_SRC.FFT.FFT[0].DONE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   289  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   290  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   291  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   292  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerRfs(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   293  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   294      // only a single FFT available, therefore no check for the fft pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   295      return &MODULE_SRC.FFT.FFT[0].RFS;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   296  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   297  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   299  IFX_INLINE uint16 IfxFft_getTransformLength(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   300  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   301      return 1U << fft->CSR.B.LENGTH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   302  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   303  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   305  IFX_INLINE boolean IfxFft_isEngineBusy(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   306  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   307      return fft->CSR.B.BUSY != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   308  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   310  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   311  IFX_INLINE boolean IfxFft_isModuleEnabled(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   312  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   313      return fft->CLC.B.DISS == 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   314  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   315  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   316  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   317  IFX_INLINE boolean IfxFft_isModuleSuspended(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   318  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   319      Ifx_FFT_OCS ocs;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   321      // read the status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   322      ocs.U = fft->OCS.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   323  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   324      // return the status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   325      return ocs.B.SUSSTA;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   326  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   328  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   329  IFX_INLINE boolean IfxFft_isReadyForStart(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   330  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   331      return fft->CSR.B.RFS != 0;
	ld.w	d15,[a2]64
	extr.u	d15,d15,#20,#1
.L642:
	ne	d8,d15,#0
.L643:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   331      return fft->CSR.B.RFS != 0;      (inlined)
	j	.L32

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   332  }      (inlined)
.L32:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   539  Idx = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   540              fft->intraIdx = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   541              fft->job[1]   = job;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   542              fft->flags    = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   543          }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   544  
	jeq	d8,#0,.L33
.L644:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   545  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   546          IfxFft_Fft_loadInput(job);
	ld.w	d15,[a12]4
.L247:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	     2   * \file IfxFft_Fft.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	     3   * \brief FFT FFT details
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	     4   * \ingroup IfxLld_Fft
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	     7   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    44   * \defgroup IfxLld_Fft_Fft_Usage How to use the FFT driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    45   * \ingroup IfxLld_Fft
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    46   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    47   * The FFT interface driver provides a default FFT configuration for calculating forward and inverse FFTs of lengths 8 to 1024 (powers of 2 only) of real or complex input operands.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    48   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    49   * In the following sections it will be described, how to integrate the driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    50   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    51   * \section IfxLld_Fft_Fft_Preparation Preparation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    52   * \subsection IfxLld_Fft_Fft_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    54   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    55   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    56   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    57   *     #include <Fft/Fft/IfxFft_Fft.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    58   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    59   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    60   * \subsection IfxLld_Fft_Fft_Variables Variables
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    62   * Declare the FFT handle, FFT job handle and the input output locations as global variables in your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    63   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    64   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    65   *     // FFT window length
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    66   *     #define FFT_LENGTH 512
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    67   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    68   *     // source waveform (must be 256bit aligned!)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    69   *     __attribute__ ((aligned(256))) sint32 fftIn[FFT_LENGTH] = {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    70   *     #include "sinewave.inc"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    71   *     };
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    73   *     // FFT result (must be 256bit aligned!)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    74   *     __attribute__ ((aligned(256))) sint32 fftOut[FFT_LENGTH*2];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    75   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    76   *     // used globally
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    77   *     IfxFft_Fft fft;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    78   *     IfxFft_Fft_Job fftJob;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    80   *     volatile uint32 fftInterruptCounter;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    81   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    82   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    83   * \subsection IfxLld_Fft_Fft_Interrupt Interrupt Handler Installation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    84   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    85   * See also \ref IfxLld_Cpu_Irq_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    87   * Define priorities for the Interrrupt handlers. This is normally done in the Ifx_IntPrioDef.h file:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    88   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    89   *     // priorities are normally defined in Ifx_IntPrioDef.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    90   *     #define ISR_PRIORITY_FFT_OUTPUT 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    91   *     #define ISR_PRIORITY_FFT_INPUT  2
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    92   *     #define ISR_PRIORITY_FFT_INTRA  3
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    93   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    94   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    95   * Add the interrupt service routines to your C code. They have to call the FFT interrupt handlers by passing the fftJob handle:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    96   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    97   *     IFX_INTERRUPT(ISR_Fft_intra, 0, ISR_PRIORITY_FFT_INTRA)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    98   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	    99   *         IfxFft_Fft_isrIntra(&fft);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   100   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   102   *     IFX_INTERRUPT(ISR_Fft_input, 0, ISR_PRIORITY_FFT_INPUT)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   103   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   104   *         IfxFft_Fft_isrInput(&fft);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   105   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   106   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   107   *     IFX_INTERRUPT(ISR_Fft_output, 0, ISR_PRIORITY_FFT_output)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   109   *         ++fftInterruptCounter;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   110   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   111   *         IfxFft_Fft_isrOutput(&fft);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   113   *         // do the next transform:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   114   *         while (IfxFft_Fft_startJob(&fftJob) == FALSE) {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   115   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   116   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   117   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   118   * Finally install the interrupt handlers in your initialisation function:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   119   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   120   *     // install interrupt handlers
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   121   *     IfxCpu_Irq_installInterruptHandler(&ISR_Fft_input, ISR_PRIORITY_FFT_INPUT);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   122   *     IfxCpu_Irq_installInterruptHandler(&ISR_Fft_output, ISR_PRIORITY_FFT_OUTPUT);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   123   *     IfxCpu_enableInterrupts();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   124   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   125   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   126   * \subsection IfxLld_Fft_Fft_InitModule Module Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   127   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   128   * The module initialisation can be done in the same function. Here an example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   129   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   130   *     // create module config
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   131   *     IfxFft_Fft_Config fftConfig;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   132   *     IfxFft_Fft_initModuleConfig(&fftConfig, &MODULE_FFT, &MODULE_LMU);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   133   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   134   *     // configure interrupts
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   135   *     fftConfig.inputPriority = ISR_PRIORITY_FFT_INPUT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   136   *     fftConfig.intraPriority = ISR_PRIORITY_FFT_INTRA;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   137   *     fftConfig.outputPriority = ISR_PRIORITY_FFT_OUTPUT;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   138   *     fftConfig.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   139   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   140   *     // use DMA channels for input/output transfers
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   141   *     fftConfig.inputDmaChannelId = IfxDma_ChannelId_4;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   142   *     fftConfig.outputDmaChannelId = IfxDma_ChannelId_5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   143   *     fftConfig.discardDmaChannelId = IfxDma_ChannelId_6;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   144   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   145   *     // initialize module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   146   *     // IfxFft_Fft fft; // defined globally
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   147   *     IfxFft_Fft_initModule(&fft, &fftConfig);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   148   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   149   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   150   * \subsection IfxLld_Fft_Fft_InitJob Job Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   151   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   152   * The FFT job initialisation can also be done in the same function. Here an example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   153   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   154   *     // create FFT job config
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   155   *     IfxFft_Fft_JobConfig fftJobConfig;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   156   *     IfxFft_Fft_initJobConfig(&fftJobConfig, &fft);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   157   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   158   *     // customize job
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   159   *     fftJobConfig.fftLength = IfxFft_Length_512;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   160   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   161   *     fftJobConfig.inputFormat = IfxFft_Input_realSInt32;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   162   *     fftJobConfig.inputPtr = (void *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)fftIn);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   163   *     fftJobConfig.inputLength = FFT_LENGTH;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   165   *     fftJobConfig.outputFormat = IfxFft_Output_complexSInt32;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   166   *     fftJobConfig.outputPtr = (void *)IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), (uint32)fftOut);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   167   *     fftJobConfig.outputLength = FFT_LENGTH;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   168   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   169   *     // initialize FFT job
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   170   *     // IfxFft_Fft_Job fftJob; // defined globally
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   171   *     IfxFft_Fft_initJob(&fftJob, &fftJobConfig);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   174   * The FFT is ready for use now!
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   175   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   176   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   177   * \section IfxLld_Fft_Fft_TransformFunctions Transform Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   178   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   179   * The FFT driver provides simple function to perform the transforms.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   180   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   181   * This means: you only have to start the FFT job with pre configured job handle and the transform will be done automatically by the FFT engine and an interrupt will be raised, indicating the end of treansform(DONE).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   182   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   183   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   184   *     // start job until return TRUE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   185   *     while (IfxFft_Fft_startJob(&fftJob) == FALSE) {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   186   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   187   *     // wait for 3 interrupts
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   188   *     while( fftInterruptCounter < 3 );
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   189   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   190   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   191   * \defgroup IfxLld_Fft_Fft FFT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   192   * \ingroup IfxLld_Fft
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   193   * \defgroup IfxLld_Fft_Fft_DataStructures Data Structures
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   194   * \ingroup IfxLld_Fft_Fft
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   195   * \defgroup IfxLld_Fft_Fft_ModuleFunctions Module Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   196   * \ingroup IfxLld_Fft_Fft
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   197   * \defgroup IfxLld_Fft_Fft_InterruptFunctions Interrupt Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   198   * \ingroup IfxLld_Fft_Fft
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   199   * \defgroup IfxLld_Fft_Fft_TransformFuntions Transform Funtions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   200   * \ingroup IfxLld_Fft_Fft
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   201   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   203  #ifndef IFXFFT_FFT_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   204  #define IFXFFT_FFT_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   205  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   206  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   207  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   208  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   209  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   210  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   211  #include "IfxFft_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   212  #include "Fft/Std/IfxFft.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   213  #include "Dma/Dma/IfxDma_Dma.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   214  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   215  #include "Cpu/Std/IfxCpu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   216  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   217  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   218  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   219  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   220  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   221  #define IFXFFT_FFT_FLAG_INPUT (1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   222  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   223  #define IFXFFT_FFT_FLAG_DONE  (2)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   224  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   225  #define IFXFFT_FFT_HW_EXEC    (1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   226  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   227  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   228  /*------------------------------Type Definitions------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   229  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   230  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   231  typedef struct IfxFft_Fft_Job_s IfxFft_Fft_Job;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   232  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   233  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   234  /*-----------------------------Data Structures--------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   235  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   236  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   237  /** \addtogroup IfxLld_Fft_Fft_DataStructures
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   238   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   239  /** \brief Module handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   240   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   241  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   242  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   243      Ifx_FFT           *fft;                     /**< \brief Pointer to FFT registers. Used when (IFXFFT_FFT_OPTIMIZED == 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   244      Ifx_LMU           *lmu;                     /**< \brief Pointer to LMU registers.Used when (IFXFFT_FFT_OPTIMIZED == 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   245      IfxDma_Dma_Channel inputDmaChannel;         /**< \brief Input DMA channel. Used when (IFXFFT_FFT_DMA_SUPPORT != 0) && (IFXFFT_FFT_OPTIMIZED == 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   246      IfxDma_Dma_Channel outputDmaChannel;        /**< \brief Output DMA channel.Used when (IFXFFT_FFT_DMA_SUPPORT != 0) && (IFXFFT_FFT_OPTIMIZED == 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   247      IfxDma_Dma_Channel discardDmaChannel;       /**< \brief Discard DMA channel. Used when (IFXFFT_FFT_DMA_SUPPORT != 0) && (IFXFFT_FFT_OPTIMIZED == 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   248      uint32             flags;                   /**< \brief Driver flags. Used when (IFXFFT_FFT_DMA_SUPPORT != 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   249      uint32             inputIdx;                /**< \brief Input interrupt index. Used when (IFXFFT_FFT_DMA_SUPPORT != 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   250      uint32             intraIdx;                /**< \brief Intra interrupt index. Used when (IFXFFT_FFT_DMA_SUPPORT != 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   251      Ifx_SRC_SRCR_Bits  srcrOutDis;              /**< \brief Cache of discard DMA channel. Used when (IFXFFT_FFT_DMA_SUPPORT != 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   252      Ifx_SRC_SRCR_Bits  srcrOutEnd;              /**< \brief Cache of end of output DMA channel. Used when (IFXFFT_FFT_DMA_SUPPORT != 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   253      IfxFft_Fft_Job    *job[2];                  /**< \brief FFT job handle */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   254  } IfxFft_Fft;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   255  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   256  /** \brief Structure for counters
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   257   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   258  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   259  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   260      uint16 input;        /**< \brief Input count */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   261      uint16 expect;       /**< \brief Padding */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   262      uint16 output;       /**< \brief Output count */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   263      uint16 result;       /**< \brief Discard */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   264  } IfxFft_Fft_Count64;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   266  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   267  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   268  /** \addtogroup IfxLld_Fft_Fft_DataStructures
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   269   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   270  /** \brief Configuration structure of the module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   272  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   273  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   274      Ifx_FFT         *fft;                       /**< \brief Pointer to FFT registers.Used when (IFXFFT_FFT_OPTIMIZED == 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   275      Ifx_LMU         *lmu;                       /**< \brief Pointer to LMU registers.Used when (IFXFFT_FFT_OPTIMIZED == 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   276      Ifx_Priority     inputPriority;             /**< \brief "input loading finished" interrupt priority */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   277      Ifx_Priority     intraPriority;             /**< \brief "intra transfer" interrupt priority */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   278      Ifx_Priority     outputPriority;            /**< \brief "output unloading finished" interrupt priority */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   279      IfxSrc_Tos       typeOfService;             /**< \brief Type of interrupt service */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   280      IfxDma_ChannelId inputDmaChannelId;         /**< \brief Input DMA channel.Used when (IFXFFT_FFT_DMA_SUPPORT != 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   281      IfxDma_ChannelId outputDmaChannelId;        /**< \brief Output DMA channel.Used when (IFXFFT_FFT_DMA_SUPPORT != 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   282      IfxDma_ChannelId discardDmaChannelId;       /**< \brief DMA channel for discarding unused samples.  Used when (IFXFFT_FFT_DMA_SUPPORT != 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   283  } IfxFft_Fft_Config;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   284  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   285  /** \brief Configuration structure for the FFT job
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   286   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   287  typedef struct
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   288  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   289      IfxFft_Fft      *fft;                     /**< \brief Pointer To FFT.Used when (IFXFFT_FFT_OPTIMIZED == 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   290      uint16           inputLength;             /**< \brief Length of the input */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   291      uint16           outputLength;            /**< \brief Length of the output */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   292      IfxFft_Length    fftLength;               /**< \brief Length of the transform */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   293      IfxFft_Input     inputFormat;             /**< \brief Input format */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   294      IfxFft_Output    outputFormat;            /**< \brief Output format */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   295      IfxFft_Operation operation;               /**< \brief Operation (FFT / IFFT) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   296      boolean          useWindowFunction;       /**< \brief Selection to use window function */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   297      IFX_CONST void  *inputPtr;                /**< \brief Pointer to input data */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   298      void            *outputPtr;               /**< \brief Pointer to output data */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   299  } IfxFft_Fft_JobConfig;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   300  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   301  /** \brief FFT job handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   302   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   303  struct IfxFft_Fft_Job_s
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   304  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   305      IfxFft_Fft        *fft;             /**< \brief Pointer to FFT registers. Used when (IFXFFT_FFT_OPTIMIZED == 0) */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   306      Ifx_FFT_CSR        csr;             /**< \brief FFT.CSR register duplicate */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   307      IFX_CONST void    *inputPtr;        /**< \brief Input pointer */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   308      void              *outputPtr;       /**< \brief Output pointer */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   309      IfxFft_Fft_Count64 count64;         /**< \brief Counters */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   310      IfxFft_Fft_Job    *nextJob;         /**< \brief Pointer to the next job */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   311  };
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   312  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   313  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   314  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   315  /** \addtogroup IfxLld_Fft_Fft_ModuleFunctions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   316   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   317  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   318  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   319  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   320  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   322  /** \brief Initialises the module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   323   * \param fft Module handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   324   * \param config Configuration structure of the module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   325   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   326   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   327   * A coding example can be found in \ref IfxLld_Fft_Fft_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   329   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   330  IFX_EXTERN void IfxFft_Fft_initModule(IfxFft_Fft *fft, const IfxFft_Fft_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   331  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   332  /** \brief Fills the config structure with default values
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   333   * \param config Configuration structure of the module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   334   * \param fft Pointer to FFT registers
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   335   * \param lmu Pointer to LMU registers
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   336   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   337   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   338   * A coding example can be found in \ref IfxLld_Fft_Fft_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   339   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   340   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   341  IFX_EXTERN void IfxFft_Fft_initModuleConfig(IfxFft_Fft_Config *config, Ifx_FFT *fft, Ifx_LMU *lmu);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   342  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   343  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   344  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   345  /** \addtogroup IfxLld_Fft_Fft_InterruptFunctions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   346   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   347  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   348  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   349  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   350  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   351  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   352  /** \brief ISR input routine
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   353   * \param fft Module handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   354   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   355   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   356  IFX_EXTERN void IfxFft_Fft_isrInput(IfxFft_Fft *fft);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   358  /** \brief ISR output routine
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   359   * \param fft Module handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   360   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   361   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   362  IFX_EXTERN void IfxFft_Fft_isrOutput(IfxFft_Fft *fft);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   363  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   364  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   365  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   366  /** \addtogroup IfxLld_Fft_Fft_TransformFuntions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   367   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   368  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   369  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   370  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   371  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   372  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   373  /** \brief Clones and links the jobs
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   374   * \param originalJob Current (original)FFT job handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   375   * \param newJob Modified (new) FFT job handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   376   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   377   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   378  IFX_EXTERN void IfxFft_Fft_cloneAndLinkJobs(IfxFft_Fft_Job *originalJob, IfxFft_Fft_Job *newJob);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   379  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   380  /** \brief Initialises the FFT job
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   381   * \param job FFT job handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   382   * \param jobConfig Configuration structure for the FFT job
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   383   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   384   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   385   * A coding example can be found in \ref IfxLld_Fft_Fft_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   386   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   387   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   388  IFX_EXTERN void IfxFft_Fft_initJob(IfxFft_Fft_Job *job, const IfxFft_Fft_JobConfig *jobConfig);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   389  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   390  /** \brief Fills the job configuration structure with default values
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   391   * \param config Configuration structure for the FFT job
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   392   * \param fft Module handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   393   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   394   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   395   * A coding example can be found in \ref IfxLld_Fft_Fft_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   396   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   397   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   398  IFX_EXTERN void IfxFft_Fft_initJobConfig(IfxFft_Fft_JobConfig *config, IfxFft_Fft *fft);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   399  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   400  /** \brief Initialises the window transfer
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   401   * \param fft Module handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   402   * \param windowData Window data
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   403   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   404   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   405  IFX_EXTERN void IfxFft_Fft_initWindow(IfxFft_Fft *fft, const uint64 *windowData);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   406  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   407  /** \brief Updates the input and output pointers in the FFT job handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   408   * \param job FFT job handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   409   * \param inputPtr Input pointer
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   410   * \param outputPtr Output pointer
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   411   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   412   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   413  IFX_EXTERN void IfxFft_Fft_modifyDataPointers(IfxFft_Fft_Job *job, const void *inputPtr, void *outputPtr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   414  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   415  /** \brief Starts the FFT job
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   416   * \param job FFT job handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   417   * \return Module's ready for start (RFS) status (true / false)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   419   * A coding example can be found in \ref IfxLld_Fft_Fft_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   420   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   421   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   422  IFX_EXTERN boolean IfxFft_Fft_startJob(IfxFft_Fft_Job *job);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   423  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   424  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   425  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   426  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   427  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   428  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   429  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   430  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   431   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   433  IFX_INLINE void IfxFft_Fft_triggerEngine(Ifx_FFT *fft, uint32 csr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   435  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   436  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   437  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   438  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   439  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   440   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   441   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   442  IFX_EXTERN void IfxFft_Fft_isrIntra(IfxFft_Fft *fft);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   443  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   444  /** \brief Initialization of DMA
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   445   * \param fft fft Module handle
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   446   * \param config pointing to config strucuture of fft
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   447   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   448   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   449  IFX_EXTERN void IfxFft_Fft_initDma(IfxFft_Fft *fft, const IfxFft_Fft_Config *config);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   450  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   451  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   452  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   453  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   454  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   455  IFX_INLINE void IfxFft_Fft_triggerEngine(Ifx_FFT *fft, uint32 csr)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   456  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   457  #if IFXFFT_FFT_HW_EXEC
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.h	   458      fft->CSR.U = csr | (IFX_FFT_CSR_START_MSK << IFX_FFT_CSR_START_OFF);
	or	d15,#1
.L645:
	st.w	[a2]64,d15
.L248:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   547  FFT_FFT_PIPELINED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   548          fft->job[0] = job->nextJob;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   549  #else
	ld.w	d15,[a15]68
.L646:
	jne	d15,#0,.L34
.L647:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   550          fft->job[0] = job;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   551  #endif
	mov	d15,#0
.L648:
	st.w	[a15]48,d15
.L649:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   552      }
	mov	d15,#0
.L650:
	st.w	[a15]52,d15
.L651:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   553  
	st.a	[a15]68,a12
.L652:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   554      return result;
	mov	d15,#0
.L653:
	st.w	[a15]44,d15
.L34:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   555  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   556  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   557  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   558  IFX_STATIC void IfxFft_Fft_calcCounters(IfxFft_Fft_Job *job, const IfxFft_Fft_JobConfig *jobConfig)
	mov.aa	a4,a12
	call	IfxFft_Fft_loadInput
.L456:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   559  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   560      uint16 shift;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   561  
	ld.a	a2,[a12]24
.L654:
	st.a	[a15]64,a2
.L33:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   562      /* input counters */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   563      if (jobConfig->inputFormat == IfxFft_Input_complexSInt32)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   564      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   565          shift = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   566      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   567      else if (jobConfig->inputFormat == IfxFft_Input_realSInt16)
	mov	d2,d8
	j	.L35

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   568      {
.L35:
	ret
.L236:
	
__IfxFft_Fft_startJob_function_end:
	.size	IfxFft_Fft_startJob,__IfxFft_Fft_startJob_function_end-IfxFft_Fft_startJob
.L139:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_calcCounters',code,cluster('IfxFft_Fft_calcCounters')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_calcCounters'
	.align	2
	

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   569          shift = 2;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   570      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   571      else
; Function IfxFft_Fft_calcCounters
.L81:
IfxFft_Fft_calcCounters:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   572      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   573          shift = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   574      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   575  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   576      uint16 fftLength = IfxFft_getLengthFromCode(jobConfig->fftLength);
	ld.bu	d15,[a5]9
.L823:
	jne	d15,#0,.L36
.L824:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   577  #if IFXFFT_FFT_DMA_SUPPORT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   578      job->count64.input  = (jobConfig->inputLength >> shift) / IFXFFT_FFT_MOVE_DIV;
	mov	d1,#0
.L459:
	j	.L37
.L36:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   579      job->count64.expect = (fftLength >> shift) / IFXFFT_FFT_MOVE_DIV;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   580  #else
	ld.bu	d15,[a5]9
.L825:
	jne	d15,#3,.L38
.L826:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   581      job->count64.input  = jobConfig->inputLength >> shift;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   582      job->count64.expect = fftLength >> shift;
	mov	d1,#2
.L460:
	j	.L39
.L38:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   583  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   584      /* output counters */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   585      shift               = (jobConfig->outputFormat == IfxFft_Output_complexSInt32) ? 0 : 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   586  #if IFXFFT_FFT_DMA_SUPPORT
	mov	d1,#1
.L39:
.L37:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   587      job->count64.result = (fftLength >> shift) / IFXFFT_FFT_MOVE_DIV;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   588      job->count64.output = (jobConfig->outputLength >> shift) / IFXFFT_FFT_MOVE_DIV;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   589  #else
	ld.bu	d15,[a5]8
.L402:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     2   * \file IfxFft.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     3   * \brief FFT  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     4   * \ingroup IfxLld_Fft
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     7   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    44   * \defgroup IfxLld_Fft_Std_Enumerations Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    45   * \ingroup IfxLld_Fft_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    46   * \defgroup IfxLld_Fft_Std_UtilityFunctions Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    47   * \ingroup IfxLld_Fft_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    48   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    49  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    50  #ifndef IFXFFT_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    51  #define IFXFFT_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    52  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    53  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    54  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    55  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    56  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    57  #include "_Impl/IfxFft_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    58  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    59  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    60  #include "IfxFft_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    61  #include "IfxLmu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    62  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    63  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    64  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    65  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    67  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    68  /** \addtogroup IfxLld_Fft_Std_Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    69   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    70  /** \brief Input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    71   * Definition in Ifx_FFT.CSR.B.IN.FMT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    72   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    73  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    74  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    75      IfxFft_Input_complexSInt32 = 0,  /**< \brief 1 complex 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    76      IfxFft_Input_realSInt32    = 1,  /**< \brief 2 real 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    77      IfxFft_Input_complexSInt16 = 2,  /**< \brief 2 complex 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    78      IfxFft_Input_realSInt16    = 3   /**< \brief 4 real 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    79  } IfxFft_Input;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    81  /** \brief Length of transform. Log base 2 of the required transform size.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    82   * Length must be between 3 (transform of 8) and 11 (transform of 2048).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    83   * Definition in Ifx_FFT.CSR.B.LENGTH
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    84   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    85  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    86  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    87      IfxFft_Length_8    = 3,  /**< \brief transform of 8 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    88      IfxFft_Length_16   = 4,  /**< \brief transform of 16 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    89      IfxFft_Length_32   = 5,  /**< \brief transform of 32 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    90      IfxFft_Length_64   = 6,  /**< \brief transform of 64 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    91      IfxFft_Length_128  = 7,  /**< \brief transform of 128 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    92      IfxFft_Length_256  = 8,  /**< \brief transform of 256 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    93      IfxFft_Length_512  = 9,  /**< \brief transform of 512 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    94      IfxFft_Length_1024 = 10  /**< \brief transform of 1024 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    95  } IfxFft_Length;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    96  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    97  /** \brief Operation (FFT / IFFT)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    98   * Definition in Ifx_FFT.CSR.B.IFFT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    99   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   100  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   101  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   102      IfxFft_Operation_fft  = 0, /**< \brief perform FFT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   103      IfxFft_Operation_ifft = 1  /**< \brief perform IFFT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   104  } IfxFft_Operation;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   105  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   106  /** \brief Output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   107   * Definition in Ifx_FFT.CSR.B.OUT.FMT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   108   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   109  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   110  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   111      IfxFft_Output_complexSInt32 = 0,  /**< \brief 1 complex 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   112      IfxFft_Output_complexSInt16 = 1   /**< \brief 2 complex 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   113  } IfxFft_Output;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   114  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   115  /** \brief OCDS Suspend Control (OCDS.SUS)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   116   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   117  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   118  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   119      IfxFft_SuspendMode_none = 0,  /**< \brief No suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   120      IfxFft_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   121      IfxFft_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   122  } IfxFft_SuspendMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   124  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   125  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   126  /** \addtogroup IfxLld_Fft_Std_UtilityFunctions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   127   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   128  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   129  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   131  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   133  /** \brief Disables the FFT module and also the LMU interface
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   134   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   135   * \param lmu pointer to LMU registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   136   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   137   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   138  IFX_INLINE void IfxFft_disableModule(Ifx_FFT *fft, Ifx_LMU *lmu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   139  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   140  /** \brief Enables the FFT module and also the LMU interface
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   141   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   142   * \param lmu pointer to LMU registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   143   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   144   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   145  IFX_INLINE void IfxFft_enableModule(Ifx_FFT *fft, Ifx_LMU *lmu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   146  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   147  /** \brief Returns the input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   148   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   149   * \return Input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   151  IFX_INLINE IfxFft_Input IfxFft_getInputFormat(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   152  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   153  /** \brief Returns the length of the transform (length code, 3 to 10)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   154   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   155   * \return Length of the transform (length code)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   156   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   157  IFX_INLINE IfxFft_Length IfxFft_getLength(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   158  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   159  /** \brief Converts the given input length into the transform length code, to write into Ifx_FFT.CSR.B.LENGTH
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   160   * \param length Input length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   161   * \return Length of the transform (code, 3 to 10)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   162   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   163  IFX_INLINE IfxFft_Length IfxFft_getLengthCode(uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   164  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   165  /** \brief Retruns the actual length of the transform from the length code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   166   * \param length Length of transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   167   * \return Actual length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   168   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   169  IFX_INLINE uint16 IfxFft_getLengthFromCode(IfxFft_Length length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   170  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   171  /** \brief Returns the output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   172   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   173   * \return Output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   175  IFX_INLINE IfxFft_Output IfxFft_getOutputFormat(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   177  /** \brief Returns the status of FFT DONE request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   178   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   179   * \return Status of FFT DONE request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   180   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   181  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerDone(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   183  /** \brief Returns the status of FFT RFS request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   184   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   185   * \return Status of FFT RFS request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   186   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   187  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerRfs(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   188  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   189  /** \brief Returns the actual length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   190   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   191   * \return Actual length of the transform ()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   192   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   193  IFX_INLINE uint16 IfxFft_getTransformLength(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   194  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   195  /** \brief Returns the status of whether the FFT Engine is Idle or has at least one transform in operation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   196   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   197   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   198   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   199  IFX_INLINE boolean IfxFft_isEngineBusy(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   200  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   201  /** \brief Returns the status of whether the module is enabled or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   202   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   203   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   204   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   205  IFX_INLINE boolean IfxFft_isModuleEnabled(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   206  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   207  /** \brief Returns the module's suspend state.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   208   * TRUE :if module is suspended.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   209   * FALSE:if module is not yet suspended.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   210   * \param fft Pointer to FFT module registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   211   * \return Suspend status (TRUE / FALSE)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   212   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   213  IFX_INLINE boolean IfxFft_isModuleSuspended(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   214  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   215  /** \brief Returns the status of whether the module can accept a START operation or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   216   * \param fft Pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   217   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   219  IFX_INLINE boolean IfxFft_isReadyForStart(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   221  /** \brief Configure the Module to Hard/Soft suspend mode.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   222   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   223   * \param fft Pointer to FFT module registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   224   * \param mode Module suspend mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   227  IFX_INLINE void IfxFft_setSuspendMode(Ifx_FFT *fft, IfxFft_SuspendMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   229  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   230  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   232  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   233  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   235  IFX_INLINE void IfxFft_disableModule(Ifx_FFT *fft, Ifx_LMU *lmu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   236  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   237      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   238      IfxScuWdt_clearCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   239      // FFT clock disable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   240      fft->CLC.B.DISR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   241      IfxScuWdt_setCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   242  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   243  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   245  IFX_INLINE void IfxFft_enableModule(Ifx_FFT *fft, Ifx_LMU *lmu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   246  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   247      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   248      IfxScuWdt_clearCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   249      // FFT clock enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   250      fft->CLC.U = 0x0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   251      IfxScuWdt_setCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   252  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   255  IFX_INLINE IfxFft_Input IfxFft_getInputFormat(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   256  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   257      return (IfxFft_Input)fft->CSR.B.IN_FMT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   258  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   259  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   260  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   261  IFX_INLINE IfxFft_Length IfxFft_getLength(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   262  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   263      return (IfxFft_Length)fft->CSR.B.LENGTH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   264  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   265  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   266  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   267  IFX_INLINE IfxFft_Length IfxFft_getLengthCode(uint16 length)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   268  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   269      return (IfxFft_Length)(31 - __clz((uint32)length));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   270  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   272  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   273  IFX_INLINE uint16 IfxFft_getLengthFromCode(IfxFft_Length length)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   274  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   275      return 1 << (uint32)length;
	mov	d0,#1
.L827:
	sha	d0,d0,d15
	extr.u	d0,d0,#0,#16
.L828:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   275      return 1 << (uint32)length;      (inlined)
	j	.L40

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   276  }      (inlined)
.L40:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   590  t;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   591      job->count64.output = jobConfig->outputLength >> shift;
	ld.hu	d2,[a5]4
.L829:
	mov	d15,d1
.L462:
	rsub	d15,#0
.L461:
	sha	d2,d2,d15
.L830:
	ge	d15,d2,#0
.L463:
	caddn	d2,d15,#3
	sha	d2,#-2
.L831:
	st.h	[a4]16,d2
.L464:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   592  #endif
	rsub	d1,#0
	sha	d1,d0,d1
.L465:
	ge	d15,d1,#0
	caddn	d1,d15,#3
	sha	d1,#-2
.L832:
	st.h	[a4]18,d1
.L833:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   593  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   594  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   595  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   596  void IfxFft_Fft_isrIntra(IfxFft_Fft *fft)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   597  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   598  #if IFXFFT_FFT_DMA_SUPPORT
	ld.bu	d15,[a5]10
.L834:
	jne	d15,#0,.L41
.L835:
	mov	d1,#0
.L466:
	j	.L42
.L41:
	mov	d1,#1
.L42:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   599  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   600  # if IFXFFT_FFT_PIPELINED
	mov	d15,d1
	rsub	d15,#0
	sha	d0,d0,d15
.L836:
	ge	d15,d0,#0
	caddn	d0,d15,#3
	sha	d0,#-2
.L837:
	st.h	[a4]22,d0
.L838:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   601  
	ld.hu	d0,[a5]6
.L839:
	rsub	d1,#0
	sha	d0,d0,d1
.L840:
	ge	d15,d0,#0
	caddn	d0,d15,#3
	sha	d0,#-2
.L841:
	st.h	[a4]20,d0
.L842:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   602      if (fft->intraIdx == 0)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   603      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   604          fft->flags  = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   605          IfxFft_Fft_unloadOutput(fft->job[1]);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   606          fft->job[1] = fft->job[1]->nextJob;
	ret
.L396:
	
__IfxFft_Fft_calcCounters_function_end:
	.size	IfxFft_Fft_calcCounters,__IfxFft_Fft_calcCounters_function_end-IfxFft_Fft_calcCounters
.L169:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_isrIntra',code,cluster('IfxFft_Fft_isrIntra')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_isrIntra'
	.align	2
	
	.global	IfxFft_Fft_isrIntra

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   607      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   608      else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   609      {
; Function IfxFft_Fft_isrIntra
.L83:
IfxFft_Fft_isrIntra:	.type	func
	mov.aa	a15,a4
.L468:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   610          if (fft->flags & IFXFFT_FFT_FLAG_INPUT)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   611          {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   612              fft->flags  = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   613              IfxFft_Fft_unloadOutput(fft->job[1]);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   614              fft->job[1] = fft->job[1]->nextJob;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   615          }
	ld.w	d15,[a15]52
.L659:
	jne	d15,#0,.L43
.L660:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   616          else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   617          {
	mov	d15,#0
.L661:
	st.w	[a15]44,d15
.L662:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   618              fft->flags = IFXFFT_FFT_FLAG_DONE;
	ld.a	a4,[a15]68
.L467:
	call	IfxFft_Fft_unloadOutput
.L663:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   619          }
	ld.a	a2,[a15]68
.L664:
	ld.a	a2,[a2]24
.L665:
	st.a	[a15]68,a2
.L666:
	j	.L44
.L43:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   620      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   621  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   622      fft->intraIdx++;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   623  # else
	ld.w	d15,[a15]44
.L667:
	jz.t	d15:0,.L45
.L668:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   624      IfxFft_Fft_unloadOutput(fft->job[0]);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   625  # endif
	mov	d15,#0
.L669:
	st.w	[a15]44,d15
.L670:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   626  #endif
	ld.a	a4,[a15]68
.L469:
	call	IfxFft_Fft_unloadOutput
.L671:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   627  }
	ld.a	a2,[a15]68
.L672:
	ld.a	a2,[a2]24
.L673:
	st.a	[a15]68,a2
.L674:
	j	.L46
.L45:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   628  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   629  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   630  void IfxFft_Fft_initDma(IfxFft_Fft *fft, const IfxFft_Fft_Config *config)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   631  {
	mov	d15,#2
.L675:
	st.w	[a15]44,d15
.L46:
.L44:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   632  #if IFXFFT_FFT_DMA_SUPPORT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   633  #if !IFXFFT_FFT_OPTIMIZED
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   634      Ifx_DMA                 *dmaSFR            = &MODULE_DMA;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   635      Ifx_FFT                 *fftSFR            = config->fft;
	ld.w	d15,[a15]52
.L676:
	add	d15,#1
	st.w	[a15]52,d15
.L677:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   636      IfxDma_Dma_Channel      *inputDmaChannel   = &fft->inputDmaChannel;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   637      IfxDma_Dma_Channel      *discardDmaChannel = &fft->discardDmaChannel;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   638      IfxDma_Dma_Channel      *outputDmaChannel  = &fft->outputDmaChannel;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   639  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   640      Ifx_FFT                 *fftSFR            = (&MODULE_FFT);
	ret
.L254:
	
__IfxFft_Fft_isrIntra_function_end:
	.size	IfxFft_Fft_isrIntra,__IfxFft_Fft_isrIntra_function_end-IfxFft_Fft_isrIntra
.L144:
	; End of function
	
	.sdecl	'.text.IfxFft_Fft.IfxFft_Fft_initDma',code,cluster('IfxFft_Fft_initDma')
	.sect	'.text.IfxFft_Fft.IfxFft_Fft_initDma'
	.align	2
	
	.global	IfxFft_Fft_initDma

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   641      Ifx_DMA                 *dmaSFR            = (&MODULE_DMA);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   642      IfxDma_Dma_Channel       dmaChannel;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   643      IfxDma_Dma_Channel      *inputDmaChannel   = &dmaChannel;
; Function IfxFft_Fft_initDma
.L85:
IfxFft_Fft_initDma:	.type	func
	sub.a	a10,#72
.L470:
	mov.aa	a12,a4
.L473:
	st.a	[a10]60,a5
.L474:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   644      IfxDma_Dma_Channel      *discardDmaChannel = &dmaChannel;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   645      IfxDma_Dma_Channel      *outputDmaChannel  = &dmaChannel;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   646  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   647  
	movh.a	a5,#61441
.L471:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   648      IfxDma_Dma               dma;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   649      IfxDma_Dma_createModuleHandle(&dma, dmaSFR);
	lea	a13,[a12]8
.L475:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   650  
	lea	a14,[a12]32
.L476:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   651      IfxDma_Dma_ChannelConfig dmaCfg;
	lea	a15,[a12]20
.L477:
	st.a	[a10]64,a15
.L479:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   652      IfxDma_Dma_initChannelConfig(&dmaCfg, &dma);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   653  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   654      dmaCfg.requestMode                     = IfxDma_ChannelRequestMode_completeTransactionPerRequest;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   655      dmaCfg.operationMode                   = IfxDma_ChannelOperationMode_continuous;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   656      dmaCfg.moveSize                        = IFXFFT_FFT_MOVE_SIZE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   657      dmaCfg.sourceAddressCircularRange      = IfxDma_ChannelIncrementCircular_none;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   658      dmaCfg.destinationAddressCircularRange = IfxDma_ChannelIncrementCircular_none;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   659  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   660      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   661          /* output channel */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   662          dmaCfg.channelId               = config->outputDmaChannelId;
	lea	a4,[a10]0
.L472:
	call	IfxDma_Dma_createModuleHandle
.L269:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   663          dmaCfg.hardwareRequestEnabled  = FALSE; // will be triggered via software
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   664          dmaCfg.channelInterruptEnabled = TRUE;  // trigger interrupt after transaction
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   665  
	lea	a4,[a10]4
.L682:
	lea	a5,[a10]0
	call	IfxDma_Dma_initChannelConfig
.L683:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   666          // source address is fixed; use circular mode to stay at this address for each move
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   667          dmaCfg.sourceAddress               = IFXFFT_DATA_SPACE;
	mov	d15,#1
.L684:
	st.b	[a10]33,d15
.L685:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   668          dmaCfg.sourceCircularBufferEnabled = TRUE;
	mov	d15,#1
.L686:
	st.b	[a10]34,d15
.L687:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   669  
	mov	d15,#5
.L688:
	st.b	[a10]35,d15
.L689:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   670          // destination address and transfer count will be configured during runtime
	mov	d15,#0
.L690:
	st.b	[a10]42,d15
.L691:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   671          dmaCfg.destinationAddress               = 0;
	mov	d15,#0
.L692:
	st.b	[a10]45,d15
.L693:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   672          dmaCfg.destinationCircularBufferEnabled = FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   673          dmaCfg.transferCount                    = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   674  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   675          IfxDma_Dma_initChannel(outputDmaChannel, &dmaCfg);
	ld.a	a15,[a10]60
.L478:
	ld.b	d15,[a15]16
.L694:
	st.b	[a10]8,d15
.L695:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   676      }
	mov	d15,#0
.L696:
	st.b	[a10]39,d15
.L697:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   677      {
	mov	d15,#1
.L698:
	st.b	[a10]52,d15
.L699:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   678          /* discard channel, reuse most configuration of output channel */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   679          dmaCfg.channelId              = config->discardDmaChannelId;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   680          dmaCfg.hardwareRequestEnabled = TRUE;  // will be triggered via output DMA channel
	movh	d15,#48640
.L700:
	st.w	[a10]10,d15
.L701:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   681          IfxDma_Dma_initChannel(discardDmaChannel, &dmaCfg);
	mov	d15,#1
.L702:
	st.b	[a10]47,d15
.L703:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   682      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   683      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   684          /* input channel */
	mov	d15,#0
.L704:
	st.w	[a10]14,d15
.L705:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   685          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->inputDmaChannelId != config->outputDmaChannelId);
	mov	d15,#0
.L706:
	st.b	[a10]48,d15
.L707:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   686          dmaCfg.channelId               = config->inputDmaChannelId;
	mov	d15,#0
.L708:
	st.h	[a10]30,d15
.L709:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   687          dmaCfg.hardwareRequestEnabled  = FALSE; // will be triggered via software
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   688  #if IFXFFT_FFT_PIPELINED
	lea	a5,[a10]4
	ld.a	a4,[a10]64
.L480:
	call	IfxDma_Dma_initChannel
.L481:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   689          dmaCfg.channelInterruptEnabled = TRUE;  // trigger interrupt after transaction
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   690  #else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   691          dmaCfg.channelInterruptEnabled = FALSE; // no interrupt at end of transaction
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   692  #endif
	ld.b	d15,[a15]17
.L710:
	st.b	[a10]8,d15
.L711:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   693          // source address and transfer count will be configured during runtime
	mov	d15,#1
.L712:
	st.b	[a10]39,d15
.L713:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   694          dmaCfg.sourceAddress               = 0;
	lea	a5,[a10]4
	mov.aa	a4,a14
.L482:
	call	IfxDma_Dma_initChannel
.L483:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   695          dmaCfg.sourceCircularBufferEnabled = FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   696          dmaCfg.transferCount               = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   697  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   698          // destination address is fixed; use circular mode to stay at this address for each move
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   699          dmaCfg.destinationAddress               = IFXFFT_DATA_SPACE;
	ld.b	d15,[a15]15
.L714:
	st.b	[a10]8,d15
.L715:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   700          dmaCfg.destinationCircularBufferEnabled = TRUE;
	mov	d15,#0
.L716:
	st.b	[a10]39,d15
.L717:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   701  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   702          IfxDma_Dma_initChannel(inputDmaChannel, &dmaCfg);
	mov	d15,#1
.L718:
	st.b	[a10]52,d15
.L719:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   703      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   704  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   705      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   706          volatile Ifx_SRC_SRCR *srcr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   707  #if IFXFFT_FFT_PIPELINED
	mov	d15,#0
.L720:
	st.w	[a10]10,d15
.L721:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   708          //Route DMA input SRC to CPU as ISR input
	mov	d15,#0
.L722:
	st.b	[a10]47,d15
.L723:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   709          srcr = IfxDma_getSrcPointer(dmaSFR, config->inputDmaChannelId);
	mov	d15,#0
.L724:
	st.h	[a10]30,d15
.L725:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   710          IfxSrc_init(srcr, config->typeOfService, config->inputPriority);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   711          IfxSrc_enable(srcr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   712  #endif
	movh	d15,#48640
.L726:
	st.w	[a10]14,d15
.L727:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   713          //Route FFT DONE SRC to CPU as ISR midjob
	mov	d15,#1
.L728:
	st.b	[a10]48,d15
.L729:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   714          srcr = IfxFft_getSrcPointerDone(fftSFR);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   715          IfxSrc_init(srcr, config->typeOfService, config->intraPriority);
	lea	a5,[a10]4
	mov.aa	a4,a13
.L484:
	call	IfxDma_Dma_initChannel
.L279:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   716          IfxSrc_enable(srcr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   717  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   718          //Route output DMA request to discard DMA
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   719          srcr = IfxDma_getSrcPointer(dmaSFR, config->outputDmaChannelId);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   720          IfxSrc_init(srcr, IfxSrc_Tos_dma, (Ifx_Priority)config->discardDmaChannelId);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   721          IfxSrc_enable(srcr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   722          fft->srcrOutDis = srcr->B;
	ld.b	d15,[a15]15
.L270:
	movh.a	a15,#61441
.L271:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);      (inlined)
	jz.a	a15,.L47
.L47:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	mul	d15,d15,#4
	mov.a	a15,d15
.L485:
	movh.a	a3,#61444
	add.a	a3,a15
	lea	a15,[a3]-31488
.L486:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];      (inlined)
	j	.L48

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }      (inlined)
.L48:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   723  srcr->B;
	ld.a	a2,[a10]60
.L488:
	ld.bu	d0,[a2]14
.L730:
	ld.hu	d15,[a2]8
.L290:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	ld.bu	d1,[a15]
.L731:
	extr.u	d15,d15,#0,#8
.L732:
	insert	d15,d1,d15,#0,#8
	st.b	[a15],d15
.L733:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   277      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L734:
	insert	d15,d15,d0,#3,#2
	st.b	[a15]1,d15
.L300:
	ld.bu	d15,[a15]3
.L735:
	or	d15,#2
	st.b	[a15]3,d15
.L291:
	ld.bu	d15,[a15]1
.L736:
	or	d15,#4
	st.b	[a15]1,d15
.L305:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     2   * \file IfxFft.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     3   * \brief FFT  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     4   * \ingroup IfxLld_Fft
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     7   * \copyright Copyright (c) 2017 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    44   * \defgroup IfxLld_Fft_Std_Enumerations Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    45   * \ingroup IfxLld_Fft_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    46   * \defgroup IfxLld_Fft_Std_UtilityFunctions Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    47   * \ingroup IfxLld_Fft_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    48   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    49  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    50  #ifndef IFXFFT_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    51  #define IFXFFT_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    52  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    53  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    54  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    55  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    56  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    57  #include "_Impl/IfxFft_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    58  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    59  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    60  #include "IfxFft_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    61  #include "IfxLmu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    62  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    63  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    64  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    65  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    67  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    68  /** \addtogroup IfxLld_Fft_Std_Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    69   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    70  /** \brief Input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    71   * Definition in Ifx_FFT.CSR.B.IN.FMT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    72   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    73  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    74  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    75      IfxFft_Input_complexSInt32 = 0,  /**< \brief 1 complex 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    76      IfxFft_Input_realSInt32    = 1,  /**< \brief 2 real 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    77      IfxFft_Input_complexSInt16 = 2,  /**< \brief 2 complex 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    78      IfxFft_Input_realSInt16    = 3   /**< \brief 4 real 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    79  } IfxFft_Input;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    81  /** \brief Length of transform. Log base 2 of the required transform size.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    82   * Length must be between 3 (transform of 8) and 11 (transform of 2048).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    83   * Definition in Ifx_FFT.CSR.B.LENGTH
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    84   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    85  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    86  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    87      IfxFft_Length_8    = 3,  /**< \brief transform of 8 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    88      IfxFft_Length_16   = 4,  /**< \brief transform of 16 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    89      IfxFft_Length_32   = 5,  /**< \brief transform of 32 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    90      IfxFft_Length_64   = 6,  /**< \brief transform of 64 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    91      IfxFft_Length_128  = 7,  /**< \brief transform of 128 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    92      IfxFft_Length_256  = 8,  /**< \brief transform of 256 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    93      IfxFft_Length_512  = 9,  /**< \brief transform of 512 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    94      IfxFft_Length_1024 = 10  /**< \brief transform of 1024 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    95  } IfxFft_Length;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    96  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    97  /** \brief Operation (FFT / IFFT)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    98   * Definition in Ifx_FFT.CSR.B.IFFT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	    99   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   100  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   101  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   102      IfxFft_Operation_fft  = 0, /**< \brief perform FFT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   103      IfxFft_Operation_ifft = 1  /**< \brief perform IFFT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   104  } IfxFft_Operation;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   105  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   106  /** \brief Output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   107   * Definition in Ifx_FFT.CSR.B.OUT.FMT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   108   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   109  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   110  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   111      IfxFft_Output_complexSInt32 = 0,  /**< \brief 1 complex 32-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   112      IfxFft_Output_complexSInt16 = 1   /**< \brief 2 complex 16-bit data per 64-bit word */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   113  } IfxFft_Output;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   114  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   115  /** \brief OCDS Suspend Control (OCDS.SUS)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   116   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   117  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   118  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   119      IfxFft_SuspendMode_none = 0,  /**< \brief No suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   120      IfxFft_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   121      IfxFft_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   122  } IfxFft_SuspendMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   124  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   125  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   126  /** \addtogroup IfxLld_Fft_Std_UtilityFunctions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   127   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   128  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   129  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   130  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   131  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   133  /** \brief Disables the FFT module and also the LMU interface
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   134   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   135   * \param lmu pointer to LMU registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   136   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   137   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   138  IFX_INLINE void IfxFft_disableModule(Ifx_FFT *fft, Ifx_LMU *lmu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   139  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   140  /** \brief Enables the FFT module and also the LMU interface
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   141   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   142   * \param lmu pointer to LMU registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   143   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   144   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   145  IFX_INLINE void IfxFft_enableModule(Ifx_FFT *fft, Ifx_LMU *lmu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   146  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   147  /** \brief Returns the input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   148   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   149   * \return Input format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   151  IFX_INLINE IfxFft_Input IfxFft_getInputFormat(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   152  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   153  /** \brief Returns the length of the transform (length code, 3 to 10)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   154   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   155   * \return Length of the transform (length code)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   156   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   157  IFX_INLINE IfxFft_Length IfxFft_getLength(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   158  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   159  /** \brief Converts the given input length into the transform length code, to write into Ifx_FFT.CSR.B.LENGTH
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   160   * \param length Input length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   161   * \return Length of the transform (code, 3 to 10)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   162   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   163  IFX_INLINE IfxFft_Length IfxFft_getLengthCode(uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   164  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   165  /** \brief Retruns the actual length of the transform from the length code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   166   * \param length Length of transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   167   * \return Actual length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   168   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   169  IFX_INLINE uint16 IfxFft_getLengthFromCode(IfxFft_Length length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   170  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   171  /** \brief Returns the output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   172   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   173   * \return Output format
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   175  IFX_INLINE IfxFft_Output IfxFft_getOutputFormat(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   177  /** \brief Returns the status of FFT DONE request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   178   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   179   * \return Status of FFT DONE request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   180   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   181  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerDone(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   183  /** \brief Returns the status of FFT RFS request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   184   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   185   * \return Status of FFT RFS request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   186   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   187  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerRfs(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   188  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   189  /** \brief Returns the actual length of the transform
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   190   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   191   * \return Actual length of the transform ()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   192   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   193  IFX_INLINE uint16 IfxFft_getTransformLength(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   194  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   195  /** \brief Returns the status of whether the FFT Engine is Idle or has at least one transform in operation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   196   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   197   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   198   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   199  IFX_INLINE boolean IfxFft_isEngineBusy(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   200  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   201  /** \brief Returns the status of whether the module is enabled or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   202   * \param fft pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   203   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   204   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   205  IFX_INLINE boolean IfxFft_isModuleEnabled(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   206  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   207  /** \brief Returns the module's suspend state.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   208   * TRUE :if module is suspended.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   209   * FALSE:if module is not yet suspended.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   210   * \param fft Pointer to FFT module registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   211   * \return Suspend status (TRUE / FALSE)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   212   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   213  IFX_INLINE boolean IfxFft_isModuleSuspended(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   214  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   215  /** \brief Returns the status of whether the module can accept a START operation or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   216   * \param fft Pointer to FFT registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   217   * \return (true / false)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   219  IFX_INLINE boolean IfxFft_isReadyForStart(Ifx_FFT *fft);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   221  /** \brief Configure the Module to Hard/Soft suspend mode.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   222   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   223   * \param fft Pointer to FFT module registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   224   * \param mode Module suspend mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   227  IFX_INLINE void IfxFft_setSuspendMode(Ifx_FFT *fft, IfxFft_SuspendMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   229  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   230  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   232  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   233  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   235  IFX_INLINE void IfxFft_disableModule(Ifx_FFT *fft, Ifx_LMU *lmu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   236  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   237      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   238      IfxScuWdt_clearCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   239      // FFT clock disable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   240      fft->CLC.B.DISR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   241      IfxScuWdt_setCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   242  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   243  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   245  IFX_INLINE void IfxFft_enableModule(Ifx_FFT *fft, Ifx_LMU *lmu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   246  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   247      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   248      IfxScuWdt_clearCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   249      // FFT clock enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   250      fft->CLC.U = 0x0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   251      IfxScuWdt_setCpuEndinit(password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   252  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   255  IFX_INLINE IfxFft_Input IfxFft_getInputFormat(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   256  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   257      return (IfxFft_Input)fft->CSR.B.IN_FMT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   258  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   259  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   260  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   261  IFX_INLINE IfxFft_Length IfxFft_getLength(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   262  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   263      return (IfxFft_Length)fft->CSR.B.LENGTH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   264  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   265  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   266  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   267  IFX_INLINE IfxFft_Length IfxFft_getLengthCode(uint16 length)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   268  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   269      return (IfxFft_Length)(31 - __clz((uint32)length));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   270  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   272  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   273  IFX_INLINE uint16 IfxFft_getLengthFromCode(IfxFft_Length length)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   274  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   275      return 1 << (uint32)length;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   276  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   277  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   278  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   279  IFX_INLINE IfxFft_Output IfxFft_getOutputFormat(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   280  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   281      return (IfxFft_Output)fft->CSR.B.OUT_FMT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   282  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   283  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   284  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   285  IFX_INLINE volatile Ifx_SRC_SRCR *IfxFft_getSrcPointerDone(Ifx_FFT *fft)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   286  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   287      // only a single FFT available, therefore no check for the fft pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   288      return &MODULE_SRC.FFT.FFT[0].DONE;
	movh.a	a15,#61444
	lea	a15,[a15]@los(0xf0038fc0)
.L737:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   288      return &MODULE_SRC.FFT.FFT[0].DONE;      (inlined)
	j	.L49

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Std\IfxFft.h	   289  }      (inlined)
.L49:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   724  srcr->B;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   725  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   726          //Route DMA discard interrupt to CPU as ISR output
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   727          srcr = IfxDma_getSrcPointer(dmaSFR, config->discardDmaChannelId);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   728          IfxSrc_init(srcr, config->typeOfService, config->outputPriority);
	ld.bu	d0,[a2]14
.L738:
	ld.hu	d15,[a2]10
.L313:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	ld.bu	d1,[a15]
.L739:
	extr.u	d15,d15,#0,#8
.L740:
	insert	d15,d1,d15,#0,#8
	st.b	[a15],d15
.L741:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   277      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L742:
	insert	d15,d15,d0,#3,#2
	st.b	[a15]1,d15
.L315:
	ld.bu	d15,[a15]3
.L743:
	or	d15,#2
	st.b	[a15]3,d15
.L314:
	ld.bu	d15,[a15]1
.L744:
	or	d15,#4
	st.b	[a15]1,d15
.L316:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   729  ty);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   730          IfxSrc_enable(srcr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   731          fft->srcrOutEnd = srcr->B;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   732      }
	ld.a	a15,[a10]60
.L487:
	ld.b	d15,[a15]16
.L272:
	movh.a	a15,#61441
.L273:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);      (inlined)
	jz.a	a15,.L50
.L50:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	mul	d15,d15,#4
	mov.a	a15,d15
.L489:
	movh.a	a3,#61444
	add.a	a3,a15
	lea	a15,[a3]-31488
.L490:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];      (inlined)
	j	.L51

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }      (inlined)
.L51:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   733  }
	mov	d0,#3
.L492:
	ld.b	d15,[a2]17
.L493:
	extr.u	d15,d15,#0,#16
.L317:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	ld.bu	d1,[a15]
.L745:
	extr.u	d15,d15,#0,#8
.L746:
	insert	d15,d1,d15,#0,#8
	st.b	[a15],d15
.L747:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   277      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L748:
	insert	d15,d15,d0,#3,#2
	st.b	[a15]1,d15
.L319:
	ld.bu	d15,[a15]3
.L749:
	or	d15,#2
	st.b	[a15]3,d15
.L318:
	ld.bu	d15,[a15]1
.L750:
	or	d15,#4
	st.b	[a15]1,d15
.L320:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   734  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   735  #endif
	ld.w	d15,[a15]
.L751:
	st.w	[a12]56,d15
.L752:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Fft\Fft\IfxFft_Fft.c	   736  }

	ld.a	a15,[a10]60
.L491:


	ld.b	d15,[a15]17
.L274:
	movh.a	a15,#61441
.L275:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);      (inlined)
	jz.a	a15,.L52
.L52:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     2   * \file IfxDma.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     3   * \brief DMA  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     4   * \ingroup IfxLld_Dma
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    44   * \defgroup IfxLld_Dma_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    45   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    46   * \defgroup IfxLld_Dma_Std_Reset Reset Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    47   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    48   * \defgroup IfxLld_Dma_Std_Channel_Transaction Channel Transaction Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    49   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    50   * \defgroup IfxLld_Dma_Std_Move_Engine Move Engine functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    51   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    52   * \defgroup IfxLld_Dma_Std_Channel_Configure Channel configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    53   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    54   * \defgroup IfxLld_Dma_Std_Channel_Halt Channel Halt Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    55   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    56   * \defgroup IfxLld_Dma_Std_Double_Buffer Double Buffer functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    57   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    58   * \defgroup IfxLld_Dma_Std_Interrupts Interrupt functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    59   * \ingroup IfxLld_Dma_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    60   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    62  #ifndef IFXDMA_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    63  #define IFXDMA_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    64  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    65  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    66  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    67  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    68  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    69  #include "_Impl/IfxDma_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    70  #include "IfxDma_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    72  #include "IfxDma_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    73  #include "Src/Std/IfxSrc.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    74  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    75  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    77  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    78  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    81  /** \addtogroup IfxLld_Dma_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    82   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    83  /** \brief Bus Master Mode definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    84   * Definition in Ifx_DMA.MODE[4].B.MODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    85   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    86  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    87  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    88      IfxDma_BusMasterMode_user       = 0, /**< \brief Selected hardware resource performs Bus access in user mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    89      IfxDma_BusMasterMode_supervisor = 1  /**< \brief Selected hardware resource performs Bus access in supervisor mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    90  } IfxDma_BusMasterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    91  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    92  /** \brief Channel Bus Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    93   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    94  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    95  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    96      IfxDma_ChannelBusPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    97      IfxDma_ChannelBusPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    98      IfxDma_ChannelBusPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	    99  } IfxDma_ChannelBusPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   101  /** \brief DMA circular buffer (wrap around) definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   102   * Definition in Ifx_DMA.CH[64].ADICR.B.CBLS and Ifx_DMA.CH[64].ADICR.B.CBLD
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   103   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   104  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   105  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   106      IfxDma_ChannelIncrementCircular_none  = 0,   /**< \brief no circular buffer operation */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   107      IfxDma_ChannelIncrementCircular_2     = 1,   /**< \brief circular buffer size is 2 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   108      IfxDma_ChannelIncrementCircular_4     = 2,   /**< \brief circular buffer size is 4 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   109      IfxDma_ChannelIncrementCircular_8     = 3,   /**< \brief circular buffer size is 8 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   110      IfxDma_ChannelIncrementCircular_16    = 4,   /**< \brief circular buffer size is 16 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   111      IfxDma_ChannelIncrementCircular_32    = 5,   /**< \brief circular buffer size is 32 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   112      IfxDma_ChannelIncrementCircular_64    = 6,   /**< \brief circular buffer size is 64 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   113      IfxDma_ChannelIncrementCircular_128   = 7,   /**< \brief circular buffer size is 128 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   114      IfxDma_ChannelIncrementCircular_256   = 8,   /**< \brief circular buffer size is 256 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   115      IfxDma_ChannelIncrementCircular_512   = 9,   /**< \brief circular buffer size is 512 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   116      IfxDma_ChannelIncrementCircular_1024  = 10,  /**< \brief circular buffer size is 1024 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   117      IfxDma_ChannelIncrementCircular_2048  = 11,  /**< \brief circular buffer size is 2048 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   118      IfxDma_ChannelIncrementCircular_4096  = 12,  /**< \brief circular buffer size is 4096 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   119      IfxDma_ChannelIncrementCircular_8192  = 13,  /**< \brief circular buffer size is 8192 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   120      IfxDma_ChannelIncrementCircular_16384 = 14,  /**< \brief circular buffer size is 16384 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   121      IfxDma_ChannelIncrementCircular_32768 = 15   /**< \brief circular buffer size is 32768 byte */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   122  } IfxDma_ChannelIncrementCircular;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   124  /** \brief DMA incrementation direction definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   125   * Definition in Ifx_DMA.CH[64].ADICR.B.INCS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   126   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   127  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   128  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   129      IfxDma_ChannelIncrementDirection_negative = 0,  /**< \brief pointer is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   130      IfxDma_ChannelIncrementDirection_positive = 1   /**< \brief pointer is incremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   131  } IfxDma_ChannelIncrementDirection;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   133  /** \brief DMA incrementation definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   134   * Definition in Ifx_DMA.CH[64].ADICR.B.SMF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   135   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   136  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   137  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   138      IfxDma_ChannelIncrementStep_1   = 0, /**< \brief increment by 1 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   139      IfxDma_ChannelIncrementStep_2   = 1, /**< \brief increment by 2 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   140      IfxDma_ChannelIncrementStep_4   = 2, /**< \brief increment by 4 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   141      IfxDma_ChannelIncrementStep_8   = 3, /**< \brief increment by 8 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   142      IfxDma_ChannelIncrementStep_16  = 4, /**< \brief increment by 16 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   143      IfxDma_ChannelIncrementStep_32  = 5, /**< \brief increment by 32 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   144      IfxDma_ChannelIncrementStep_64  = 6, /**< \brief increment by 64 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   145      IfxDma_ChannelIncrementStep_128 = 7  /**< \brief increment by 128 width */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   146  } IfxDma_ChannelIncrementStep;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   147  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   148  /** \brief Channel Transfer Interrupt generation mechanism.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   149   * Definition in Ifx_DMA.CH[64].ADICR.B.INTCT (bit 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   150   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   151  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   152  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   153      IfxDma_ChannelInterruptControl_thresholdLimitMatch      = 0, /**< \brief interrupt when transfer count (TCOUNT) equals the threshold limit (IRDV) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   154      IfxDma_ChannelInterruptControl_transferCountDecremented = 1  /**< \brief interrupt when transfer count (TCOUNT) is decremented */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   155  } IfxDma_ChannelInterruptControl;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   156  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   157  /** \brief DMA transfer definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   158   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.BLKM and Ifx_DMA.BLK1.ME.CHCR.B.BLKM
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   160  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   162      IfxDma_ChannelMove_1  = 0,  /**< \brief 1 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   163      IfxDma_ChannelMove_2  = 1,  /**< \brief 2 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   164      IfxDma_ChannelMove_4  = 2,  /**< \brief 4 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   165      IfxDma_ChannelMove_8  = 3,  /**< \brief 8 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   166      IfxDma_ChannelMove_16 = 4,  /**< \brief 16 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   167      IfxDma_ChannelMove_3  = 5,  /**< \brief 3 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   168      IfxDma_ChannelMove_5  = 6,  /**< \brief 5 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   169      IfxDma_ChannelMove_9  = 7   /**< \brief 9 DMA move per DMA transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   170  } IfxDma_ChannelMove;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   172  /** \brief DMA move size definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   173   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHDW and Ifx_DMA.BLK1.ME.CHCR.B.CHDW
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   175  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   176  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   177      IfxDma_ChannelMoveSize_8bit   = 0,  /**< \brief 1 DMA move is 8 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   178      IfxDma_ChannelMoveSize_16bit  = 1,  /**< \brief 1 DMA move is 16 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   179      IfxDma_ChannelMoveSize_32bit  = 2,  /**< \brief 1 DMA move is 32 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   180      IfxDma_ChannelMoveSize_64bit  = 3,  /**< \brief 1 DMA move is 64 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   181      IfxDma_ChannelMoveSize_128bit = 4,  /**< \brief 1 DMA move is 128 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   182      IfxDma_ChannelMoveSize_256bit = 5   /**< \brief 1 DMA move is 256 bit wide */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   183  } IfxDma_ChannelMoveSize;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   184  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   185  /** \brief DMA operation mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   186   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.CHMODE and Ifx_DMA.BLK1.ME.CHCR.B.CHMODE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   187   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   188  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   189  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   190      IfxDma_ChannelOperationMode_single     = 0, /**< \brief channel disabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   191      IfxDma_ChannelOperationMode_continuous = 1  /**< \brief channel stays enabled after transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   192  } IfxDma_ChannelOperationMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   193  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   194  /** \brief Pattern detection selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   195   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PATSEL and Ifx_DMA.BLK1.ME.CHCR.B.PATSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   196   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   197  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   198  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   199      IfxDma_ChannelPattern_0_disable = 0,  /**< \brief Pattern detect 0 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   200      IfxDma_ChannelPattern_0_mode1   = 1,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   201      IfxDma_ChannelPattern_0_mode2   = 2,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   202      IfxDma_ChannelPattern_0_mode3   = 3,  /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT0[0] masked by PAT0[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT0[1] masked by PAT0[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   203      IfxDma_ChannelPattern_1_disable = 4,  /**< \brief Pattern detect 1 disabled */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   204      IfxDma_ChannelPattern_1_mode1   = 5,  /**< \brief Compare match configuration 1 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   205      IfxDma_ChannelPattern_1_mode2   = 6,  /**< \brief Compare match configuration 2 : pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   206      IfxDma_ChannelPattern_1_mode3   = 7   /**< \brief Compare match configuration 3 : pattern compare of MExR.RD[0] to PAT1[0] masked by PAT1[2] of actual DMA read move and pattern compare of MExR.RD[0] to PAT1[1] masked by PAT1[3] of previous DMA read move */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   207  } IfxDma_ChannelPattern;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   209  /** \brief Channel Priority definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   211  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   212  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   213      IfxDma_ChannelPriority_low    = 0,  /**< \brief low priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   214      IfxDma_ChannelPriority_medium = 1,  /**< \brief medium priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   215      IfxDma_ChannelPriority_high   = 2   /**< \brief high priority */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   216  } IfxDma_ChannelPriority;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   217  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   218  /** \brief DMA request mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   219   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.RROAT and Ifx_DMA.BLK1.ME.CHCR.B.RROAT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   220   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   221  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   222  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   223      IfxDma_ChannelRequestMode_oneTransferPerRequest         = 0, /**< \brief a request initiates a single transfer */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   224      IfxDma_ChannelRequestMode_completeTransactionPerRequest = 1  /**< \brief a request initiates a complete transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   225  } IfxDma_ChannelRequestMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   226  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   227  /** \brief DMA request selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   228   * Definition in Ifx_DMA.BLK0.ME.CHCR.B.PRSEL and Ifx_DMA.BLK1.ME.CHCR.B.PRSEL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   229   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   230  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   231  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   232      IfxDma_ChannelRequestSource_peripheral = 0,  /**< \brief Transfer Request via Hardware Trigger */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   233      IfxDma_ChannelRequestSource_daisyChain = 1   /**< \brief Transfer Request via next (higher priority) channel */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   234  } IfxDma_ChannelRequestSource;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   235  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   236  /** \brief shadow definition definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   237   * Definition in Ifx_DMA.CH[64].ADICR.B.SHCT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   239  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   240  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   241      IfxDma_ChannelShadow_none                                 = 0,   /**< \brief shadow address register not used. Source and destination address register are written directly */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   242      IfxDma_ChannelShadow_src                                  = 1,   /**< \brief Shadow address register used for source address buffering. When writing to SADRmx, the address is buffered in SHADRmx and transferred to SADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   243      IfxDma_ChannelShadow_dst                                  = 2,   /**< \brief Shadow address register used for destination address buffering. When writing to DADRmx, the address is buffered in SHADRmx and transferred to DADRmx with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   244      IfxDma_ChannelShadow_srcDirectWrite                       = 5,   /**< \brief Shadow address used for source buffering. When writing to SADRz, the address is buffered in SHADRz and transferred to SADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   245      IfxDma_ChannelShadow_dstDirectWrite                       = 6,   /**< \brief Shadow address used for destination buffering. When writing to DADRz, the address is buffered in SHADRz and transferred to DADRz with the start of the next DMA transaction */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   246      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch        = 8,   /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   247      IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch      = 9,   /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   248      IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch   = 10,  /**< \brief Software switch only. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   249      IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch = 11,  /**< \brief Automatic Hardware and Software switch. Shadow address used for double buffering */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   250      IfxDma_ChannelShadow_linkedList                           = 12,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 8 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   251      IfxDma_ChannelShadow_accumulatedLinkedList                = 13,  /**< \brief The DMA controller reads a DMA channel transaction control set and overwrites 6 X words in the corresponding DMARAM channel z */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   252      IfxDma_ChannelShadow_safeLinkedList                       = 14,  /**< \brief The DMA controller reads a DMA channel transaction control set. The Linked List only proceeds with the next DMA transaction if the existing SDCRC checksum matches the expected SDCRC checksum in the loaded from the new DMA transaction control set */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   253      IfxDma_ChannelShadow_conditionalLinkedList                = 15   /**< \brief Shadow address register (MExSHADR) and source and destination address CRC register (MExSDCRC) are used as address pointers to a Linked List. The selection of the address pointer is determined by DMA channel pattern detection conditions */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   254  } IfxDma_ChannelShadow;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   256  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   258      IfxDma_HardwareResourcePartition_0 = 0,      /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   259      IfxDma_HardwareResourcePartition_1,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   260      IfxDma_HardwareResourcePartition_2,          /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   261      IfxDma_HardwareResourcePartition_3           /**< \brief "Set of DMA channels are associated with hardware resource partition " + str(x)  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   262  } IfxDma_HardwareResourcePartition;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   264  /** \brief DMA move engine definition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   265   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   266  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   267  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   268      IfxDma_MoveEngine_0 = 0,  /**< \brief first move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   269      IfxDma_MoveEngine_1 = 1   /**< \brief second move engine */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   270  } IfxDma_MoveEngine;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   272  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   273   * Definition in Ifx_DMA.CLC.B.EDIS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   275  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   276  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   277      IfxDma_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   278      IfxDma_SleepMode_disable = 1  /**< \brief disables sleep mode */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   279  } IfxDma_SleepMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   281  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   282  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   283  /** \addtogroup IfxLld_Dma_Std_Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   284   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   285  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   286  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   287  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   288  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   290  /** \brief Return the status of a DMA channel (reset / not reset)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   291   * This API needs to be used after the IfxDma_resetChannel()
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   292   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   293   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   294   * \return TRUE if the channel is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   295   * FALSE if the channel is not reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   296   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   297   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   298   *      // check whether the channel is reset or not and also the hardware trigger disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   299   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   300   *      if (IfxDma_isChannelReset(chn[0].dma, chn[0].channelId) &&
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   301   *              (!IfxDma_isChannelTransactionEnabled(chn[0].dma, chn[0].channelId))) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   302   *              // Dma is out of RESET and there is no hardware request enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   303   *              IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   304   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   305   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   306   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   308  IFX_INLINE boolean IfxDma_isChannelReset(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   310  /** \brief Reset the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   311   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   312   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   314   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   315   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   316   *      // Apply reset to the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   317   *      IfxDma_resetChannel(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   318   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   319   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   320   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   321  IFX_INLINE void IfxDma_resetChannel(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   322  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   323  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   324  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   325  /** \addtogroup IfxLld_Dma_Std_Channel_Transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   326   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   328  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   329  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   330  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   331  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   332  /** \brief Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   333   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   334   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   335   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   336   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   337   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   338   *      // Clear the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   339   *      IfxDma_clearChannelTransactionRequestLost(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   340   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   341   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   342   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   343  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   345  /** \brief Disable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   346   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   347   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   348   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   350   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   351   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   352   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   353  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   354  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   355  /** \brief Disable the generation of a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   356   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   357   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   358   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   360   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   361   *      // Disable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   362   *      IfxDma_disableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   363   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   364   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   366  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   368  /** \brief Enable a DMA channel hardware transaction request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   369   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   370   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   371   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   372   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   373   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   374   *      unsigned *src = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   375   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   376   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   377   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   378   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   379   *      // Do not restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   380   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   381   *      IfxDma_setChannelContinuousMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   382   *      IfxDma_setChannelContinuousMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   383   *      IfxDma_setChannelContinuousMode(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   384   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   385   *      // Check for end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   386   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   387   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   388   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   389   *      // Enable the hardware trigger for channel 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   390   *      IfxDma_enableChannelTransaction(chn[3].dma, chn[3].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   391   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   392   *      // Disable the hardware trigger for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   393   *      IfxDma_disableChannelTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   394   *      // Hardware triggers for second time
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   395   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   396   *      unsigned *SRc = (unsigned *)((unsigned)&SRC_DMACH0.U + 4*NUM_CHANNELS);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   397   *      for(int chn=0; chn<NUM_CHANNELS; ++chn, ++src) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   398   *              IfxSrc_setRequest(src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   399   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   400   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   401   *      // Restrict the hardware triggering to only one transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   402   *      IfxDma_setChannelSingleMode(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   403   *      IfxDma_setChannelSingleMode(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   404   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   405   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   407  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   409  /** \brief Enable the generation of  a channel transaction lost error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   410   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   411   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   412   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   413   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   414   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   415   *      // Enable the transaction request lost interrupt for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   416   *      IfxDma_enableChannelTransactionLostError(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   417   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   419   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   420  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   422  /** \brief Check the channel transaction request lost flag status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   423   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   424   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   425   * \return TRUE if the TRL is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   426   * FALSE if the TRL is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   427   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   428   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   429   *      boolean trlFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   430   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   431   *      // Check whether the channel transaction request lost flag is set or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   432   *      trlFlag = IfxDma_getChannelTransactionRequestLost(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   433   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   434   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   435   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   436  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   438  /** \brief Converts DMA circular range to circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   439   * \param range DMA circular range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   440   * \return DMA circular code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   441   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   442  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   444  /** \brief Return the hardware transaction request status of a DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   445   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   446   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   447   * \return TRUE if the hardware transaction request is enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   448   * FALSE if the hardware transaction request is disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   449   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   450   * A coding example can be found in \ref IfxDma_isChannelReset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   451   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   452   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   453  IFX_INLINE boolean IfxDma_isChannelTransactionEnabled(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   454  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   455  /** \brief Return the status of a DMA channel (transaction pending)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   456   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   457   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   458   * \return TRUE if a transaction request for the given channel is pending
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   459   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   460   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   461   *      // check for the channel request pending with the channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   462   *      if (IfxDma_isChannelTransactionPending(chn[0].dma, chn[0].channelId) == TRUE) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   463   *              // There is channel request pending for channel 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   464   *              result |= 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   465   *      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   466   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   467   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   469  IFX_INLINE boolean IfxDma_isChannelTransactionPending(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   471  /** \brief Sets the sensitivity of the module to sleep signal
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   472   * \param dma pointer to DMA registers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   473   * \param mode mode selection (enable/disable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   474   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   475   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   476  IFX_INLINE void IfxDma_setSleepMode(Ifx_DMA *dma, IfxDma_SleepMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   478  /** \brief Request a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   479   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   480   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   481   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   483   * A coding example can be found in \ref IfxDma_Dma_startChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   484   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   485   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   486  IFX_INLINE void IfxDma_startChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   487  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   488  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   490  /** \addtogroup IfxLld_Dma_Std_Move_Engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   491   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   493  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   494  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   495  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   497  /** \brief Clear the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   498   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   499   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   500   * \param mask value holds the bits to clear or mask
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   501   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   502   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   503   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   504   *      // Clear the status of the error flags (as defined in _Impl/IfxDma_cfg.h)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   505   *      IfxDma_clearErrorFlags(chn[0].dma,IfxDma_MoveEngine_1,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   506   *                                                  IFXDMA_ERROR_S |    // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   507   *                                                  IFXDMA_ERROR_D |    // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   508   *                                                  IFXDMA_ERROR_SPB |  // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   509   *                                                  IFXDMA_ERROR_SRI |  // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   510   *                                                  IFXDMA_ERROR_RAM |  // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   511   *                                                  IFXDMA_ERROR_SLL |  // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   512   *                                                  IFXDMA_ERROR_DLL);  // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   513   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   514   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   515   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   516  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   517  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   518  /** \brief Disable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   519   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   520   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   521   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   522   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   523   * A coding example can be found in \ref IfxDma_disableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   524   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   525   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   526  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   527  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   528  /** \brief Disable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   529   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   530   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   531   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   532   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   533   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   534   *      // Disable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   535   *      IfxDma_disableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   536   *      IfxDma_disableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   537   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   538   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   539   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   540  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   541  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   542  /** \brief Enable the generation of a Move engine destination error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   543   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   544   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   545   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   546   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   547   * A coding example can be found in \ref IfxDma_enableMoveEngineSourceError
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   548   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   549   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   550  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   551  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   552  /** \brief Enable the generation of a Move engine source error interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   553   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   554   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   555   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   556   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   557   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   558   *      // Enable the move engine source and destination move errors
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   559   *      IfxDma_enableMoveEngineSourceError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   560   *      IfxDma_enableMoveEngineDestinationError(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   561   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   562   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   563   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   564  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   565  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   566  /** \brief Return the DMA error status flags
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   567   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   568   * \param moveEngine pointer to the DMA move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   569   * \return the content of the DMA.ERRSR register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   570   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   571   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   572   *      uint32 errorFlags = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   573   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   574   *      // Get the status of the error flags of move engine
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   575   *      errorFlags = IfxDma_getErrorFlags(chn[0].dma,IfxDma_MoveEngine_1);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   576   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   577   *      if( errorFlags & IFXDMA_ERROR_S ) {   // move engine source error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   578   *              }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   579   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   580   *      if( errorFlags & IFXDMA_ERROR_D ) {   // move engine destination error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   581   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   582   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   583   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   584   *      if( errorFlags & IFXDMA_ERROR_SPB ) { // bus error on SPB
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   585   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   586   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   587   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   588   *      if( errorFlags & IFXDMA_ERROR_SRI ) { // bus error on SRI
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   589   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   590   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   591   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   592   *      if( errorFlags & IFXDMA_ERROR_RAM ) { // RAM error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   593   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   594   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   595   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   596   *      if( errorFlags & IFXDMA_ERROR_SLL ) { // safe linked list CRC checksum error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   597   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   598   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   600   *      if( errorFlags & IFXDMA_ERROR_DLL ) { // failed linked list load error
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   601   *           // ...
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   602   *           }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   603   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   604   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   605   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   606  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   607  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   608  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   609  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   610  /** \addtogroup IfxLld_Dma_Std_Channel_Configure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   611   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   612  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   613  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   614  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   615  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   616  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   617  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   618   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   619   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   620   * \return Actual channel destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   621   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   622   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   623   *      uint32 destAddr = IfxDma_getChannelDestinationAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   625   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   627   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   628  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   629  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   630  /** \brief Get a channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   631   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   632   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   633   * \return Actual channel source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   634   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   635   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   636   *      uint32 sourceAddr = IfxDma_getChannelSourceAddress(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   637   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   638   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   639   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   640  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   641  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   642  /** \brief Return the DMA channel suspend Mode status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   643   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   644   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   645   * \return Channel Suspend Mode or Frozen State Active status (1- DMA channel is in channel suspend mode or frozen state)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   646   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   647  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   648  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   649  /** \brief Return remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   650   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   651   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   652   * \return Remaining DMA transfer count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   653   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   654   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   655   *      // Wait till transfer count (TCOUNT) becomes 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   656   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   657   *      bool notFinished;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   658   *      do {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   659   *              notFinished = false;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   660   *                      if( IfxDma_getChannelTransferCount(chn[0].dma, chn[0].channelId) ) {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   661   *                              notFinished = true;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   662   *                              break;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   663   *                      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   664   *      } while( notFinished );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   665   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   666   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   667   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   668  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   669  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   670  /** \brief get the time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   671   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   672   * \return the current time stamp
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   673   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   674   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   675   *      uint32 timestamp = IfxDma_getTimestamp(chn[0].dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   676   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   677   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   678   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   679  IFX_INLINE uint32 IfxDma_getTimestamp(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   680  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   681  /** \brief Configure the move count for each DMA channel transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   682   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   683   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   684   * \param blockMode value holds the number of moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   685   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   686   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   687   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   688   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   689   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   690  IFX_INLINE void IfxDma_setChannelBlockMode(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMove blockMode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   692  /** \brief Configure a DMA channel to "continous transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   693   * After a transaction, the hardware request transaction remain enabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   694   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   695   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   696   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   697   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   698   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   699   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   700   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   701  IFX_INLINE void IfxDma_setChannelContinuousMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   702  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   703  /** \brief Configure the destination address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   704   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   705   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   706   * \param address is the Initial address of the destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   707   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   708   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   709   * A coding example can be found in \ref IfxDma_setChannelSourceAddress
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   710   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   711   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   712  IFX_INLINE void IfxDma_setChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   714  /** \brief Configure a DMA channel destination pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   715   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   716   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   717   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   718   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   719   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   720   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   721   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   722   * A coding example can be found in \ref IfxDma_setChannelSourceIncrementStep
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   723   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   724   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   725  IFX_INLINE void IfxDma_setChannelDestinationIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   726  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   727  /** \brief Configure a DMA channel move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   728   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   729   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   730   * \param moveSize value holds the opcode or size of data of individual moves with in a DMA transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   731   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   732   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   733   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   734   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   735   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   736  IFX_INLINE void IfxDma_setChannelMoveSize(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelMoveSize moveSize);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   737  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   738  /** \brief Configure a DMA channel shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   739   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   740   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   741   * \param shadow Specifies the shadow pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   742   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   743   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   744   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   745   *      // Push the shadow mode into double buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   746   *      IfxDma_setChannelShadow(chn[0].dma, chn[0].channelId,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   747   *      IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   748   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   749   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   750   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   751  IFX_INLINE void IfxDma_setChannelShadow(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelShadow shadow);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   752  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   753  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   754   * After a transaction, the hardware request transaction is disabled, and must be set by software again
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   755   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   756   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   757   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   758   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   759   * A coding example can be found in \ref IfxDma_enableChannelTransaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   760   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   761   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   762  IFX_INLINE void IfxDma_setChannelSingleMode(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   763  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   764  /** \brief Configure a DMA channel to "single transaction mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   765   * One transfer request starts a complete DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   766   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   767   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   768   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   769   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   770   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   771   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   772   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   773  IFX_INLINE void IfxDma_setChannelSingleTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   774  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   775  /** \brief Configure a DMA channel to "single transfer mode"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   776   * A transfer request is required for each transfer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   777   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   778   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   779   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   780   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   781   * A coding example can be found in \ref IfxDma_setChannelTransferCount
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   782   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   783   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   784  IFX_INLINE void IfxDma_setChannelSingleTransfer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   786  /** \brief Configure the source address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   787   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   788   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   789   * \param address is the Initial address of the source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   790   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   791   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   792   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   793   *      // Check for the end of current transaction and before trigger the channel request for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   794   *      // for another channel, re configure the source and destination addresses
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   795   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   796   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[1].dma, chn[1].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   797   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   798   *      // Re-Program the source address for the channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   799   *      IfxDma_setChannelSourceAddress(chn[2].dma, chn[2].channelId,Sadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   800   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   801   *      // Re-Program the destination address for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   802   *      IfxDma_setChannelDestinationAddress(chn[2].dma, chn[2].channelId,Dadr);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   803   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   804   *      // Start DMA transaction for channel 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   805   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   806   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   807   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   808   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   809  IFX_INLINE void IfxDma_setChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId, const void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   810  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   811  /** \brief Configure a DMA channel source pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   812   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   813   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   814   * \param incStep Specifies the pointer incrementation step
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   815   * \param direction Specifies the incrementation direction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   816   * \param size Specifies the size of the circular buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   817   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   818   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   819   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   820   *      // Re-program the source and destination circular buffer control fields
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   821   *      IfxDma_setChannelSourceIncrementStep(chn[0].dma,  chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   822   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   823   *      IfxDma_setChannelDestinationIncrementStep(chn[0].dma, chn[0].channelId, IfxDma_ChannelIncrementStep_2, IfxDma_ChannelIncrementDirection_negative, IfxDma_ChannelIncrementCircular_16);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   824   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   825   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   826   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   827  IFX_INLINE void IfxDma_setChannelSourceIncrementStep(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_ChannelIncrementStep incStep, IfxDma_ChannelIncrementDirection direction, IfxDma_ChannelIncrementCircular size);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   828  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   829  /** \brief Configure a DMA channel suspend enable
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   830   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   831   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   832   * \param enable enable (1) / disable (0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   833   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   835  IFX_INLINE void IfxDma_setChannelSuspendEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   837  /** \brief Configure the move count of a DMA channel transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   838   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   839   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   840   * \param transferCount value holds the DMA transfers within a transaction (1..16383; 0 handled like 1 transaction)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   841   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   842   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   843   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   844   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   845   *      IfxDma_Dma_startChannelTransaction(&chn[0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   846   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   847   *      // Wait till end of transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   848   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   849   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   850   *      // Change the TREL configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   851   *      IfxDma_setChannelTransferCount(chn[1].dma, chn[1].channelId,0x6);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   852   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   853   *      // Change the BLKM configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   854   *      IfxDma_setChannelBlockMode(chn[1].dma, chn[1].channelId,IfxDma_ChannelMove_3);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   855   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   856   *      // Change the Move size configuration for channel 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   857   *      IfxDma_setChannelMoveSize(chn[1].dma, chn[1].channelId,IfxDma_ChannelMoveSize_64bit);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   858   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   859   *      // Pull down the channel pending request after the first transfer is initiated
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   860   *      IfxDma_setChannelSingleTransfer(chn[1].dma, chn[1].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   861   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   862   *      // Pull down the channel pending request after the transaction gets over
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   863   *      IfxDma_setChannelSingleTransaction(chn[2].dma, chn[2].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   864   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   865   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   866   *      IfxDma_Dma_startChannelTransaction(&chn[1]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   867   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   868   *      // Start DMA transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   869   *      IfxDma_Dma_startChannelTransaction(&chn[2]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   870   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   871   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   872   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   873  IFX_INLINE void IfxDma_setChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint32 transferCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   874  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   875  /** \brief Configure the shadow pointer register to read only
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   876   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   877   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   878   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   879   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   880   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   881   *      // Disable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   882   *      IfxDma_writeChannelShadowDisable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   883   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   884   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   885   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   886  IFX_INLINE void IfxDma_writeChannelShadowDisable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   887  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   888  /** \brief Configure the shadow pointer register to write-able
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   889   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   890   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   891   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   892   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   893   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   894   *      // Enable the shadow mode to come out of double buffer mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   895   *      IfxDma_writeChannelShadowEnable(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   896   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   897   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   899  IFX_INLINE void IfxDma_writeChannelShadowEnable(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   901  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   902  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   903  /** \addtogroup IfxLld_Dma_Std_Channel_Halt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   904   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   905  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   906  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   907  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   908  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   909  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   910  /** \brief Clear channel halt request and aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   911   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   912   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   913   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   914   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   915   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   916   *      // Quit the halt mode of operation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   917   *      IfxDma_clearChannelHalt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   918   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   919   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   920   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   921  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   922  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   923  /** \brief Get channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   924   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   925   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   926   * \return halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   927   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   928   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   929   *      // Check for the channel halt aknowledgement
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   930   *      while(!(IfxDma_getChannelHalt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   931   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   932   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   933   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   934  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   935  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   936  /** \brief setting channel halt request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   937   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   938   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   939   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   940   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   941   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   942   *      // Halt the channel processing
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   943   *      IfxDma_setChannelHalt(chn[0].dma,chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   944   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   945   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   947  IFX_INLINE void IfxDma_setChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   949  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   950  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   951  /** \addtogroup IfxLld_Dma_Std_Double_Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   952   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   953  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   954  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   955  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   956  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   957  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   958  /** \brief get information on buffer being read by software and clear the notification flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   959   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   960   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   961   * \return TRUE  if one of the buffers is being read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   962   * FALSE if one of the buffers is already read by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   963   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   964   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   965   *      // Check the buffer being read (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   966   *      while(!(IfxDma_getDoubleBufferRead(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   967   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   968   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   969   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   970  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   971  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   972  /** \brief get Double buffer selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   973   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   974   * \param channelId channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   975   * \return TRUE if buffer 1 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   976   * FALSE if buffer 0 is being filled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   977   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   978   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   979   *      boolean buffer_being_filled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   980   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   981   *      // Check the buffer being filled (Double buffer operation mode)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   982   *      buffer_being_filled = IfxDma_getDoubleBufferSelection(chn[0].dma, chn[0].channelId));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   983   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   984   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   985   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   986  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   987  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   988  /** \brief keeps the double buffer active
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   989   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   990   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   991   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   992   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   993   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   994   *      IfxDma_keepDoubleBufferActive(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   995   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   996   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   997   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   998  IFX_INLINE void IfxDma_keepDoubleBufferActive(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1000  /** \brief Double buffer switch application
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1001   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1002   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1003   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1004   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1005   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1006   *      // Apply software buffer switch
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1007   *      IfxDma_switchDoubleBuffer(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1008   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1009   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1010   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1011  IFX_INLINE void IfxDma_switchDoubleBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1012  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1013  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1014  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1015  /** \addtogroup IfxLld_Dma_Std_Interrupts
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1016   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1017  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1018  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1019  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1020  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1022  /** \brief Clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1023   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1024   * \param channelId channel for which the interrupt flag should be cleared
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1025   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1026   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1027   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1028   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1029   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1030  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1031  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1032  /** \brief Disable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1033   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1034   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1035   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1036   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1037   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1038   * IfxDma_disableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1039   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1040   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1041   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1042  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1043  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1044  /** \brief Enable channel interrupt trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1045   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1046   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1047   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1048   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1049   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1050   * IfxDma_enableChannelInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1051   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1052   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1054  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1056  /** \brief Return and clear a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1057   * The flag is automatically cleared with the call to this function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1058   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1059   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1060   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1061   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1062   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1063   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1064   *      // wait for the end of transaction for intended channel by checking the channel interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1065   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1066   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1067   *      // Wait till end of the transaction
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1068   *      while(!(IfxDma_getAndClearChannelInterrupt(chn[2].dma, chn[2].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1069   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1070   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1071   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1072  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1073  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1074  /** \brief Returns and clears the pattern detection interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1075   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1076   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1077   * \return TRUE  if pattern detection for a given channel is found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1078   * FALSE if pattern detection for a given channel is not found
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1079   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1080   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1081   *      // wait till pattern match is found for given channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1082   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1083   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1084   *      // Wait for the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1085   *      while(!(IfxDma_getAndClearChannelPatternDetectionInterrupt(chn[0].dma, chn[0].channelId)));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1086   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1087   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1088   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1089  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1091  /** \brief Returns and clears the status of channel wrap destination buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1092   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1093   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1094   * \return TRUE  if wrap destination buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1095   * FALSE if wrap destination buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1096   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1097   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1098   *      // wait for the destination buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1099   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1100   *      boolean destinationWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1102   *      destinationWrapFlag = IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1103   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1104   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1106  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1108  /** \brief Returns and clears the status of channel wrap source buffer interrupt trigger flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1109   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1110   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1111   * \return TRUE  if wrap source buffer interrupt trigger flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1112   * FALSE if wrap source buffer interrupt trigger flag is not set or get cleared already
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1113   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1114   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1115   *      // wait for the source buffer wrap interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1116   *      // and clear it once it is set and checked
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1117   *      boolean sourceWrapFlag;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1118   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1119   *      sourceWrapFlag = IfxDma_getAndClearChannelWrapSourceBufferInterrupt(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1120   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1121   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1122   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1123  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1125  /** \brief Return a channel transfer interrupt flag
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1126   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1127   * \param channelId channel for which the interrupt flag should be returned
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1128   * \return TRUE if the interrupt flag is set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1129   * FALSE if the interrupt flag is not set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1131   * see Dma.INTSR
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1133   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1134  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1135  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1136  /** \brief Returns whether the old value of pattern detection corresponding pattern comparison operation found a pattern match in previous DMA * read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1137   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1138   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1139   * \return TRUE if corresponding pattern comparison operation found a pattern match in previous DMA read move or not
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1140   * FALSE if corresponding pattern comparison operation did not find a pattern match in previous DMA read move
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1141   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1142   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1143   *      boolean patternDetectOldVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1144   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1145   *      // Check the old value of the pattern detection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1146   *      patternDetectOldVal = IfxDma_getChannelPatternDetectionOldValue(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1147   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1150  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1152  /** \brief Returns the SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1153   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1154   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1155   * \return SRC pointer for given DMA channel
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1156   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1157   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1158   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1159   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1160   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1161   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1162  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1163  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1164  /** \brief Setting of channel interrupt service request by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1165   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1166   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1167   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1169   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1170   *      // Set the channel interrupt service request through software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1171   *      IfxDma_setChannelInterruptServiceRequest(chn[0].dma, chn[0].channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1172   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1173   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1174   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1175  IFX_INLINE void IfxDma_setChannelInterruptServiceRequest(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1176  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1177  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1179  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1180  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1181  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1183  /** \brief Configure the hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1184   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1185   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1186   * \param resourcePartition Hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1187   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1188   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1189   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1190   *      // Set the required hardware resource partition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1191   *      IfxDma_setChannelHardwareResourcePartition(chn[0].dma, chn[0].channelId,setChannelHardwareResourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1192   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1195  IFX_INLINE void IfxDma_setChannelHardwareResourcePartition(Ifx_DMA *dma, IfxDma_ChannelId channelId, IfxDma_HardwareResourcePartition resourcePartition);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1197  /** \brief Sets the Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1198   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1199   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1200   * \param value Interrupt control value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1201   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1202   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1203  IFX_INLINE void IfxDma_setInterruptControlValue(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint8 value);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1204  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1205  /** \brief Sets the Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1206   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1207   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1208   * \param length Circular Buffer Destination Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1209   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1210   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1211  IFX_INLINE void IfxDma_setCircularBufferDestinationLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1212  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1213  /** \brief Sets the Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1214   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1215   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1216   * \param length Circular Buffer Source Length
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1217   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1218   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1219  IFX_INLINE void IfxDma_setCircularBufferSourceLength(Ifx_DMA *dma, IfxDma_ChannelId channelId, uint16 length);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1220  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1221  /** \brief Enable the Source Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1222   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1223   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1224   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1225   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1226  IFX_INLINE void IfxDma_enableSourceCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1227  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1228  /** \brief Enable the Destination Circular Buffer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1229   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1230   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1231   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1232   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1233  IFX_INLINE void IfxDma_enableDestinationCircularBuffer(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1234  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1235  /** \brief Returns the Data CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1236   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1237   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1238   * \return The Data CRC value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1239   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1240  IFX_INLINE uint32 IfxDma_getDataCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1241  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1242  /** \brief Returns the Source and Destination CRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1243   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1244   * \param channelId DMA channel number
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1245   * \return The source and destination CRC values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1246   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1247  IFX_INLINE uint32 IfxDma_getSourceAndDestinationCRC(Ifx_DMA *dma, IfxDma_ChannelId channelId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1249  /** \brief Returns the ERR pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1250   * \param dma pointer to DMA module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1251   * \return ERR pointer for given DMA
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1252   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1253  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getErrPointer(Ifx_DMA *dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1255  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1256  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1257  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1258  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1259  IFX_INLINE void IfxDma_clearChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1260  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1261      dma->TSR[channelId].B.HLTCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1262  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1263  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1264  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1265  IFX_INLINE void IfxDma_clearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1266  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1267      dma->CH[channelId].CHCSR.B.CICH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1268  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1269  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1271  IFX_INLINE void IfxDma_clearChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1272  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1273      dma->TSR[channelId].B.CTL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1274  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1275  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1277  IFX_INLINE void IfxDma_clearErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine, uint32 mask)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1278  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1279      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1280      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1281          dma->BLK1.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1282      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1283      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1284      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1285          dma->BLK0.CLRE.U = mask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1286      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1287  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1290  IFX_INLINE void IfxDma_disableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1291  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1292      dma->CH[channelId].ADICR.B.INTCT &= ~(1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1293  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1294  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1296  IFX_INLINE void IfxDma_disableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1297  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1298      dma->TSR[channelId].B.DCH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1299  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1300  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1301  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1302  IFX_INLINE void IfxDma_disableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1303  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1304      dma->CH[channelId].ADICR.B.ETRL = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1305  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1306  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1307  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1308  IFX_INLINE void IfxDma_disableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1309  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1310      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1311      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1312          dma->BLK1.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1313      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1314      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1315      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1316          dma->BLK0.EER.B.EDER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1317      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1318  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1319  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1321  IFX_INLINE void IfxDma_disableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1322  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1323      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1324      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1325          dma->BLK1.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1326      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1327      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1328      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1329          dma->BLK0.EER.B.ESER = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1330      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1331  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1332  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1333  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1334  IFX_INLINE void IfxDma_enableChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1335  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1336      dma->CH[channelId].ADICR.B.INTCT |= (1 << 1);   // TODO: should we define a special bitmask for this bit manipulation?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1337  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1338  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1339  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1340  IFX_INLINE void IfxDma_enableChannelTransaction(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1341  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1342      dma->TSR[channelId].B.ECH = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1343  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1344  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1346  IFX_INLINE void IfxDma_enableChannelTransactionLostError(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1347  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1348      dma->CH[channelId].ADICR.B.ETRL = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1349  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1351  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1352  IFX_INLINE void IfxDma_enableMoveEngineDestinationError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1353  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1354      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1355      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1356          dma->BLK1.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1357      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1358      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1359      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1360          dma->BLK0.EER.B.EDER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1361      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1362  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1363  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1364  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1365  IFX_INLINE void IfxDma_enableMoveEngineSourceError(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1366  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1367      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1368      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1369          dma->BLK1.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1370      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1371      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1372      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1373          dma->BLK0.EER.B.ESER = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1374      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1375  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1376  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1378  IFX_INLINE boolean IfxDma_getAndClearChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1379  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1380      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1381  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1382      result = dma->CH[channelId].CHCSR.B.ICH != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1384      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1385      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1386          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1387      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1388  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1389      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1390  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1392  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1393  IFX_INLINE boolean IfxDma_getAndClearChannelPatternDetectionInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1394  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1395      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1396  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1397      result = dma->CH[channelId].CHCSR.B.IPM != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1398  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1399      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1400      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1401          dma->CH[channelId].CHCSR.B.CICH = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1402      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1403  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1404      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1405  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1406  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1407  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1408  IFX_INLINE boolean IfxDma_getAndClearChannelWrapDestinationBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1409  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1410      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1411  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1412      result = dma->CH[channelId].CHCSR.B.WRPD != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1413  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1414      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1415      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1416          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1417      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1418  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1419      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1420  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1421  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1423  IFX_INLINE boolean IfxDma_getAndClearChannelWrapSourceBufferInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1424  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1425      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1427      result = dma->CH[channelId].CHCSR.B.WRPS != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1428  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1429      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1430      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1431          dma->CH[channelId].CHCSR.B.CWRP = TRUE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1432      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1433  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1434      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1435  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1437  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1438  IFX_INLINE uint32 IfxDma_getChannelDestinationAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1439  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1440      return dma->CH[channelId].DADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1441  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1443  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1444  IFX_INLINE boolean IfxDma_getChannelHalt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1445  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1446      return dma->TSR[channelId].B.HLTACK != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1447  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1448  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1449  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1450  IFX_INLINE boolean IfxDma_getChannelInterrupt(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1451  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1452      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1454      result = dma->CH[channelId].CHCSR.B.ICH;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1455  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1456      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1460  IFX_INLINE boolean IfxDma_getChannelPatternDetectionOldValue(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1462      return dma->CH[channelId].CHCSR.B.LXO != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1463  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1464  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1465  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1466  IFX_INLINE uint32 IfxDma_getChannelSourceAddress(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1467  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1468      return dma->CH[channelId].SADR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1469  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1472  IFX_INLINE boolean IfxDma_getChannelSuspendModeStatus(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1473  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1474      return dma->SUSACR[channelId].B.SUSAC;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1475  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1477  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1478  IFX_INLINE boolean IfxDma_getChannelTransactionRequestLost(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1479  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1480      return dma->TSR[channelId].B.TRL != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1481  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1483  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1484  IFX_INLINE uint32 IfxDma_getChannelTransferCount(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1485  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1486      return dma->CH[channelId].CHCSR.B.TCOUNT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1487  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1488  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1490  IFX_INLINE IfxDma_ChannelIncrementCircular IfxDma_getCircularRangeCode(uint16 range)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1491  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1492      return (IfxDma_ChannelIncrementCircular)(31 - __clz((uint32)range));
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1493  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1494  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1496  IFX_INLINE boolean IfxDma_getDoubleBufferRead(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1497  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1498      boolean result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1500      result = dma->CH[channelId].CHCSR.B.FROZEN != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1502      if (result == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1503      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1504          dma->CH[channelId].CHCSR.B.FROZEN = FALSE;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1505      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1507      return result;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1508  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1509  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1510  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1511  IFX_INLINE boolean IfxDma_getDoubleBufferSelection(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1512  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1513      return dma->CH[channelId].CHCSR.B.BUFFER != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1514  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1515  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1516  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1517  IFX_INLINE uint32 IfxDma_getErrorFlags(Ifx_DMA *dma, IfxDma_MoveEngine moveEngine)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1518  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1519      if (moveEngine == IfxDma_MoveEngine_1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1520      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1521          return dma->BLK1.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1522      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1523      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1524      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1525          return dma->BLK0.ERRSR.U;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1526      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1527  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1528  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1529  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1530  IFX_INLINE volatile Ifx_SRC_SRCR *IfxDma_getSrcPointer(Ifx_DMA *dma, IfxDma_ChannelId channelId)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1531  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1532      IFX_UNUSED_PARAMETER(dma);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1533      // only a single DMA available, therefore no check for the dma pointer required
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];
	mul	d15,d15,#4
	mov.a	a15,d15
.L494:
	movh.a	a3,#61444
	add.a	a3,a15
	lea	a15,[a3]-31488
.L495:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1534      return &MODULE_SRC.DMA.DMA[0].CH[channelId];      (inlined)
	j	.L53

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Dma\Std\IfxDma.h	  1535  }      (inlined)
.L53:


	ld.bu	d0,[a2]14
.L753:


	ld.hu	d15,[a2]12
.L321:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src SRC
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    46   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    47   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    48   * \addtogroup IfxLld_Src_Usage
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    49   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    50   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    51   * For Aurix controller peripherals that can generate service requests is connected to one
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    52   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    53   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    54   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    55   * details of these APIs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    56   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    57   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    58   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    59   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    60   * Service request node is initialized to configure the following,\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    61   * 1) Route the interrupt trigger to service provider, which are:\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    62   *  __a. One of the available CPUs or\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    63   *  __b. DMA controller\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    64   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    65   * 2) Priority of CPU Interrupt or DMA Trigger.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    66   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    67   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    68   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    69   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    70   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    71   * User must configure the service request node in the application / driver files.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    72   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    73   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    74   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    75   * Enable the service request node to connect the trigger event from the hardware to service provider.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    76   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    77   * Example:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    78   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    79   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    80   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    81   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    82   * //file: myApplication.c
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    83   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    84   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    85   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    86   * void myDriverInitFunction(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    87   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    88   *    // driver init code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    89   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    90   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    91   *    // and priority specified at Ifx_IntPrioDef.h globally
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    92   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    93   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    94   *    // Step2: Enable the service request node
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    95   *  IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    96   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    97   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    98   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	    99   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   100   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   101   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   102   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   103   * \ingroup IfxLld_Src_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   104   * \defgroup IfxLld_Src_Std_Module Module Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   105   * \ingroup IfxLld_Src_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   106   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   108  #ifndef IFXSRC_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   109  #define IFXSRC_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   110  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   111  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   112  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   113  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   114  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   115  #include "_Impl/IfxSrc_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   116  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   117  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   118  /** \addtogroup IfxLld_Src_Std_Service_Request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   119   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   120  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   121  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   122  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   123  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   125  /** \brief Resets the overrun flag of the Service Request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   126   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   127   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   128   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   129   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   130   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   132  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   133  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   134  /** \brief Resets a specific interrupt service by software.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   135   * \param src pointer to the Service Request Control register which the request should be cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   136   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   137   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   138   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   139   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   140   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   141  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   142  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   143  /** \brief Gets the current overrun status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   144   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   145   * \return current service request control overrun status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   146   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   147   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   148   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   149   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   150  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   152  /** \brief Gets the current request status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   153   * \param src pointer to the Service Request Control register for which the request status should be returned.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   154   * \return current service request control request status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   155   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   156   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   157   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   158   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   159  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   160  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   161  /** \brief Requests a specific interrupt service by software
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   162   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   163   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   164   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   165   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   166   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   167   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   168  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   169  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   170  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   171  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   172  /** \addtogroup IfxLld_Src_Std_Module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   173   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   174  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   175  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   176  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   177  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   178  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   179  /** \brief DeInitializes the service request control register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   180   * \param src pointer to the Service Request Control register which should be deinitialised.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   181   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   182   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   183   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   184   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   185   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   186  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   187  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   188  /** \brief Disables a specific interrupt service request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   189   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   190   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   191   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   192   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   194   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   195  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   196  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   197  /** \brief Enables a specific interrupt service request.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   198   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   199   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   200   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   201   * Usage example: see \ref IfxSrc_init
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   202   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   203   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   204  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   205  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   206  /** \brief Initializes the service request control register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   207   * \param src pointer to the Service Request Control register which should be initialised.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   208   * \param typOfService type of interrupt service provider.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   209   * \param priority Interrupt priority.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   210   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   211   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   212   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   213   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   214   * //define the interrupt priority
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   215   * #define IFXASCLIN0_TX_INTPRIO 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   216   * //get the service request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   217   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   218   * //initlaise the service request
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   219   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   220   * // enable the service
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   221   * IfxSrc_enable( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   222   * //check for service request flags and clear if they occur
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   223   * if ( IfxSrc_isRequested( src ) == TRUE )
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   224   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   225   *    IfxSrc_clearRequest( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   226   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   227   * if ( IfxSrc_isOverrun( src ) == TRUE )
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   228   * {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   229   *      IfxSrc_clearOverrun( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   230   * }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   231   * // Atlast deinitialise the service control
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   232   * IfxSrc_deinit( src );
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   233   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   234   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   235   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   236  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   237  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   238  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   239  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   240  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   241  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   242  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   243  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   244  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   245  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   246      src->B.IOVCLR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   247  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   248  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   249  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   250  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   251  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   252      src->B.CLRR = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   253  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   254  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   256  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   257  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   258      src->U = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   259  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   260  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   261  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   262  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   263  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   264      src->B.SRE = 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   265  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   266  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   267  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   268  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   269  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   270      src->B.SRE = 1;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   271  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   272  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   274  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   275  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   276      src->B.SRPN = priority;
	ld.bu	d1,[a15]
.L754:
	extr.u	d15,d15,#0,#8
.L755:
	insert	d15,d1,d15,#0,#8
	st.b	[a15],d15
.L756:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Src\Std\IfxSrc.h	   277      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L757:
	insert	d15,d15,d0,#3,#2
	st.b	[a15]1,d15
.L323:
	ld.bu	d15,[a15]3
.L758:
	or	d15,#2
	st.b	[a15]3,d15
.L322:
	ld.bu	d15,[a15]1
.L759:
	or	d15,#4
	st.b	[a15]1,d15
.L324:


	ld.w	d15,[a15]
.L760:


	st.w	[a12]60,d15
.L280:


	ret
.L256:
	
__IfxFft_Fft_initDma_function_end:
	.size	IfxFft_Fft_initDma,__IfxFft_Fft_initDma_function_end-IfxFft_Fft_initDma
.L149:
	; End of function
	
	.sdecl	'.bss.IfxFft_Fft.IfxFft_Fft_dummy256',data,cluster('IfxFft_Fft_dummy256')
	.sect	'.bss.IfxFft_Fft.IfxFft_Fft_dummy256'
	.align	4
IfxFft_Fft_dummy256:	.type	object
	.size	IfxFft_Fft_dummy256,32
	.space	32
	.calls	'IfxFft_Fft_initJob','IfxFft_Fft_calcCSR'
	.calls	'IfxFft_Fft_initJob','IfxFft_Fft_calcCounters'
	.calls	'IfxFft_Fft_initModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxFft_Fft_initModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxFft_Fft_initModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxFft_Fft_initModule','IfxFft_Fft_initDma'
	.calls	'IfxFft_Fft_isrInput','IfxFft_Fft_startJob'
	.calls	'IfxFft_Fft_isrInput','IfxFft_Fft_unloadOutput'
	.calls	'IfxFft_Fft_isrOutput','IfxFft_Fft_startJob'
	.calls	'IfxFft_Fft_isrOutput','IfxFft_Fft_unloadOutput'
	.calls	'IfxFft_Fft_startJob','IfxFft_Fft_loadInput'
	.calls	'IfxFft_Fft_isrIntra','IfxFft_Fft_unloadOutput'
	.calls	'IfxFft_Fft_initDma','IfxDma_Dma_createModuleHandle'
	.calls	'IfxFft_Fft_initDma','IfxDma_Dma_initChannelConfig'
	.calls	'IfxFft_Fft_initDma','IfxDma_Dma_initChannel'
	.calls	'IfxFft_Fft_calcCSR','',0
	.calls	'IfxFft_Fft_cloneAndLinkJobs','',0
	.calls	'IfxFft_Fft_unloadOutput','',0
	.calls	'IfxFft_Fft_initJob','',0
	.calls	'IfxFft_Fft_initJobConfig','',0
	.calls	'IfxFft_Fft_initModule','',0
	.calls	'IfxFft_Fft_initModuleConfig','',0
	.calls	'IfxFft_Fft_initWindow','',0
	.calls	'IfxFft_Fft_isrInput','',0
	.calls	'IfxFft_Fft_isrOutput','',0
	.calls	'IfxFft_Fft_loadInput','',0
	.calls	'IfxFft_Fft_modifyDataPointers','',0
	.calls	'IfxFft_Fft_startJob','',0
	.calls	'IfxFft_Fft_calcCounters','',0
	.calls	'IfxFft_Fft_isrIntra','',0
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxDma_Dma_createModuleHandle
	.extern	IfxDma_Dma_initChannel
	.extern	IfxDma_Dma_initChannelConfig
	.calls	'IfxFft_Fft_initDma','',72
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L87:
	.word	105002
	.half	3
	.word	.L88
	.byte	4
.L86:
	.byte	1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L89
	.byte	2,1,1,3
	.word	169
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,61,17,1,1,5
	.byte	'fun',0,1,61,43
	.word	172
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,152,2,18
	.word	217
	.byte	1,1,5
	.byte	'a',0,1,152,2,44
	.word	229
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,172,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0
.L233:
	.byte	3
	.word	341
	.byte	8
	.byte	'__ld64',0,3,2,135,1,19
	.word	315
	.byte	1,1,5
	.byte	'addr',0,2,135,1,32
	.word	347
	.byte	6,0,4
	.byte	'__st64',0,3,2,143,1,17,1,1,5
	.byte	'addr',0,2,143,1,30
	.word	347
	.byte	5
	.byte	'value',0,2,143,1,43
	.word	315
	.byte	6,0,7
	.byte	'unsigned int',0,4,7
.L224:
	.byte	7
	.byte	'int',0,4,5
.L235:
	.byte	7
	.byte	'unsigned char',0,1,8,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,45,16,4,11
	.byte	'SRPN',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	456
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	456
	.byte	3,0,2,35,1,11
	.byte	'ECC',0,1
	.word	456
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	456
	.byte	2,0,2,35,2,11
	.byte	'SRR',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,4,70,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	473
	.byte	4,2,35,0,0,14
	.word	763
.L281:
	.byte	3
	.word	802
.L299:
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,250,1,17,1,1
.L301:
	.byte	5
	.byte	'src',0,3,250,1,60
	.word	807
.L303:
	.byte	6,0
.L304:
	.byte	4
	.byte	'IfxSrc_enable',0,3,3,140,2,17,1,1
.L306:
	.byte	5
	.byte	'src',0,3,140,2,54
	.word	807
.L308:
	.byte	6,0,15,5,69,9,1,16
	.byte	'IfxSrc_Tos_cpu0',0,0,16
	.byte	'IfxSrc_Tos_cpu1',0,1,16
	.byte	'IfxSrc_Tos_dma',0,3,0
.L193:
	.byte	7
	.byte	'unsigned short int',0,2,7
.L289:
	.byte	4
	.byte	'IfxSrc_init',0,3,3,146,2,17,1,1
.L292:
	.byte	5
	.byte	'src',0,3,146,2,52
	.word	807
.L294:
	.byte	5
	.byte	'typOfService',0,3,146,2,68
	.word	892
.L296:
	.byte	5
	.byte	'priority',0,3,146,2,95
	.word	951
.L298:
	.byte	17,6,0,0,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,7,241,8,16,4,11
	.byte	'ENDINIT',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	1050
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	1050
	.byte	16,0,2,35,0,0,12,7,247,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1066
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,7,250,8,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	2,6,2,35,0,11
	.byte	'IR0',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	456
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,7,255,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1202
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,7,137,9,16,4,11
	.byte	'AE',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	456
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,7,135,15,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1446
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,7,175,15,25,12,13
	.byte	'CON0',0
	.word	1162
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	1406
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1637
	.byte	4,2,35,8,0,14
	.word	1677
	.byte	3
	.word	1740
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,6,181,3,17,1,1,5
	.byte	'watchdog',0,6,181,3,65
	.word	1745
	.byte	5
	.byte	'password',0,6,181,3,82
	.word	951
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,6,204,3,17,1,1,5
	.byte	'password',0,6,204,3,59
	.word	951
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,6,140,4,17,1,1,5
	.byte	'watchdog',0,6,140,4,63
	.word	1745
	.byte	5
	.byte	'password',0,6,140,4,80
	.word	951
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,6,163,4,17,1,1,5
	.byte	'password',0,6,163,4,57
	.word	951
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,6,227,3,19
	.word	951
	.byte	1,1,5
	.byte	'watchdog',0,6,227,3,74
	.word	1745
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,6,253,3,19
	.word	951
	.byte	1,1,6,0,10
	.byte	'_Ifx_FFT_CLC_Bits',0,9,45,16,4,11
	.byte	'DISR',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'DISS',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1050
	.byte	30,0,2,35,0,0,12,9,152,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2155
	.byte	4,2,35,0,0,18,4
	.word	456
	.byte	19,3,0,10
	.byte	'_Ifx_FFT_ID_Bits',0,9,99,16,4,11
	.byte	'MODREV',0,4
	.word	1050
	.byte	8,24,2,35,0,11
	.byte	'MODTYPE',0,4
	.word	1050
	.byte	8,16,2,35,0,11
	.byte	'MODNUMBER',0,4
	.word	1050
	.byte	16,0,2,35,0,0,12,9,184,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2282
	.byte	4,2,35,0,0,18,52
	.word	456
	.byte	19,51,0,10
	.byte	'_Ifx_FFT_CSR_Bits',0,9,53,16,4,11
	.byte	'START',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1050
	.byte	7,24,2,35,0,11
	.byte	'LENGTH',0,4
	.word	1050
	.byte	4,20,2,35,0,11
	.byte	'IFFT',0,4
	.word	1050
	.byte	1,19,2,35,0,11
	.byte	'WIN_BYP',0,4
	.word	1050
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1050
	.byte	2,16,2,35,0,11
	.byte	'IN_FMT',0,4
	.word	1050
	.byte	2,14,2,35,0,11
	.byte	'OUT_FMT',0,4
	.word	1050
	.byte	1,13,2,35,0,11
	.byte	'BUSY',0,4
	.word	1050
	.byte	1,12,2,35,0,11
	.byte	'RFS',0,4
	.word	1050
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1050
	.byte	11,0,2,35,0,0,12,9,160,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2412
	.byte	4,2,35,0,0,18,28
	.word	456
	.byte	19,27,0,10
	.byte	'_Ifx_FFT_HISTORY0_Bits',0,9,69,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	8,24,2,35,0,11
	.byte	'LENGTH',0,4
	.word	1050
	.byte	4,20,2,35,0,11
	.byte	'IFFT',0,4
	.word	1050
	.byte	1,19,2,35,0,11
	.byte	'WIN_BYP',0,4
	.word	1050
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1050
	.byte	2,16,2,35,0,11
	.byte	'IN_FMT',0,4
	.word	1050
	.byte	2,14,2,35,0,11
	.byte	'OUT_FMT',0,4
	.word	1050
	.byte	1,13,2,35,0,11
	.byte	'BUSY',0,4
	.word	1050
	.byte	1,12,2,35,0,11
	.byte	'RFS',0,4
	.word	1050
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1050
	.byte	11,0,2,35,0,0,12,9,168,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2691
	.byte	4,2,35,0,0,18,12
	.word	456
	.byte	19,11,0,10
	.byte	'_Ifx_FFT_HISTORY1_Bits',0,9,84,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	8,24,2,35,0,11
	.byte	'LENGTH',0,4
	.word	1050
	.byte	4,20,2,35,0,11
	.byte	'IFFT',0,4
	.word	1050
	.byte	1,19,2,35,0,11
	.byte	'WIN_BYP',0,4
	.word	1050
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1050
	.byte	2,16,2,35,0,11
	.byte	'IN_FMT',0,4
	.word	1050
	.byte	2,14,2,35,0,11
	.byte	'OUT_FMT',0,4
	.word	1050
	.byte	1,13,2,35,0,11
	.byte	'BUSY',0,4
	.word	1050
	.byte	1,12,2,35,0,11
	.byte	'RFS',0,4
	.word	1050
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1050
	.byte	11,0,2,35,0,0,12,9,176,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2958
	.byte	4,2,35,0,0,18,112
	.word	456
	.byte	19,111,0,10
	.byte	'_Ifx_FFT_ODA_Bits',0,9,139,1,16,4,11
	.byte	'DDREN',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'DRDIS',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1050
	.byte	30,0,2,35,0,0,12,9,224,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3225
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FFT_OCS_Bits',0,9,129,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,4
	.word	1050
	.byte	4,4,2,35,0,11
	.byte	'SUS_P',0,4
	.word	1050
	.byte	1,3,2,35,0,11
	.byte	'SUSSTA',0,4
	.word	1050
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	1050
	.byte	2,0,2,35,0,0,12,9,216,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3346
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FFT_KRSTCLR_Bits',0,9,122,16,4,11
	.byte	'CLR',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1050
	.byte	31,0,2,35,0,0,12,9,208,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3506
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FFT_KRST1_Bits',0,9,115,16,4,11
	.byte	'RST',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1050
	.byte	31,0,2,35,0,0,12,9,200,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3611
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_FFT_KRST0_Bits',0,9,107,16,4,11
	.byte	'RST',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1050
	.byte	30,0,2,35,0,0,12,9,192,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3714
	.byte	4,2,35,0,0,18,8
	.word	456
	.byte	19,7,0,10
	.byte	'_Ifx_FFT',0,9,240,1,25,128,2,13
	.byte	'CLC',0
	.word	2233
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2273
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2363
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2403
	.byte	52,2,35,12,13
	.byte	'CSR',0
	.word	2642
	.byte	4,2,35,64,13
	.byte	'reserved_44',0
	.word	2682
	.byte	28,2,35,68,13
	.byte	'HISTORY0',0
	.word	2909
	.byte	4,2,35,96,13
	.byte	'reserved_64',0
	.word	2949
	.byte	12,2,35,100,13
	.byte	'HISTORY1',0
	.word	3176
	.byte	4,2,35,112,13
	.byte	'reserved_74',0
	.word	3216
	.byte	112,2,35,116,13
	.byte	'ODA',0
	.word	3306
	.byte	4,3,35,228,1,13
	.byte	'OCS',0
	.word	3466
	.byte	4,3,35,232,1,13
	.byte	'KRSTCLR',0
	.word	3571
	.byte	4,3,35,236,1,13
	.byte	'KRST1',0
	.word	3674
	.byte	4,3,35,240,1,13
	.byte	'KRST0',0
	.word	3796
	.byte	4,3,35,244,1,13
	.byte	'reserved_F8',0
	.word	3836
	.byte	8,3,35,248,1,0,14
	.word	3845
.L177:
	.byte	3
	.word	4139
	.byte	10
	.byte	'_Ifx_LMU_CLC_Bits',0,10,102,16,4,11
	.byte	'DISR',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'DISS',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1050
	.byte	30,0,2,35,0,0,12,10,163,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4149
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_LMU_MODID_Bits',0,10,128,1,16,4,11
	.byte	'ID_VALUE',0,4
	.word	1050
	.byte	32,0,2,35,0,0,12,10,179,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4267
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_LMU_ACCEN0_Bits',0,10,45,16,4,11
	.byte	'EN0',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	1050
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	1050
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	1050
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	1050
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	1050
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	1050
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	1050
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	1050
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	1050
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	1050
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	1050
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	1050
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	1050
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	1050
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	1050
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	1050
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	1050
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	1050
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	1050
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	1050
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	1050
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	1050
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	1050
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	1050
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	1050
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	1050
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	1050
	.byte	1,0,2,35,0,0,12,10,139,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4354
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_LMU_ACCEN1_Bits',0,10,82,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	32,0,2,35,0,0,12,10,147,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4923
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_LMU_MEMCON_Bits',0,10,110,16,4,11
	.byte	'OLDAEN',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'POLDAEN',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'ERERR',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'EWERR',0,4
	.word	1050
	.byte	1,26,2,35,0,11
	.byte	'DATAERR',0,4
	.word	1050
	.byte	1,25,2,35,0,11
	.byte	'ADDERR',0,4
	.word	1050
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1050
	.byte	2,22,2,35,0,11
	.byte	'FFTPFT',0,4
	.word	1050
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1050
	.byte	1,20,2,35,0,11
	.byte	'WSTATES',0,4
	.word	1050
	.byte	4,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1050
	.byte	16,0,2,35,0,0,12,10,171,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5012
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_LMU_BUFCON_Bits',0,10,88,16,4,11
	.byte	'TAG1',0,4
	.word	1050
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	1050
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	1050
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1050
	.byte	8,10,2,35,0,11
	.byte	'EREN',0,4
	.word	1050
	.byte	1,9,2,35,0,11
	.byte	'EPEN',0,4
	.word	1050
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	1050
	.byte	6,2,2,35,0,11
	.byte	'EN1',0,4
	.word	1050
	.byte	1,1,2,35,0,11
	.byte	'EN2',0,4
	.word	1050
	.byte	1,0,2,35,0,0,12,10,155,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5336
	.byte	4,2,35,0,0,18,12
	.word	5525
	.byte	19,2,0,18,196,1
	.word	456
	.byte	19,195,1,0,10
	.byte	'_Ifx_LMU',0,10,195,1,25,128,2,13
	.byte	'CLC',0
	.word	4227
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2273
	.byte	4,2,35,4,13
	.byte	'MODID',0
	.word	4314
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2273
	.byte	4,2,35,12,13
	.byte	'ACCEN0',0
	.word	4883
	.byte	4,2,35,16,13
	.byte	'ACCEN1',0
	.word	4972
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	3836
	.byte	8,2,35,24,13
	.byte	'MEMCON',0
	.word	5296
	.byte	4,2,35,32,13
	.byte	'reserved_24',0
	.word	2949
	.byte	12,2,35,36,13
	.byte	'BUFCON',0
	.word	5565
	.byte	12,2,35,48,13
	.byte	'reserved_3C',0
	.word	5574
	.byte	196,1,2,35,60,0,14
	.word	5585
.L179:
	.byte	3
	.word	5798
.L186:
	.byte	4
	.byte	'IfxFft_enableModule',0,3,8,245,1,17,1,1
.L188:
	.byte	5
	.byte	'fft',0,8,245,1,46
	.word	4144
.L190:
	.byte	5
	.byte	'lmu',0,8,245,1,60
	.word	5803
.L192:
	.byte	6,0,15,8,85,9,1,16
	.byte	'IfxFft_Length_8',0,3,16
	.byte	'IfxFft_Length_16',0,4,16
	.byte	'IfxFft_Length_32',0,5,16
	.byte	'IfxFft_Length_64',0,6,16
	.byte	'IfxFft_Length_128',0,7,16
	.byte	'IfxFft_Length_256',0,8,16
	.byte	'IfxFft_Length_512',0,9,16
	.byte	'IfxFft_Length_1024',0,10,0
.L401:
	.byte	8
	.byte	'IfxFft_getLengthFromCode',0,3,8,145,2,19
	.word	951
	.byte	1,1
.L403:
	.byte	5
	.byte	'length',0,8,145,2,58
	.word	5864
.L405:
	.byte	6,0
.L309:
	.byte	8
	.byte	'IfxFft_getSrcPointerDone',0,3,8,157,2,35
	.word	807
	.byte	1,1
.L310:
	.byte	5
	.byte	'fft',0,8,157,2,69
	.word	4144
.L312:
	.byte	6,0
.L181:
	.byte	8
	.byte	'IfxFft_isModuleEnabled',0,3,8,183,2,20
	.word	456
	.byte	1,1
.L183:
	.byte	5
	.byte	'fft',0,8,183,2,52
	.word	4144
.L185:
	.byte	6,0
.L241:
	.byte	8
	.byte	'IfxFft_isReadyForStart',0,3,8,201,2,20
	.word	456
	.byte	1,1
.L243:
	.byte	5
	.byte	'fft',0,8,201,2,52
	.word	4144
.L245:
	.byte	6,0,15,12,156,1,9,1,16
	.byte	'IfxCpu_ResourceCpu_0',0,0,16
	.byte	'IfxCpu_ResourceCpu_1',0,1,16
	.byte	'IfxCpu_ResourceCpu_none',0,2,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,11,141,6,31
	.word	6233
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,11,139,5,20
	.word	456
	.byte	1,1,6,0
.L325:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,11,161,6,19
	.word	6388
	.byte	1,1,5
	.byte	'address',0,11,161,6,55
	.word	951
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,11,190,6,20
	.word	456
	.byte	1,1,5
	.byte	'address',0,11,190,6,70
	.word	951
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,11,172,8,17,1,1,5
	.byte	'address',0,11,172,8,56
	.word	6388
	.byte	5
	.byte	'count',0,11,172,8,72
	.word	6388
	.byte	17,6,0,0,10
	.byte	'_Ifx_P_OUT_Bits',0,14,143,3,16,4,11
	.byte	'P0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,14,181,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6619
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,14,169,2,16,4,11
	.byte	'PS0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,14,133,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6935
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,14,110,16,4,11
	.byte	'MODREV',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,14,148,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7506
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,14,140,1,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	456
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	456
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	456
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	456
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	456
	.byte	5,0,2,35,3,0,12,14,164,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7625
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,14,166,1,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	456
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	456
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	456
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	456
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	456
	.byte	5,0,2,35,3,0,12,14,180,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7840
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,14,179,1,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	456
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	456
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	456
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	456
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	456
	.byte	5,0,2,35,3,0,12,14,188,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8055
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,14,153,1,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	456
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	456
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	456
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	456
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	456
	.byte	5,0,2,35,3,0,12,14,172,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8272
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,14,118,16,4,11
	.byte	'P0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,14,156,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8492
	.byte	4,2,35,0,0,18,24
	.word	456
	.byte	19,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,14,205,3,16,4,11
	.byte	'PD0',0,1
	.word	456
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	456
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'PD2',0,1
	.word	456
	.byte	3,5,2,35,1,11
	.byte	'PL2',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'PD3',0,1
	.word	456
	.byte	3,1,2,35,1,11
	.byte	'PL3',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'PD4',0,1
	.word	456
	.byte	3,5,2,35,2,11
	.byte	'PL4',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'PD5',0,1
	.word	456
	.byte	3,1,2,35,2,11
	.byte	'PL5',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'PD6',0,1
	.word	456
	.byte	3,5,2,35,3,11
	.byte	'PL6',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'PD7',0,1
	.word	456
	.byte	3,1,2,35,3,11
	.byte	'PL7',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,14,205,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8815
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,14,226,3,16,4,11
	.byte	'PD8',0,1
	.word	456
	.byte	3,5,2,35,0,11
	.byte	'PL8',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'PD9',0,1
	.word	456
	.byte	3,1,2,35,0,11
	.byte	'PL9',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'PD10',0,1
	.word	456
	.byte	3,5,2,35,1,11
	.byte	'PL10',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'PD11',0,1
	.word	456
	.byte	3,1,2,35,1,11
	.byte	'PL11',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'PD12',0,1
	.word	456
	.byte	3,5,2,35,2,11
	.byte	'PL12',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'PD13',0,1
	.word	456
	.byte	3,1,2,35,2,11
	.byte	'PL13',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'PD14',0,1
	.word	456
	.byte	3,5,2,35,3,11
	.byte	'PL14',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'PD15',0,1
	.word	456
	.byte	3,1,2,35,3,11
	.byte	'PL15',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,14,213,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9119
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ESR_Bits',0,14,88,16,4,11
	.byte	'EN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,14,140,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9435
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,14,183,3,16,4,11
	.byte	'PDIS0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,14,197,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	9766
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,14,165,3,16,4,11
	.byte	'SEL0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	2,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	433
	.byte	19,1,2,35,0,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,14,189,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10132
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,14,206,2,16,4,11
	.byte	'PS0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	28,0,2,35,0,0,12,14,149,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10418
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,14,227,2,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	433
	.byte	24,0,2,35,0,0,12,14,165,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10565
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,14,238,2,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	433
	.byte	20,0,2,35,0,0,12,14,173,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10734
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,14,216,2,16,4,11
	.byte	'reserved_0',0,2
	.word	951
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,14,157,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10906
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,14,232,1,16,4,11
	.byte	'reserved_0',0,2
	.word	951
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	951
	.byte	12,0,2,35,2,0,12,14,229,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11081
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,14,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,14,245,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11255
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,14,136,2,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	456
	.byte	4,0,2,35,3,0,12,14,253,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11429
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,14,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,14,237,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11605
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,14,249,2,16,4,11
	.byte	'PS0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,14,141,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11761
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,14,147,2,16,4,11
	.byte	'reserved_0',0,2
	.word	951
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,14,221,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12094
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR0_Bits',0,14,192,1,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	433
	.byte	30,0,2,35,0,0,12,14,196,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12442
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_Bits',0,14,200,1,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	433
	.byte	30,0,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,14,208,1,16,4,11
	.byte	'RDIS_CTRL',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	456
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	433
	.byte	24,0,2,35,0,0,12,14,204,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12566
	.byte	4,2,35,0,13
	.byte	'B_P21',0
	.word	12650
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR2_Bits',0,14,218,1,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'LVDSR',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'LVDSRL',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	456
	.byte	2,4,2,35,1,11
	.byte	'TDIS_CTRL',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'TX_DIS',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,14,213,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12830
	.byte	4,2,35,0,0,18,76
	.word	456
	.byte	19,75,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,14,82,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,14,132,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13083
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,14,45,16,4,11
	.byte	'EN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,14,252,3,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13170
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,14,229,5,25,128,2,13
	.byte	'OUT',0
	.word	6895
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	7466
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	7585
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2273
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	7800
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	8015
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	8232
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	8452
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2273
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	8766
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	8806
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	9079
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	9395
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	3836
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	9726
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2949
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	10092
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	10378
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	3836
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	10525
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	10694
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	10866
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	11041
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	11215
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	11389
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	11565
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	11721
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	12054
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	12402
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	3836
	.byte	8,3,35,152,1,13
	.byte	'LPCR0',0
	.word	12526
	.byte	4,3,35,160,1,13
	.byte	'LPCR1',0
	.word	12775
	.byte	4,3,35,164,1,13
	.byte	'LPCR2',0
	.word	13034
	.byte	4,3,35,168,1,13
	.byte	'reserved_A4',0
	.word	13074
	.byte	76,3,35,172,1,13
	.byte	'ACCEN1',0
	.word	13130
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	13697
	.byte	4,3,35,252,1,0,14
	.word	13737
	.byte	3
	.word	14340
	.byte	15,13,172,1,9,4,16
	.byte	'IfxPort_State_notChanged',0,0,16
	.byte	'IfxPort_State_high',0,1,16
	.byte	'IfxPort_State_low',0,128,128,4,16
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,13,208,4,17,1,1,5
	.byte	'port',0,13,208,4,44
	.word	14345
	.byte	5
	.byte	'pinIndex',0,13,208,4,56
	.word	456
	.byte	5
	.byte	'action',0,13,208,4,80
	.word	14350
	.byte	6,0,10
	.byte	'_Ifx_DMA_CLC_Bits',0,16,131,4,16,4,11
	.byte	'DISR',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	28,0,2,35,0,0,12,16,160,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14531
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ID_Bits',0,16,155,4,16,4,11
	.byte	'MODREV',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	951
	.byte	16,0,2,35,2,0,12,16,184,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14688
	.byte	4,2,35,0,0,18,20
	.word	456
	.byte	19,19,0,10
	.byte	'_Ifx_DMA_MEMCON_Bits',0,16,163,4,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	2,30,2,35,0,11
	.byte	'INTERR',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'RMWERR',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1050
	.byte	1,26,2,35,0,11
	.byte	'DATAERR',0,4
	.word	1050
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	1050
	.byte	1,24,2,35,0,11
	.byte	'PMIC',0,4
	.word	1050
	.byte	1,23,2,35,0,11
	.byte	'ERRDIS',0,4
	.word	1050
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1050
	.byte	22,0,2,35,0,0,12,16,192,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14819
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN00_Bits',0,16,45,16,4,11
	.byte	'EN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,16,128,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15087
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN01_Bits',0,16,82,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,136,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15657
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN10_Bits',0,16,88,16,4,11
	.byte	'EN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,16,144,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15747
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN11_Bits',0,16,125,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,152,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16317
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN20_Bits',0,16,131,1,16,4,11
	.byte	'EN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,16,160,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16407
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN21_Bits',0,16,168,1,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,168,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16978
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN30_Bits',0,16,174,1,16,4,11
	.byte	'EN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,16,176,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17069
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ACCEN31_Bits',0,16,211,1,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,184,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17640
	.byte	4,2,35,0,0,18,192,1
	.word	456
	.byte	19,191,1,0,10
	.byte	'_Ifx_DMA_BLK_EER_Bits',0,16,233,1,16,4,11
	.byte	'reserved_0',0,2
	.word	951
	.byte	16,0,2,35,0,11
	.byte	'ESER',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'EDER',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	456
	.byte	6,0,2,35,2,11
	.byte	'ERER',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'ELER',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	456
	.byte	5,0,2,35,3,0,12,16,200,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17742
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ERRSR_Bits',0,16,246,1,16,4,11
	.byte	'LEC',0,1
	.word	456
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	951
	.byte	9,0,2,35,0,11
	.byte	'SER',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'DER',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	456
	.byte	2,4,2,35,2,11
	.byte	'SPBER',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'SRIER',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	456
	.byte	2,0,2,35,2,11
	.byte	'RAMER',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'SLLER',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'DLLER',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	456
	.byte	5,0,2,35,3,0,12,16,208,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17966
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_CLRE_Bits',0,16,217,1,16,4,11
	.byte	'reserved_0',0,2
	.word	951
	.byte	16,0,2,35,0,11
	.byte	'CSER',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'CDER',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	456
	.byte	2,4,2,35,2,11
	.byte	'CSPBER',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'CSRIER',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	456
	.byte	2,0,2,35,2,11
	.byte	'CRAMER',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'CSLLER',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'CDLLER',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	456
	.byte	5,0,2,35,3,0,12,16,192,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18258
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_SR_Bits',0,16,161,3,16,4,11
	.byte	'RS',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	456
	.byte	3,4,2,35,0,11
	.byte	'WS',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	951
	.byte	11,0,2,35,0,11
	.byte	'CH',0,1
	.word	456
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	951
	.byte	9,0,2,35,2,0,12,16,216,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18541
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R0_Bits',0,16,193,2,16,4,11
	.byte	'RD00',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'RD01',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'RD02',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'RD03',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,248,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18721
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R1_Bits',0,16,202,2,16,4,11
	.byte	'RD10',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'RD11',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'RD12',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'RD13',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,128,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18856
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R2_Bits',0,16,211,2,16,4,11
	.byte	'RD20',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'RD21',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'RD22',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'RD23',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,136,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18991
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R3_Bits',0,16,220,2,16,4,11
	.byte	'RD30',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'RD31',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'RD32',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'RD33',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,144,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19126
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R4_Bits',0,16,229,2,16,4,11
	.byte	'RD40',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'RD41',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'RD42',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'RD43',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,152,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19261
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R5_Bits',0,16,238,2,16,4,11
	.byte	'RD50',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'RD51',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'RD52',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'RD53',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,160,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19396
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R6_Bits',0,16,247,2,16,4,11
	.byte	'RD60',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'RD61',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'RD62',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'RD63',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,168,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19531
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_R7_Bits',0,16,128,3,16,4,11
	.byte	'RD70',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'RD71',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'RD72',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'RD73',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,176,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19666
	.byte	4,2,35,0,0,18,32
	.word	456
	.byte	19,31,0,10
	.byte	'_Ifx_DMA_BLK_ME_RDCRC_Bits',0,16,137,3,16,4,11
	.byte	'RDCRC',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,184,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19810
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_SDCRC_Bits',0,16,149,3,16,4,11
	.byte	'SDCRC',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,200,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19901
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_SADR_Bits',0,16,143,3,16,4,11
	.byte	'SADR',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,192,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19992
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_DADR_Bits',0,16,187,2,16,4,11
	.byte	'DADR',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,240,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20081
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_ADICR_Bits',0,16,135,2,16,4,11
	.byte	'SMF',0,1
	.word	456
	.byte	3,5,2,35,0,11
	.byte	'INCS',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'DMF',0,1
	.word	456
	.byte	3,1,2,35,0,11
	.byte	'INCD',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'CBLS',0,1
	.word	456
	.byte	4,4,2,35,1,11
	.byte	'CBLD',0,1
	.word	456
	.byte	4,0,2,35,1,11
	.byte	'SHCT',0,1
	.word	456
	.byte	4,4,2,35,2,11
	.byte	'SCBE',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'DCBE',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'STAMP',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'ETRL',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'WRPSE',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'WRPDE',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'INTCT',0,1
	.word	456
	.byte	2,4,2,35,3,11
	.byte	'IRDV',0,1
	.word	456
	.byte	4,0,2,35,3,0,12,16,216,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20170
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_CHCR_Bits',0,16,155,2,16,4,11
	.byte	'TREL',0,2
	.word	951
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'BLKM',0,1
	.word	456
	.byte	3,5,2,35,2,11
	.byte	'RROAT',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'CHMODE',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'CHDW',0,1
	.word	456
	.byte	3,0,2,35,2,11
	.byte	'PATSEL',0,1
	.word	456
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'PRSEL',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'DMAPRIO',0,1
	.word	456
	.byte	2,0,2,35,3,0,12,16,224,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20486
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_SHADR_Bits',0,16,155,3,16,4,11
	.byte	'SHADR',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,208,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20765
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME_CHSR_Bits',0,16,171,2,16,4,11
	.byte	'TCOUNT',0,2
	.word	951
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'LXO',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'WRPS',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'WRPD',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'ICH',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'IPM',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	456
	.byte	2,2,2,35,2,11
	.byte	'BUFFER',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'FROZEN',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,232,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20856
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_BLK_ME',0,16,144,8,25,112,13
	.byte	'SR',0
	.word	18681
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2949
	.byte	12,2,35,4,13
	.byte	'R0',0
	.word	18816
	.byte	4,2,35,16,13
	.byte	'R1',0
	.word	18951
	.byte	4,2,35,20,13
	.byte	'R2',0
	.word	19086
	.byte	4,2,35,24,13
	.byte	'R3',0
	.word	19221
	.byte	4,2,35,28,13
	.byte	'R4',0
	.word	19356
	.byte	4,2,35,32,13
	.byte	'R5',0
	.word	19491
	.byte	4,2,35,36,13
	.byte	'R6',0
	.word	19626
	.byte	4,2,35,40,13
	.byte	'R7',0
	.word	19761
	.byte	4,2,35,44,13
	.byte	'reserved_30',0
	.word	19801
	.byte	32,2,35,48,13
	.byte	'RDCRC',0
	.word	19861
	.byte	4,2,35,80,13
	.byte	'SDCRC',0
	.word	19952
	.byte	4,2,35,84,13
	.byte	'SADR',0
	.word	20041
	.byte	4,2,35,88,13
	.byte	'DADR',0
	.word	20130
	.byte	4,2,35,92,13
	.byte	'ADICR',0
	.word	20446
	.byte	4,2,35,96,13
	.byte	'CHCR',0
	.word	20725
	.byte	4,2,35,100,13
	.byte	'SHADR',0
	.word	20816
	.byte	4,2,35,104,13
	.byte	'CHSR',0
	.word	21089
	.byte	4,2,35,108,0,14
	.word	21129
	.byte	10
	.byte	'_Ifx_DMA_BLK',0,16,178,8,25,128,1,13
	.byte	'EER',0
	.word	17926
	.byte	4,2,35,0,13
	.byte	'ERRSR',0
	.word	18218
	.byte	4,2,35,4,13
	.byte	'CLRE',0
	.word	18501
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2273
	.byte	4,2,35,12,13
	.byte	'ME',0
	.word	21417
	.byte	112,2,35,16,0,14
	.word	21422
	.byte	18,128,31
	.word	456
	.byte	19,255,30,0,14
	.word	21422
	.byte	18,96
	.word	456
	.byte	19,95,0,10
	.byte	'_Ifx_DMA_OTSS_Bits',0,16,185,4,16,4,11
	.byte	'TGS',0,1
	.word	456
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	456
	.byte	3,1,2,35,0,11
	.byte	'BS',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	433
	.byte	24,0,2,35,0,0,12,16,208,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21547
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_ERRINTR_Bits',0,16,141,4,16,4,11
	.byte	'SIT',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	433
	.byte	31,0,2,35,0,0,12,16,168,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21686
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_PRR0_Bits',0,16,194,4,16,4,11
	.byte	'PAT00',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'PAT01',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'PAT02',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'PAT03',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,216,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21792
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_PRR1_Bits',0,16,203,4,16,4,11
	.byte	'PAT10',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'PAT11',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'PAT12',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'PAT13',0,1
	.word	456
	.byte	8,0,2,35,3,0,12,16,224,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21926
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_TIME_Bits',0,16,226,4,16,4,11
	.byte	'COUNT',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,248,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22060
	.byte	4,2,35,0,0,18,236,1
	.word	456
	.byte	19,235,1,0,10
	.byte	'_Ifx_DMA_MODE_Bits',0,16,178,4,16,4,11
	.byte	'MODE',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	433
	.byte	31,0,2,35,0,0,12,16,200,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22154
	.byte	4,2,35,0,0,18,16
	.word	22218
	.byte	19,3,0,18,240,9
	.word	456
	.byte	19,239,9,0,10
	.byte	'_Ifx_DMA_HRR_Bits',0,16,148,4,16,4,11
	.byte	'HRP',0,1
	.word	456
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	433
	.byte	30,0,2,35,0,0,12,16,176,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22278
	.byte	4,2,35,0,0,18,192,1
	.word	22340
	.byte	19,47,0,18,192,2
	.word	456
	.byte	19,191,2,0,10
	.byte	'_Ifx_DMA_SUSENR_Bits',0,16,219,4,16,4,11
	.byte	'SUSEN',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	433
	.byte	31,0,2,35,0,0,12,16,240,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22401
	.byte	4,2,35,0,0,18,192,1
	.word	22468
	.byte	19,47,0,10
	.byte	'_Ifx_DMA_SUSACR_Bits',0,16,212,4,16,4,11
	.byte	'SUSAC',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	433
	.byte	31,0,2,35,0,0,12,16,232,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22518
	.byte	4,2,35,0,0,18,192,1
	.word	22585
	.byte	19,47,0,10
	.byte	'_Ifx_DMA_TSR_Bits',0,16,232,4,16,4,11
	.byte	'RST',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'HTRE',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'TRL',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'CH',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	456
	.byte	4,0,2,35,0,11
	.byte	'HLTREQ',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'HLTACK',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	456
	.byte	6,0,2,35,1,11
	.byte	'ECH',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'DCH',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'CTL',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	456
	.byte	5,0,2,35,2,11
	.byte	'HLTCLR',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	456
	.byte	7,0,2,35,3,0,12,16,128,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22635
	.byte	4,2,35,0,0,18,192,1
	.word	22910
	.byte	19,47,0,10
	.byte	'_Ifx_DMA_CH_RDCRCR_Bits',0,16,235,3,16,4,11
	.byte	'RDCRC',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,128,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22960
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SDCRCR_Bits',0,16,247,3,16,4,11
	.byte	'SDCRC',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,144,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23048
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SADR_Bits',0,16,241,3,16,4,11
	.byte	'SADR',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,136,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23136
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_DADR_Bits',0,16,229,3,16,4,11
	.byte	'DADR',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,248,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23221
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_ADICR_Bits',0,16,172,3,16,4,11
	.byte	'SMF',0,1
	.word	456
	.byte	3,5,2,35,0,11
	.byte	'INCS',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'DMF',0,1
	.word	456
	.byte	3,1,2,35,0,11
	.byte	'INCD',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'CBLS',0,1
	.word	456
	.byte	4,4,2,35,1,11
	.byte	'CBLD',0,1
	.word	456
	.byte	4,0,2,35,1,11
	.byte	'SHCT',0,1
	.word	456
	.byte	4,4,2,35,2,11
	.byte	'SCBE',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'DCBE',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'STAMP',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'ETRL',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'WRPSE',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'WRPDE',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'INTCT',0,1
	.word	456
	.byte	2,4,2,35,3,11
	.byte	'IRDV',0,1
	.word	456
	.byte	4,0,2,35,3,0,12,16,224,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23306
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_CHCFGR_Bits',0,16,192,3,16,4,11
	.byte	'TREL',0,2
	.word	951
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'BLKM',0,1
	.word	456
	.byte	3,5,2,35,2,11
	.byte	'RROAT',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'CHMODE',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'CHDW',0,1
	.word	456
	.byte	3,0,2,35,2,11
	.byte	'PATSEL',0,1
	.word	456
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'PRSEL',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'DMAPRIO',0,1
	.word	456
	.byte	2,0,2,35,3,0,12,16,232,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23618
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_SHADR_Bits',0,16,253,3,16,4,11
	.byte	'SHADR',0,4
	.word	433
	.byte	32,0,2,35,0,0,12,16,152,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23895
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH_CHCSR_Bits',0,16,208,3,16,4,11
	.byte	'TCOUNT',0,2
	.word	951
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'LXO',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'WRPS',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'WRPD',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'ICH',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'IPM',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	456
	.byte	2,2,2,35,2,11
	.byte	'BUFFER',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'FROZEN',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'SWB',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'CWRP',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'CICH',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'SIT',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	456
	.byte	3,1,2,35,3,11
	.byte	'SCH',0,1
	.word	456
	.byte	1,0,2,35,3,0,12,16,240,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23982
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_DMA_CH',0,16,188,8,25,32,13
	.byte	'RDCRCR',0
	.word	23008
	.byte	4,2,35,0,13
	.byte	'SDCRCR',0
	.word	23096
	.byte	4,2,35,4,13
	.byte	'SADR',0
	.word	23181
	.byte	4,2,35,8,13
	.byte	'DADR',0
	.word	23266
	.byte	4,2,35,12,13
	.byte	'ADICR',0
	.word	23578
	.byte	4,2,35,16,13
	.byte	'CHCFGR',0
	.word	23855
	.byte	4,2,35,20,13
	.byte	'SHADR',0
	.word	23942
	.byte	4,2,35,24,13
	.byte	'CHCSR',0
	.word	24289
	.byte	4,2,35,28,0,18,128,12
	.word	24329
	.byte	19,47,0,14
	.word	24469
	.byte	18,128,52
	.word	456
	.byte	19,255,51,0,10
	.byte	'_Ifx_DMA',0,16,211,8,25,128,128,1,13
	.byte	'CLC',0
	.word	14648
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2273
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	14770
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	14810
	.byte	20,2,35,12,13
	.byte	'MEMCON',0
	.word	15047
	.byte	4,2,35,32,13
	.byte	'reserved_24',0
	.word	2682
	.byte	28,2,35,36,13
	.byte	'ACCEN00',0
	.word	15617
	.byte	4,2,35,64,13
	.byte	'ACCEN01',0
	.word	15707
	.byte	4,2,35,68,13
	.byte	'ACCEN10',0
	.word	16277
	.byte	4,2,35,72,13
	.byte	'ACCEN11',0
	.word	16367
	.byte	4,2,35,76,13
	.byte	'ACCEN20',0
	.word	16938
	.byte	4,2,35,80,13
	.byte	'ACCEN21',0
	.word	17029
	.byte	4,2,35,84,13
	.byte	'ACCEN30',0
	.word	17600
	.byte	4,2,35,88,13
	.byte	'ACCEN31',0
	.word	17691
	.byte	4,2,35,92,13
	.byte	'reserved_60',0
	.word	17731
	.byte	192,1,2,35,96,13
	.byte	'BLK0',0
	.word	21517
	.byte	128,1,3,35,160,2,13
	.byte	'reserved_1A0',0
	.word	21522
	.byte	128,31,3,35,160,3,13
	.byte	'BLK1',0
	.word	21533
	.byte	128,1,3,35,160,34,13
	.byte	'reserved_11A0',0
	.word	21538
	.byte	96,3,35,160,35,13
	.byte	'OTSS',0
	.word	21646
	.byte	4,3,35,128,36,13
	.byte	'ERRINTR',0
	.word	21752
	.byte	4,3,35,132,36,13
	.byte	'PRR0',0
	.word	21886
	.byte	4,3,35,136,36,13
	.byte	'PRR1',0
	.word	22020
	.byte	4,3,35,140,36,13
	.byte	'TIME',0
	.word	22103
	.byte	4,3,35,144,36,13
	.byte	'reserved_1214',0
	.word	22143
	.byte	236,1,3,35,148,36,13
	.byte	'MODE',0
	.word	22258
	.byte	16,3,35,128,38,13
	.byte	'reserved_1310',0
	.word	22267
	.byte	240,9,3,35,144,38,13
	.byte	'HRR',0
	.word	22380
	.byte	192,1,3,35,128,48,13
	.byte	'reserved_18C0',0
	.word	22390
	.byte	192,2,3,35,192,49,13
	.byte	'SUSENR',0
	.word	22508
	.byte	192,1,3,35,128,52,13
	.byte	'reserved_1AC0',0
	.word	22390
	.byte	192,2,3,35,192,53,13
	.byte	'SUSACR',0
	.word	22625
	.byte	192,1,3,35,128,56,13
	.byte	'reserved_1CC0',0
	.word	22390
	.byte	192,2,3,35,192,57,13
	.byte	'TSR',0
	.word	22950
	.byte	192,1,3,35,128,60,13
	.byte	'reserved_1EC0',0
	.word	22390
	.byte	192,2,3,35,192,61,13
	.byte	'CH',0
	.word	24479
	.byte	128,12,3,35,128,64,13
	.byte	'reserved_2600',0
	.word	24484
	.byte	128,52,3,35,128,76,0,14
	.word	24495
.L259:
	.byte	3
	.word	25201
	.byte	15,17,105,9,1,16
	.byte	'IfxDma_ChannelId_none',0,127,16
	.byte	'IfxDma_ChannelId_0',0,0,16
	.byte	'IfxDma_ChannelId_1',0,1,16
	.byte	'IfxDma_ChannelId_2',0,2,16
	.byte	'IfxDma_ChannelId_3',0,3,16
	.byte	'IfxDma_ChannelId_4',0,4,16
	.byte	'IfxDma_ChannelId_5',0,5,16
	.byte	'IfxDma_ChannelId_6',0,6,16
	.byte	'IfxDma_ChannelId_7',0,7,16
	.byte	'IfxDma_ChannelId_8',0,8,16
	.byte	'IfxDma_ChannelId_9',0,9,16
	.byte	'IfxDma_ChannelId_10',0,10,16
	.byte	'IfxDma_ChannelId_11',0,11,16
	.byte	'IfxDma_ChannelId_12',0,12,16
	.byte	'IfxDma_ChannelId_13',0,13,16
	.byte	'IfxDma_ChannelId_14',0,14,16
	.byte	'IfxDma_ChannelId_15',0,15,16
	.byte	'IfxDma_ChannelId_16',0,16,16
	.byte	'IfxDma_ChannelId_17',0,17,16
	.byte	'IfxDma_ChannelId_18',0,18,16
	.byte	'IfxDma_ChannelId_19',0,19,16
	.byte	'IfxDma_ChannelId_20',0,20,16
	.byte	'IfxDma_ChannelId_21',0,21,16
	.byte	'IfxDma_ChannelId_22',0,22,16
	.byte	'IfxDma_ChannelId_23',0,23,16
	.byte	'IfxDma_ChannelId_24',0,24,16
	.byte	'IfxDma_ChannelId_25',0,25,16
	.byte	'IfxDma_ChannelId_26',0,26,16
	.byte	'IfxDma_ChannelId_27',0,27,16
	.byte	'IfxDma_ChannelId_28',0,28,16
	.byte	'IfxDma_ChannelId_29',0,29,16
	.byte	'IfxDma_ChannelId_30',0,30,16
	.byte	'IfxDma_ChannelId_31',0,31,16
	.byte	'IfxDma_ChannelId_32',0,32,16
	.byte	'IfxDma_ChannelId_33',0,33,16
	.byte	'IfxDma_ChannelId_34',0,34,16
	.byte	'IfxDma_ChannelId_35',0,35,16
	.byte	'IfxDma_ChannelId_36',0,36,16
	.byte	'IfxDma_ChannelId_37',0,37,16
	.byte	'IfxDma_ChannelId_38',0,38,16
	.byte	'IfxDma_ChannelId_39',0,39,16
	.byte	'IfxDma_ChannelId_40',0,40,16
	.byte	'IfxDma_ChannelId_41',0,41,16
	.byte	'IfxDma_ChannelId_42',0,42,16
	.byte	'IfxDma_ChannelId_43',0,43,16
	.byte	'IfxDma_ChannelId_44',0,44,16
	.byte	'IfxDma_ChannelId_45',0,45,16
	.byte	'IfxDma_ChannelId_46',0,46,16
	.byte	'IfxDma_ChannelId_47',0,47,0,8
	.byte	'IfxDma_isChannelTransactionPending',0,3,15,148,12,20
	.word	456
	.byte	1,1,5
	.byte	'dma',0,15,148,12,64
	.word	25206
	.byte	5
	.byte	'channelId',0,15,148,12,86
	.word	25211
	.byte	6,0
.L365:
	.byte	4
	.byte	'IfxDma_startChannelTransaction',0,3,15,147,13,17,1,1
.L368:
	.byte	5
	.byte	'dma',0,15,147,13,57
	.word	25206
.L370:
	.byte	5
	.byte	'channelId',0,15,147,13,79
	.word	25211
.L372:
	.byte	6,0
.L337:
	.byte	4
	.byte	'IfxDma_setChannelDestinationAddress',0,3,15,178,12,17,1,1
.L340:
	.byte	5
	.byte	'dma',0,15,178,12,62
	.word	25206
.L342:
	.byte	5
	.byte	'channelId',0,15,178,12,84
	.word	25211
.L344:
	.byte	5
	.byte	'address',0,15,178,12,101
	.word	347
.L346:
	.byte	6,0,20
	.word	341
.L231:
	.byte	3
	.word	26536
.L377:
	.byte	4
	.byte	'IfxDma_setChannelSourceAddress',0,3,15,237,12,17,1,1
.L380:
	.byte	5
	.byte	'dma',0,15,237,12,57
	.word	25206
.L382:
	.byte	5
	.byte	'channelId',0,15,237,12,79
	.word	25211
.L384:
	.byte	5
	.byte	'address',0,15,237,12,102
	.word	26541
.L386:
	.byte	6,0
.L347:
	.byte	4
	.byte	'IfxDma_setChannelTransferCount',0,3,15,132,13,17,1,1
.L350:
	.byte	5
	.byte	'dma',0,15,132,13,57
	.word	25206
.L352:
	.byte	5
	.byte	'channelId',0,15,132,13,79
	.word	25211
.L354:
	.byte	5
	.byte	'transferCount',0,15,132,13,97
	.word	6388
.L356:
	.byte	6,0,4
	.byte	'IfxDma_clearChannelInterrupt',0,3,15,241,9,17,1,1,5
	.byte	'dma',0,15,241,9,55
	.word	25206
	.byte	5
	.byte	'channelId',0,15,241,9,77
	.word	25211
	.byte	6,0,8
	.byte	'IfxDma_getAndClearChannelInterrupt',0,3,15,226,10,20
	.word	456
	.byte	1,1,5
	.byte	'dma',0,15,226,10,64
	.word	25206
	.byte	5
	.byte	'channelId',0,15,226,10,86
	.word	25211
	.byte	6,0,8
	.byte	'IfxDma_getChannelInterrupt',0,3,15,170,11,20
	.word	456
	.byte	1,1,5
	.byte	'dma',0,15,170,11,56
	.word	25206
	.byte	5
	.byte	'channelId',0,15,170,11,78
	.word	25211
	.byte	6,0
.L283:
	.byte	8
	.byte	'IfxDma_getSrcPointer',0,3,15,250,11,35
	.word	807
	.byte	1,1
.L284:
	.byte	5
	.byte	'dma',0,15,250,11,65
	.word	25206
.L286:
	.byte	5
	.byte	'channelId',0,15,250,11,87
	.word	25211
.L288:
	.byte	6,0
.L246:
	.byte	4
	.byte	'IfxFft_Fft_triggerEngine',0,3,18,199,3,17,1,1
.L249:
	.byte	5
	.byte	'fft',0,18,199,3,51
	.word	4144
.L251:
	.byte	5
	.byte	'csr',0,18,199,3,63
	.word	6388
.L253:
	.byte	6,0,20
	.word	449
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	27085
	.byte	0,14
	.word	433
	.byte	3
	.word	433
	.byte	23
	.byte	'__cmpswapw',0
	.word	27127
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	27132
	.byte	24
	.byte	'value',0
	.word	433
	.byte	24
	.byte	'compare',0
	.word	433
	.byte	0,25
	.byte	'__debug',0,1,1,1,1,26
	.word	177
	.byte	27
	.word	203
	.byte	6,0,26
	.word	238
	.byte	27
	.word	270
	.byte	6,0,26
	.word	283
	.byte	6,0,26
	.word	352
	.byte	27
	.word	371
	.byte	6,0,26
	.word	387
	.byte	27
	.word	402
	.byte	27
	.word	416
	.byte	6,0,26
	.word	812
	.byte	27
	.word	840
	.byte	6,0,26
	.word	855
	.byte	27
	.word	877
	.byte	6,0,26
	.word	973
	.byte	27
	.word	993
	.byte	27
	.word	1006
	.byte	27
	.word	1028
	.byte	17,28
	.word	812
	.byte	27
	.word	840
	.byte	29
	.word	853
	.byte	0,6,0,0,26
	.word	1750
	.byte	27
	.word	1790
	.byte	27
	.word	1808
	.byte	6,0,26
	.word	1828
	.byte	27
	.word	1871
	.byte	6,0,26
	.word	1891
	.byte	27
	.word	1929
	.byte	27
	.word	1947
	.byte	6,0,26
	.word	1967
	.byte	27
	.word	2008
	.byte	6,0,30
	.byte	'IfxScuWdt_clearCpuEndinit',0,6,217,1,17,1,1,1,1,5
	.byte	'password',0,6,217,1,50
	.word	951
	.byte	0,30
	.byte	'IfxScuWdt_setCpuEndinit',0,6,239,1,17,1,1,1,1,5
	.byte	'password',0,6,239,1,48
	.word	951
	.byte	0,26
	.word	2028
	.byte	27
	.word	2079
	.byte	6,0,26
	.word	2099
	.byte	6,0,31
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,6,129,3,19
	.word	951
	.byte	1,1,1,1,26
	.word	5808
	.byte	27
	.word	5836
	.byte	27
	.word	5849
	.byte	6,0,26
	.word	6026
	.byte	27
	.word	6063
	.byte	6,0,26
	.word	6081
	.byte	27
	.word	6118
	.byte	6,0,26
	.word	6133
	.byte	27
	.word	6168
	.byte	6,0,26
	.word	6183
	.byte	27
	.word	6218
	.byte	6,0,26
	.word	6312
	.byte	6,0,26
	.word	6346
	.byte	6,0,26
	.word	6409
	.byte	27
	.word	6450
	.byte	6,0,26
	.word	6469
	.byte	27
	.word	6524
	.byte	6,0,26
	.word	6543
	.byte	27
	.word	6583
	.byte	27
	.word	6600
	.byte	17,6,0,0,26
	.word	14453
	.byte	27
	.word	14481
	.byte	27
	.word	14495
	.byte	27
	.word	14513
	.byte	6,0,26
	.word	26287
	.byte	27
	.word	26334
	.byte	27
	.word	26347
	.byte	6,0,26
	.word	26368
	.byte	27
	.word	26407
	.byte	27
	.word	26420
	.byte	6,0,26
	.word	26441
	.byte	27
	.word	26485
	.byte	27
	.word	26498
	.byte	27
	.word	26517
	.byte	6,0,26
	.word	26546
	.byte	27
	.word	26585
	.byte	27
	.word	26598
	.byte	27
	.word	26617
	.byte	6,0,26
	.word	26636
	.byte	27
	.word	26675
	.byte	27
	.word	26688
	.byte	27
	.word	26707
	.byte	6,0,26
	.word	26732
	.byte	27
	.word	26769
	.byte	27
	.word	26782
	.byte	6,0,26
	.word	26803
	.byte	27
	.word	26850
	.byte	27
	.word	26863
	.byte	6,0,26
	.word	26884
	.byte	27
	.word	26923
	.byte	27
	.word	26936
	.byte	6,0,26
	.word	26957
	.byte	27
	.word	26990
	.byte	27
	.word	27003
	.byte	6,0
.L266:
	.byte	32,19,207,3,9,4,13
	.byte	'dma',0
	.word	25206
	.byte	4,2,35,0,0,3
	.word	27867
	.byte	30
	.byte	'IfxDma_Dma_createModuleHandle',0,19,165,4,17,1,1,1,1,5
	.byte	'dmaHandle',0,19,165,4,59
	.word	27887
	.byte	5
	.byte	'dma',0,19,165,4,79
	.word	25206
	.byte	0,14
	.word	24329
	.byte	3
	.word	27964
	.byte	32,19,218,3,9,12,13
	.byte	'dma',0
	.word	25206
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	25211
	.byte	1,2,35,4,13
	.byte	'channel',0
	.word	27969
	.byte	4,2,35,8,0
.L262:
	.byte	3
	.word	27974
	.byte	15,15,160,1,9,1,16
	.byte	'IfxDma_ChannelMove_1',0,0,16
	.byte	'IfxDma_ChannelMove_2',0,1,16
	.byte	'IfxDma_ChannelMove_4',0,2,16
	.byte	'IfxDma_ChannelMove_8',0,3,16
	.byte	'IfxDma_ChannelMove_16',0,4,16
	.byte	'IfxDma_ChannelMove_3',0,5,16
	.byte	'IfxDma_ChannelMove_5',0,6,16
	.byte	'IfxDma_ChannelMove_9',0,7,0,15,15,221,1,9,1,16
	.byte	'IfxDma_ChannelRequestMode_oneTransferPerRequest',0,0,16
	.byte	'IfxDma_ChannelRequestMode_completeTransactionPerRequest',0,1,0,15,15,188,1,9,1,16
	.byte	'IfxDma_ChannelOperationMode_single',0,0,16
	.byte	'IfxDma_ChannelOperationMode_continuous',0,1,0,15,15,175,1,9,1,16
	.byte	'IfxDma_ChannelMoveSize_8bit',0,0,16
	.byte	'IfxDma_ChannelMoveSize_16bit',0,1,16
	.byte	'IfxDma_ChannelMoveSize_32bit',0,2,16
	.byte	'IfxDma_ChannelMoveSize_64bit',0,3,16
	.byte	'IfxDma_ChannelMoveSize_128bit',0,4,16
	.byte	'IfxDma_ChannelMoveSize_256bit',0,5,0,15,15,197,1,9,1,16
	.byte	'IfxDma_ChannelPattern_0_disable',0,0,16
	.byte	'IfxDma_ChannelPattern_0_mode1',0,1,16
	.byte	'IfxDma_ChannelPattern_0_mode2',0,2,16
	.byte	'IfxDma_ChannelPattern_0_mode3',0,3,16
	.byte	'IfxDma_ChannelPattern_1_disable',0,4,16
	.byte	'IfxDma_ChannelPattern_1_mode1',0,5,16
	.byte	'IfxDma_ChannelPattern_1_mode2',0,6,16
	.byte	'IfxDma_ChannelPattern_1_mode3',0,7,0,15,15,230,1,9,1,16
	.byte	'IfxDma_ChannelRequestSource_peripheral',0,0,16
	.byte	'IfxDma_ChannelRequestSource_daisyChain',0,1,0,15,15,94,9,1,16
	.byte	'IfxDma_ChannelBusPriority_low',0,0,16
	.byte	'IfxDma_ChannelBusPriority_medium',0,1,16
	.byte	'IfxDma_ChannelBusPriority_high',0,2,0,15,15,136,1,9,1,16
	.byte	'IfxDma_ChannelIncrementStep_1',0,0,16
	.byte	'IfxDma_ChannelIncrementStep_2',0,1,16
	.byte	'IfxDma_ChannelIncrementStep_4',0,2,16
	.byte	'IfxDma_ChannelIncrementStep_8',0,3,16
	.byte	'IfxDma_ChannelIncrementStep_16',0,4,16
	.byte	'IfxDma_ChannelIncrementStep_32',0,5,16
	.byte	'IfxDma_ChannelIncrementStep_64',0,6,16
	.byte	'IfxDma_ChannelIncrementStep_128',0,7,0,15,15,127,9,1,16
	.byte	'IfxDma_ChannelIncrementDirection_negative',0,0,16
	.byte	'IfxDma_ChannelIncrementDirection_positive',0,1,0,15,15,104,9,1,16
	.byte	'IfxDma_ChannelIncrementCircular_none',0,0,16
	.byte	'IfxDma_ChannelIncrementCircular_2',0,1,16
	.byte	'IfxDma_ChannelIncrementCircular_4',0,2,16
	.byte	'IfxDma_ChannelIncrementCircular_8',0,3,16
	.byte	'IfxDma_ChannelIncrementCircular_16',0,4,16
	.byte	'IfxDma_ChannelIncrementCircular_32',0,5,16
	.byte	'IfxDma_ChannelIncrementCircular_64',0,6,16
	.byte	'IfxDma_ChannelIncrementCircular_128',0,7,16
	.byte	'IfxDma_ChannelIncrementCircular_256',0,8,16
	.byte	'IfxDma_ChannelIncrementCircular_512',0,9,16
	.byte	'IfxDma_ChannelIncrementCircular_1024',0,10,16
	.byte	'IfxDma_ChannelIncrementCircular_2048',0,11,16
	.byte	'IfxDma_ChannelIncrementCircular_4096',0,12,16
	.byte	'IfxDma_ChannelIncrementCircular_8192',0,13,16
	.byte	'IfxDma_ChannelIncrementCircular_16384',0,14,16
	.byte	'IfxDma_ChannelIncrementCircular_32768',0,15,0,15,15,239,1,9,1,16
	.byte	'IfxDma_ChannelShadow_none',0,0,16
	.byte	'IfxDma_ChannelShadow_src',0,1,16
	.byte	'IfxDma_ChannelShadow_dst',0,2,16
	.byte	'IfxDma_ChannelShadow_srcDirectWrite',0,5,16
	.byte	'IfxDma_ChannelShadow_dstDirectWrite',0,6,16
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingSwSwitch',0,8,16
	.byte	'IfxDma_ChannelShadow_doubleSourceBufferingHwSwSwitch',0,9,16
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingSwSwitch',0,10,16
	.byte	'IfxDma_ChannelShadow_doubleDestinationBufferingHwSwSwitch',0,11,16
	.byte	'IfxDma_ChannelShadow_linkedList',0,12,16
	.byte	'IfxDma_ChannelShadow_accumulatedLinkedList',0,13,16
	.byte	'IfxDma_ChannelShadow_safeLinkedList',0,14,16
	.byte	'IfxDma_ChannelShadow_conditionalLinkedList',0,15,0,15,15,151,1,9,1,16
	.byte	'IfxDma_ChannelInterruptControl_thresholdLimitMatch',0,0,16
	.byte	'IfxDma_ChannelInterruptControl_transferCountDecremented',0,1,0
.L276:
	.byte	32,19,227,3,9,56,13
	.byte	'module',0
	.word	27887
	.byte	4,2,35,0,13
	.byte	'channelId',0
	.word	25211
	.byte	1,2,35,4,13
	.byte	'sourceAddress',0
	.word	6388
	.byte	4,2,35,6,13
	.byte	'destinationAddress',0
	.word	6388
	.byte	4,2,35,10,13
	.byte	'shadowAddress',0
	.word	6388
	.byte	4,2,35,14,13
	.byte	'readDataCrc',0
	.word	6388
	.byte	4,2,35,18,13
	.byte	'sourceDestinationAddressCrc',0
	.word	6388
	.byte	4,2,35,22,13
	.byte	'transferCount',0
	.word	951
	.byte	2,2,35,26,13
	.byte	'blockMode',0
	.word	28035
	.byte	1,2,35,28,13
	.byte	'requestMode',0
	.word	28227
	.byte	1,2,35,29,13
	.byte	'operationMode',0
	.word	28342
	.byte	1,2,35,30,13
	.byte	'moveSize',0
	.word	28427
	.byte	1,2,35,31,13
	.byte	'pattern',0
	.word	28621
	.byte	1,2,35,32,13
	.byte	'requestSource',0
	.word	28888
	.byte	1,2,35,33,13
	.byte	'busPriority',0
	.word	28977
	.byte	1,2,35,34,13
	.byte	'hardwareRequestEnabled',0
	.word	456
	.byte	1,2,35,35,13
	.byte	'sourceAddressIncrementStep',0
	.word	29083
	.byte	1,2,35,36,13
	.byte	'sourceAddressIncrementDirection',0
	.word	29351
	.byte	1,2,35,37,13
	.byte	'sourceAddressCircularRange',0
	.word	29445
	.byte	1,2,35,38,13
	.byte	'destinationAddressIncrementStep',0
	.word	29083
	.byte	1,2,35,39,13
	.byte	'destinationAddressIncrementDirection',0
	.word	29351
	.byte	1,2,35,40,13
	.byte	'destinationAddressCircularRange',0
	.word	29445
	.byte	1,2,35,41,13
	.byte	'shadowControl',0
	.word	30059
	.byte	1,2,35,42,13
	.byte	'sourceCircularBufferEnabled',0
	.word	456
	.byte	1,2,35,43,13
	.byte	'destinationCircularBufferEnabled',0
	.word	456
	.byte	1,2,35,44,13
	.byte	'timestampEnabled',0
	.word	456
	.byte	1,2,35,45,13
	.byte	'wrapSourceInterruptEnabled',0
	.word	456
	.byte	1,2,35,46,13
	.byte	'wrapDestinationInterruptEnabled',0
	.word	456
	.byte	1,2,35,47,13
	.byte	'channelInterruptEnabled',0
	.word	456
	.byte	1,2,35,48,13
	.byte	'channelInterruptControl',0
	.word	30612
	.byte	1,2,35,49,13
	.byte	'interruptRaiseThreshold',0
	.word	456
	.byte	1,2,35,50,13
	.byte	'transactionRequestLostInterruptEnabled',0
	.word	456
	.byte	1,2,35,51,13
	.byte	'channelInterruptPriority',0
	.word	951
	.byte	2,2,35,52,13
	.byte	'channelInterruptTypeOfService',0
	.word	892
	.byte	1,2,35,54,0,20
	.word	30730
	.byte	3
	.word	31767
	.byte	30
	.byte	'IfxDma_Dma_initChannel',0,19,211,4,17,1,1,1,1,5
	.byte	'channel',0,19,211,4,60
	.word	28030
	.byte	5
	.byte	'config',0,19,211,4,101
	.word	31772
	.byte	0,3
	.word	30730
	.byte	30
	.byte	'IfxDma_Dma_initChannelConfig',0,19,221,4,17,1,1,1,1,5
	.byte	'config',0,19,221,4,72
	.word	31843
	.byte	5
	.byte	'dma',0,19,221,4,92
	.word	27887
	.byte	0,32,18,130,2,9,8,13
	.byte	'input',0
	.word	951
	.byte	2,2,35,0,13
	.byte	'expect',0
	.word	951
	.byte	2,2,35,2,13
	.byte	'output',0
	.word	951
	.byte	2,2,35,4,13
	.byte	'result',0
	.word	951
	.byte	2,2,35,6,0,10
	.byte	'IfxFft_Fft_Job_s',0,18,175,2,8,28,13
	.byte	'fft',0
	.word	.L173-.L87
	.byte	4,2,35,0,13
	.byte	'csr',0
	.word	2642
	.byte	4,2,35,4,13
	.byte	'inputPtr',0
	.word	26541
	.byte	4,2,35,8,13
	.byte	'outputPtr',0
	.word	347
	.byte	4,2,35,12,13
	.byte	'count64',0
	.word	31916
	.byte	8,2,35,16,13
	.byte	'nextJob',0
	.word	.L202-.L87
	.byte	4,2,35,24,0
.L202:
	.byte	3
	.word	31986
	.byte	18,8
	.word	32107
	.byte	19,1,0,32,18,241,1,9,72,13
	.byte	'fft',0
	.word	4144
	.byte	4,2,35,0,13
	.byte	'lmu',0
	.word	5803
	.byte	4,2,35,4,13
	.byte	'inputDmaChannel',0
	.word	27974
	.byte	12,2,35,8,13
	.byte	'outputDmaChannel',0
	.word	27974
	.byte	12,2,35,20,13
	.byte	'discardDmaChannel',0
	.word	27974
	.byte	12,2,35,32,13
	.byte	'flags',0
	.word	6388
	.byte	4,2,35,44,13
	.byte	'inputIdx',0
	.word	6388
	.byte	4,2,35,48,13
	.byte	'intraIdx',0
	.word	6388
	.byte	4,2,35,52,13
	.byte	'srcrOutDis',0
	.word	473
	.byte	4,2,35,56,13
	.byte	'srcrOutEnd',0
	.word	473
	.byte	4,2,35,60,13
	.byte	'job',0
	.word	32112
	.byte	8,2,35,64,0
.L173:
	.byte	3
	.word	32121
	.byte	32,18,144,2,9,20,13
	.byte	'fft',0
	.word	4144
	.byte	4,2,35,0,13
	.byte	'lmu',0
	.word	5803
	.byte	4,2,35,4,13
	.byte	'inputPriority',0
	.word	951
	.byte	2,2,35,8,13
	.byte	'intraPriority',0
	.word	951
	.byte	2,2,35,10,13
	.byte	'outputPriority',0
	.word	951
	.byte	2,2,35,12,13
	.byte	'typeOfService',0
	.word	892
	.byte	1,2,35,14,13
	.byte	'inputDmaChannelId',0
	.word	25211
	.byte	1,2,35,15,13
	.byte	'outputDmaChannelId',0
	.word	25211
	.byte	1,2,35,16,13
	.byte	'discardDmaChannelId',0
	.word	25211
	.byte	1,2,35,17,0,20
	.word	32341
.L175:
	.byte	3
	.word	32551
.L196:
	.byte	3
	.word	32341
	.byte	15,8,73,9,1,16
	.byte	'IfxFft_Input_complexSInt32',0,0,16
	.byte	'IfxFft_Input_realSInt32',0,1,16
	.byte	'IfxFft_Input_complexSInt16',0,2,16
	.byte	'IfxFft_Input_realSInt16',0,3,0,15,8,109,9,1,16
	.byte	'IfxFft_Output_complexSInt32',0,0,16
	.byte	'IfxFft_Output_complexSInt16',0,1,0,15,8,100,9,1,16
	.byte	'IfxFft_Operation_fft',0,0,16
	.byte	'IfxFft_Operation_ifft',0,1,0,32,18,159,2,9,24,13
	.byte	'fft',0
	.word	32336
	.byte	4,2,35,0,13
	.byte	'inputLength',0
	.word	951
	.byte	2,2,35,4,13
	.byte	'outputLength',0
	.word	951
	.byte	2,2,35,6,13
	.byte	'fftLength',0
	.word	5864
	.byte	1,2,35,8,13
	.byte	'inputFormat',0
	.word	32566
	.byte	1,2,35,9,13
	.byte	'outputFormat',0
	.word	32682
	.byte	1,2,35,10,13
	.byte	'operation',0
	.word	32748
	.byte	1,2,35,11,13
	.byte	'useWindowFunction',0
	.word	456
	.byte	1,2,35,12,13
	.byte	'inputPtr',0
	.word	26541
	.byte	4,2,35,16,13
	.byte	'outputPtr',0
	.word	347
	.byte	4,2,35,20,0,20
	.word	32801
.L214:
	.byte	3
	.word	33009
.L217:
	.byte	3
	.word	32801
	.byte	20
	.word	315
.L222:
	.byte	3
	.word	33024
.L227:
	.byte	3
	.word	315
	.byte	26
	.word	27024
	.byte	27
	.word	27057
	.byte	27
	.word	27070
	.byte	6,0
.L332:
	.byte	7
	.byte	'short int',0,2,5,33
	.byte	'__wchar_t',0,20,1,1
	.word	33056
	.byte	33
	.byte	'__size_t',0,20,1,1
	.word	433
	.byte	33
	.byte	'__ptrdiff_t',0,20,1,1
	.word	449
	.byte	34,1,3
	.word	33124
	.byte	33
	.byte	'__codeptr',0,20,1,1
	.word	33126
	.byte	33
	.byte	'boolean',0,21,101,29
	.word	456
	.byte	33
	.byte	'uint8',0,21,105,29
	.word	456
	.byte	33
	.byte	'uint16',0,21,109,29
	.word	951
	.byte	33
	.byte	'uint32',0,21,113,29
	.word	6388
	.byte	33
	.byte	'uint64',0,21,118,29
	.word	315
	.byte	33
	.byte	'sint16',0,21,126,29
	.word	33056
	.byte	7
	.byte	'long int',0,4,5,33
	.byte	'sint32',0,21,131,1,29
	.word	33239
	.byte	7
	.byte	'long long int',0,8,5,33
	.byte	'sint64',0,21,138,1,29
	.word	33267
	.byte	33
	.byte	'float32',0,21,167,1,29
	.word	229
	.byte	33
	.byte	'pvoid',0,22,57,28
	.word	347
	.byte	33
	.byte	'Ifx_TickTime',0,22,79,28
	.word	33267
	.byte	33
	.byte	'Ifx_Priority',0,22,103,16
	.word	951
	.byte	15,22,130,1,9,1,16
	.byte	'Ifx_RxSel_a',0,0,16
	.byte	'Ifx_RxSel_b',0,1,16
	.byte	'Ifx_RxSel_c',0,2,16
	.byte	'Ifx_RxSel_d',0,3,16
	.byte	'Ifx_RxSel_e',0,4,16
	.byte	'Ifx_RxSel_f',0,5,16
	.byte	'Ifx_RxSel_g',0,6,16
	.byte	'Ifx_RxSel_h',0,7,0,33
	.byte	'Ifx_RxSel',0,22,140,1,3
	.word	33373
	.byte	33
	.byte	'IfxSrc_Tos',0,5,74,3
	.word	892
	.byte	33
	.byte	'Ifx_SRC_SRCR_Bits',0,4,62,3
	.word	473
	.byte	33
	.byte	'Ifx_SRC_SRCR',0,4,75,3
	.word	763
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,4,86,25,4,13
	.byte	'SR',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	33577
	.byte	33
	.byte	'Ifx_SRC_AGBT',0,4,89,3
	.word	33609
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,4,92,25,12,13
	.byte	'TX',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	763
	.byte	4,2,35,8,0,14
	.word	33635
	.byte	33
	.byte	'Ifx_SRC_ASCLIN',0,4,97,3
	.word	33694
	.byte	10
	.byte	'_Ifx_SRC_BCUSPB',0,4,100,25,4,13
	.byte	'SBSRC',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	33722
	.byte	33
	.byte	'Ifx_SRC_BCUSPB',0,4,103,3
	.word	33759
	.byte	18,64
	.word	763
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_CAN',0,4,106,25,64,13
	.byte	'INT',0
	.word	33787
	.byte	64,2,35,0,0,14
	.word	33796
	.byte	33
	.byte	'Ifx_SRC_CAN',0,4,109,3
	.word	33828
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,4,112,25,16,13
	.byte	'SR0',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	763
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	763
	.byte	4,2,35,12,0,14
	.word	33853
	.byte	33
	.byte	'Ifx_SRC_CCU6',0,4,118,3
	.word	33925
	.byte	18,8
	.word	763
	.byte	19,1,0,10
	.byte	'_Ifx_SRC_CERBERUS',0,4,121,25,8,13
	.byte	'SR',0
	.word	33951
	.byte	8,2,35,0,0,14
	.word	33960
	.byte	33
	.byte	'Ifx_SRC_CERBERUS',0,4,124,3
	.word	33996
	.byte	10
	.byte	'_Ifx_SRC_CIF',0,4,127,25,16,13
	.byte	'MI',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'MIEP',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'ISP',0
	.word	763
	.byte	4,2,35,8,13
	.byte	'MJPEG',0
	.word	763
	.byte	4,2,35,12,0,14
	.word	34026
	.byte	33
	.byte	'Ifx_SRC_CIF',0,4,133,1,3
	.word	34099
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,4,136,1,25,4,13
	.byte	'SBSRC',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	34125
	.byte	33
	.byte	'Ifx_SRC_CPU',0,4,139,1,3
	.word	34160
	.byte	18,192,1
	.word	763
	.byte	19,47,0,10
	.byte	'_Ifx_SRC_DMA',0,4,142,1,25,208,1,13
	.byte	'ERR',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2949
	.byte	12,2,35,4,13
	.byte	'CH',0
	.word	34186
	.byte	192,1,2,35,16,0,14
	.word	34196
	.byte	33
	.byte	'Ifx_SRC_DMA',0,4,147,1,3
	.word	34263
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,4,150,1,25,8,13
	.byte	'SRM',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	763
	.byte	4,2,35,4,0,14
	.word	34289
	.byte	33
	.byte	'Ifx_SRC_DSADC',0,4,154,1,3
	.word	34337
	.byte	10
	.byte	'_Ifx_SRC_EMEM',0,4,157,1,25,4,13
	.byte	'SR',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	34365
	.byte	33
	.byte	'Ifx_SRC_EMEM',0,4,160,1,3
	.word	34398
	.byte	18,40
	.word	456
	.byte	19,39,0,10
	.byte	'_Ifx_SRC_ERAY',0,4,163,1,25,80,13
	.byte	'INT',0
	.word	33951
	.byte	8,2,35,0,13
	.byte	'TINT',0
	.word	33951
	.byte	8,2,35,8,13
	.byte	'NDAT',0
	.word	33951
	.byte	8,2,35,16,13
	.byte	'MBSC',0
	.word	33951
	.byte	8,2,35,24,13
	.byte	'OBUSY',0
	.word	763
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	763
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	34425
	.byte	40,2,35,40,0,14
	.word	34434
	.byte	33
	.byte	'Ifx_SRC_ERAY',0,4,172,1,3
	.word	34561
	.byte	10
	.byte	'_Ifx_SRC_ETH',0,4,175,1,25,4,13
	.byte	'SR',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	34588
	.byte	33
	.byte	'Ifx_SRC_ETH',0,4,178,1,3
	.word	34620
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,4,181,1,25,4,13
	.byte	'SR',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	34646
	.byte	33
	.byte	'Ifx_SRC_FCE',0,4,184,1,3
	.word	34678
	.byte	10
	.byte	'_Ifx_SRC_FFT',0,4,187,1,25,12,13
	.byte	'DONE',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'RFS',0
	.word	763
	.byte	4,2,35,8,0,14
	.word	34704
	.byte	33
	.byte	'Ifx_SRC_FFT',0,4,192,1,3
	.word	34764
	.byte	18,16
	.word	456
	.byte	19,15,0,10
	.byte	'_Ifx_SRC_GPSR',0,4,195,1,25,32,13
	.byte	'SR0',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	763
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	763
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	34790
	.byte	16,2,35,16,0,14
	.word	34799
	.byte	33
	.byte	'Ifx_SRC_GPSR',0,4,202,1,3
	.word	34893
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,4,205,1,25,48,13
	.byte	'CIRQ',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	763
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	763
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	763
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	763
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	8806
	.byte	24,2,35,24,0,14
	.word	34920
	.byte	33
	.byte	'Ifx_SRC_GPT12',0,4,214,1,3
	.word	35037
	.byte	18,12
	.word	763
	.byte	19,2,0,18,32
	.word	763
	.byte	19,7,0,18,32
	.word	35074
	.byte	19,0,0,18,88
	.word	456
	.byte	19,87,0,18,108
	.word	763
	.byte	19,26,0,18,96
	.word	35074
	.byte	19,2,0,18,160,3
	.word	456
	.byte	19,159,3,0,18,64
	.word	35074
	.byte	19,1,0,18,192,3
	.word	456
	.byte	19,191,3,0,18,16
	.word	763
	.byte	19,3,0,18,64
	.word	35150
	.byte	19,3,0,10
	.byte	'_Ifx_SRC_GTM',0,4,217,1,25,204,18,13
	.byte	'AEIIRQ',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'ARUIRQ',0
	.word	35065
	.byte	12,2,35,4,13
	.byte	'reserved_10',0
	.word	2273
	.byte	4,2,35,16,13
	.byte	'BRCIRQ',0
	.word	763
	.byte	4,2,35,20,13
	.byte	'CMPIRQ',0
	.word	763
	.byte	4,2,35,24,13
	.byte	'SPEIRQ',0
	.word	33951
	.byte	8,2,35,28,13
	.byte	'reserved_24',0
	.word	3836
	.byte	8,2,35,36,13
	.byte	'PSM',0
	.word	35083
	.byte	32,2,35,44,13
	.byte	'reserved_4C',0
	.word	35092
	.byte	88,2,35,76,13
	.byte	'DPLL',0
	.word	35101
	.byte	108,3,35,164,1,13
	.byte	'reserved_110',0
	.word	21538
	.byte	96,3,35,144,2,13
	.byte	'ERR',0
	.word	763
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	2949
	.byte	12,3,35,244,2,13
	.byte	'TIM',0
	.word	35110
	.byte	96,3,35,128,3,13
	.byte	'reserved_1E0',0
	.word	35119
	.byte	160,3,3,35,224,3,13
	.byte	'MCS',0
	.word	35110
	.byte	96,3,35,128,7,13
	.byte	'reserved_3E0',0
	.word	35119
	.byte	160,3,3,35,224,7,13
	.byte	'TOM',0
	.word	35130
	.byte	64,3,35,128,11,13
	.byte	'reserved_5C0',0
	.word	35139
	.byte	192,3,3,35,192,11,13
	.byte	'ATOM',0
	.word	35159
	.byte	64,3,35,128,15,13
	.byte	'reserved_7C0',0
	.word	22390
	.byte	192,2,3,35,192,15,13
	.byte	'MCSW0',0
	.word	35065
	.byte	12,3,35,128,18,13
	.byte	'reserved_90C',0
	.word	2403
	.byte	52,3,35,140,18,13
	.byte	'MCSW1',0
	.word	35065
	.byte	12,3,35,192,18,0,14
	.word	35168
	.byte	33
	.byte	'Ifx_SRC_GTM',0,4,243,1,3
	.word	35628
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,4,246,1,25,4,13
	.byte	'SR',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	35654
	.byte	33
	.byte	'Ifx_SRC_HSCT',0,4,249,1,3
	.word	35687
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,4,252,1,25,16,13
	.byte	'COK',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	763
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	763
	.byte	4,2,35,12,0,14
	.word	35714
	.byte	33
	.byte	'Ifx_SRC_HSSL',0,4,130,2,3
	.word	35787
	.byte	18,56
	.word	456
	.byte	19,55,0,10
	.byte	'_Ifx_SRC_I2C',0,4,133,2,25,80,13
	.byte	'BREQ',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'LBREQ',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'SREQ',0
	.word	763
	.byte	4,2,35,8,13
	.byte	'LSREQ',0
	.word	763
	.byte	4,2,35,12,13
	.byte	'ERR',0
	.word	763
	.byte	4,2,35,16,13
	.byte	'P',0
	.word	763
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	35814
	.byte	56,2,35,24,0,14
	.word	35823
	.byte	33
	.byte	'Ifx_SRC_I2C',0,4,142,2,3
	.word	35946
	.byte	10
	.byte	'_Ifx_SRC_LMU',0,4,145,2,25,4,13
	.byte	'SR',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	35972
	.byte	33
	.byte	'Ifx_SRC_LMU',0,4,148,2,3
	.word	36004
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,4,151,2,25,20,13
	.byte	'SR0',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	763
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	763
	.byte	4,2,35,12,13
	.byte	'SR4',0
	.word	763
	.byte	4,2,35,16,0,14
	.word	36030
	.byte	33
	.byte	'Ifx_SRC_MSC',0,4,158,2,3
	.word	36115
	.byte	10
	.byte	'_Ifx_SRC_PMU',0,4,161,2,25,4,13
	.byte	'SR',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	36141
	.byte	33
	.byte	'Ifx_SRC_PMU',0,4,164,2,3
	.word	36173
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,4,167,2,25,32,13
	.byte	'SR',0
	.word	35074
	.byte	32,2,35,0,0,14
	.word	36199
	.byte	33
	.byte	'Ifx_SRC_PSI5',0,4,170,2,3
	.word	36232
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,4,173,2,25,32,13
	.byte	'SR',0
	.word	35074
	.byte	32,2,35,0,0,14
	.word	36259
	.byte	33
	.byte	'Ifx_SRC_PSI5S',0,4,176,2,3
	.word	36293
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,4,179,2,25,24,13
	.byte	'TX',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	763
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	763
	.byte	4,2,35,12,13
	.byte	'HC',0
	.word	763
	.byte	4,2,35,16,13
	.byte	'U',0
	.word	763
	.byte	4,2,35,20,0,14
	.word	36321
	.byte	33
	.byte	'Ifx_SRC_QSPI',0,4,187,2,3
	.word	36414
	.byte	10
	.byte	'_Ifx_SRC_SCR',0,4,190,2,25,4,13
	.byte	'SR',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	36441
	.byte	33
	.byte	'Ifx_SRC_SCR',0,4,193,2,3
	.word	36473
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,4,196,2,25,20,13
	.byte	'DTS',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'ERU',0
	.word	35150
	.byte	16,2,35,4,0,14
	.word	36499
	.byte	33
	.byte	'Ifx_SRC_SCU',0,4,200,2,3
	.word	36545
	.byte	18,24
	.word	763
	.byte	19,5,0,10
	.byte	'_Ifx_SRC_SENT',0,4,203,2,25,24,13
	.byte	'SR',0
	.word	36571
	.byte	24,2,35,0,0,14
	.word	36580
	.byte	33
	.byte	'Ifx_SRC_SENT',0,4,206,2,3
	.word	36613
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,4,209,2,25,12,13
	.byte	'SR',0
	.word	35065
	.byte	12,2,35,0,0,14
	.word	36640
	.byte	33
	.byte	'Ifx_SRC_SMU',0,4,212,2,3
	.word	36672
	.byte	10
	.byte	'_Ifx_SRC_STM',0,4,215,2,25,8,13
	.byte	'SR0',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	763
	.byte	4,2,35,4,0,14
	.word	36698
	.byte	33
	.byte	'Ifx_SRC_STM',0,4,219,2,3
	.word	36744
	.byte	10
	.byte	'_Ifx_SRC_VADCCG',0,4,222,2,25,16,13
	.byte	'SR0',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	763
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	763
	.byte	4,2,35,12,0,14
	.word	36770
	.byte	33
	.byte	'Ifx_SRC_VADCCG',0,4,228,2,3
	.word	36845
	.byte	10
	.byte	'_Ifx_SRC_VADCG',0,4,231,2,25,16,13
	.byte	'SR0',0
	.word	763
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	763
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	763
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	763
	.byte	4,2,35,12,0,14
	.word	36874
	.byte	33
	.byte	'Ifx_SRC_VADCG',0,4,237,2,3
	.word	36948
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,4,240,2,25,4,13
	.byte	'SRC',0
	.word	763
	.byte	4,2,35,0,0,14
	.word	36976
	.byte	33
	.byte	'Ifx_SRC_XBAR',0,4,243,2,3
	.word	37010
	.byte	18,4
	.word	33577
	.byte	19,0,0,14
	.word	37037
	.byte	10
	.byte	'_Ifx_SRC_GAGBT',0,4,128,3,25,4,13
	.byte	'AGBT',0
	.word	37046
	.byte	4,2,35,0,0,14
	.word	37051
	.byte	33
	.byte	'Ifx_SRC_GAGBT',0,4,131,3,3
	.word	37087
	.byte	18,48
	.word	33635
	.byte	19,3,0,14
	.word	37115
	.byte	10
	.byte	'_Ifx_SRC_GASCLIN',0,4,134,3,25,48,13
	.byte	'ASCLIN',0
	.word	37124
	.byte	48,2,35,0,0,14
	.word	37129
	.byte	33
	.byte	'Ifx_SRC_GASCLIN',0,4,137,3,3
	.word	37169
	.byte	14
	.word	33722
	.byte	10
	.byte	'_Ifx_SRC_GBCU',0,4,140,3,25,4,13
	.byte	'SPB',0
	.word	37199
	.byte	4,2,35,0,0,14
	.word	37204
	.byte	33
	.byte	'Ifx_SRC_GBCU',0,4,143,3,3
	.word	37238
	.byte	18,64
	.word	33796
	.byte	19,0,0,14
	.word	37265
	.byte	10
	.byte	'_Ifx_SRC_GCAN',0,4,146,3,25,64,13
	.byte	'CAN',0
	.word	37274
	.byte	64,2,35,0,0,14
	.word	37279
	.byte	33
	.byte	'Ifx_SRC_GCAN',0,4,149,3,3
	.word	37313
	.byte	18,32
	.word	33853
	.byte	19,1,0,14
	.word	37340
	.byte	10
	.byte	'_Ifx_SRC_GCCU6',0,4,152,3,25,32,13
	.byte	'CCU6',0
	.word	37349
	.byte	32,2,35,0,0,14
	.word	37354
	.byte	33
	.byte	'Ifx_SRC_GCCU6',0,4,155,3,3
	.word	37390
	.byte	14
	.word	33960
	.byte	10
	.byte	'_Ifx_SRC_GCERBERUS',0,4,158,3,25,8,13
	.byte	'CERBERUS',0
	.word	37418
	.byte	8,2,35,0,0,14
	.word	37423
	.byte	33
	.byte	'Ifx_SRC_GCERBERUS',0,4,161,3,3
	.word	37467
	.byte	18,16
	.word	34026
	.byte	19,0,0,14
	.word	37499
	.byte	10
	.byte	'_Ifx_SRC_GCIF',0,4,164,3,25,16,13
	.byte	'CIF',0
	.word	37508
	.byte	16,2,35,0,0,14
	.word	37513
	.byte	33
	.byte	'Ifx_SRC_GCIF',0,4,167,3,3
	.word	37547
	.byte	18,8
	.word	34125
	.byte	19,1,0,14
	.word	37574
	.byte	10
	.byte	'_Ifx_SRC_GCPU',0,4,170,3,25,8,13
	.byte	'CPU',0
	.word	37583
	.byte	8,2,35,0,0,14
	.word	37588
	.byte	33
	.byte	'Ifx_SRC_GCPU',0,4,173,3,3
	.word	37622
	.byte	18,208,1
	.word	34196
	.byte	19,0,0,14
	.word	37649
	.byte	10
	.byte	'_Ifx_SRC_GDMA',0,4,176,3,25,208,1,13
	.byte	'DMA',0
	.word	37659
	.byte	208,1,2,35,0,0,14
	.word	37664
	.byte	33
	.byte	'Ifx_SRC_GDMA',0,4,179,3,3
	.word	37700
	.byte	14
	.word	34289
	.byte	14
	.word	34289
	.byte	14
	.word	34289
	.byte	10
	.byte	'_Ifx_SRC_GDSADC',0,4,182,3,25,32,13
	.byte	'DSADC0',0
	.word	37727
	.byte	8,2,35,0,13
	.byte	'reserved_8',0
	.word	3836
	.byte	8,2,35,8,13
	.byte	'DSADC2',0
	.word	37732
	.byte	8,2,35,16,13
	.byte	'DSADC3',0
	.word	37737
	.byte	8,2,35,24,0,14
	.word	37742
	.byte	33
	.byte	'Ifx_SRC_GDSADC',0,4,188,3,3
	.word	37833
	.byte	18,4
	.word	34365
	.byte	19,0,0,14
	.word	37862
	.byte	10
	.byte	'_Ifx_SRC_GEMEM',0,4,191,3,25,4,13
	.byte	'EMEM',0
	.word	37871
	.byte	4,2,35,0,0,14
	.word	37876
	.byte	33
	.byte	'Ifx_SRC_GEMEM',0,4,194,3,3
	.word	37912
	.byte	18,80
	.word	34434
	.byte	19,0,0,14
	.word	37940
	.byte	10
	.byte	'_Ifx_SRC_GERAY',0,4,197,3,25,80,13
	.byte	'ERAY',0
	.word	37949
	.byte	80,2,35,0,0,14
	.word	37954
	.byte	33
	.byte	'Ifx_SRC_GERAY',0,4,200,3,3
	.word	37990
	.byte	18,4
	.word	34588
	.byte	19,0,0,14
	.word	38018
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,4,203,3,25,4,13
	.byte	'ETH',0
	.word	38027
	.byte	4,2,35,0,0,14
	.word	38032
	.byte	33
	.byte	'Ifx_SRC_GETH',0,4,206,3,3
	.word	38066
	.byte	18,4
	.word	34646
	.byte	19,0,0,14
	.word	38093
	.byte	10
	.byte	'_Ifx_SRC_GFCE',0,4,209,3,25,4,13
	.byte	'FCE',0
	.word	38102
	.byte	4,2,35,0,0,14
	.word	38107
	.byte	33
	.byte	'Ifx_SRC_GFCE',0,4,212,3,3
	.word	38141
	.byte	18,12
	.word	34704
	.byte	19,0,0,14
	.word	38168
	.byte	10
	.byte	'_Ifx_SRC_GFFT',0,4,215,3,25,12,13
	.byte	'FFT',0
	.word	38177
	.byte	12,2,35,0,0,14
	.word	38182
	.byte	33
	.byte	'Ifx_SRC_GFFT',0,4,218,3,3
	.word	38216
	.byte	18,64
	.word	34799
	.byte	19,1,0,14
	.word	38243
	.byte	10
	.byte	'_Ifx_SRC_GGPSR',0,4,221,3,25,64,13
	.byte	'GPSR',0
	.word	38252
	.byte	64,2,35,0,0,14
	.word	38257
	.byte	33
	.byte	'Ifx_SRC_GGPSR',0,4,224,3,3
	.word	38293
	.byte	18,48
	.word	34920
	.byte	19,0,0,14
	.word	38321
	.byte	10
	.byte	'_Ifx_SRC_GGPT12',0,4,227,3,25,48,13
	.byte	'GPT12',0
	.word	38330
	.byte	48,2,35,0,0,14
	.word	38335
	.byte	33
	.byte	'Ifx_SRC_GGPT12',0,4,230,3,3
	.word	38373
	.byte	18,204,18
	.word	35168
	.byte	19,0,0,14
	.word	38402
	.byte	10
	.byte	'_Ifx_SRC_GGTM',0,4,233,3,25,204,18,13
	.byte	'GTM',0
	.word	38412
	.byte	204,18,2,35,0,0,14
	.word	38417
	.byte	33
	.byte	'Ifx_SRC_GGTM',0,4,236,3,3
	.word	38453
	.byte	18,4
	.word	35654
	.byte	19,0,0,14
	.word	38480
	.byte	10
	.byte	'_Ifx_SRC_GHSCT',0,4,239,3,25,4,13
	.byte	'HSCT',0
	.word	38489
	.byte	4,2,35,0,0,14
	.word	38494
	.byte	33
	.byte	'Ifx_SRC_GHSCT',0,4,242,3,3
	.word	38530
	.byte	18,64
	.word	35714
	.byte	19,3,0,14
	.word	38558
	.byte	10
	.byte	'_Ifx_SRC_GHSSL',0,4,245,3,25,68,13
	.byte	'HSSL',0
	.word	38567
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	763
	.byte	4,2,35,64,0,14
	.word	38572
	.byte	33
	.byte	'Ifx_SRC_GHSSL',0,4,249,3,3
	.word	38621
	.byte	18,80
	.word	35823
	.byte	19,0,0,14
	.word	38649
	.byte	10
	.byte	'_Ifx_SRC_GI2C',0,4,252,3,25,80,13
	.byte	'I2C',0
	.word	38658
	.byte	80,2,35,0,0,14
	.word	38663
	.byte	33
	.byte	'Ifx_SRC_GI2C',0,4,255,3,3
	.word	38697
	.byte	18,4
	.word	35972
	.byte	19,0,0,14
	.word	38724
	.byte	10
	.byte	'_Ifx_SRC_GLMU',0,4,130,4,25,4,13
	.byte	'LMU',0
	.word	38733
	.byte	4,2,35,0,0,14
	.word	38738
	.byte	33
	.byte	'Ifx_SRC_GLMU',0,4,133,4,3
	.word	38772
	.byte	18,40
	.word	36030
	.byte	19,1,0,14
	.word	38799
	.byte	10
	.byte	'_Ifx_SRC_GMSC',0,4,136,4,25,40,13
	.byte	'MSC',0
	.word	38808
	.byte	40,2,35,0,0,14
	.word	38813
	.byte	33
	.byte	'Ifx_SRC_GMSC',0,4,139,4,3
	.word	38847
	.byte	18,8
	.word	36141
	.byte	19,1,0,14
	.word	38874
	.byte	10
	.byte	'_Ifx_SRC_GPMU',0,4,142,4,25,8,13
	.byte	'PMU',0
	.word	38883
	.byte	8,2,35,0,0,14
	.word	38888
	.byte	33
	.byte	'Ifx_SRC_GPMU',0,4,145,4,3
	.word	38922
	.byte	18,32
	.word	36199
	.byte	19,0,0,14
	.word	38949
	.byte	10
	.byte	'_Ifx_SRC_GPSI5',0,4,148,4,25,32,13
	.byte	'PSI5',0
	.word	38958
	.byte	32,2,35,0,0,14
	.word	38963
	.byte	33
	.byte	'Ifx_SRC_GPSI5',0,4,151,4,3
	.word	38999
	.byte	18,32
	.word	36259
	.byte	19,0,0,14
	.word	39027
	.byte	10
	.byte	'_Ifx_SRC_GPSI5S',0,4,154,4,25,32,13
	.byte	'PSI5S',0
	.word	39036
	.byte	32,2,35,0,0,14
	.word	39041
	.byte	33
	.byte	'Ifx_SRC_GPSI5S',0,4,157,4,3
	.word	39079
	.byte	18,96
	.word	36321
	.byte	19,3,0,14
	.word	39108
	.byte	10
	.byte	'_Ifx_SRC_GQSPI',0,4,160,4,25,96,13
	.byte	'QSPI',0
	.word	39117
	.byte	96,2,35,0,0,14
	.word	39122
	.byte	33
	.byte	'Ifx_SRC_GQSPI',0,4,163,4,3
	.word	39158
	.byte	18,4
	.word	36441
	.byte	19,0,0,14
	.word	39186
	.byte	10
	.byte	'_Ifx_SRC_GSCR',0,4,166,4,25,4,13
	.byte	'SCR',0
	.word	39195
	.byte	4,2,35,0,0,14
	.word	39200
	.byte	33
	.byte	'Ifx_SRC_GSCR',0,4,169,4,3
	.word	39234
	.byte	14
	.word	36499
	.byte	10
	.byte	'_Ifx_SRC_GSCU',0,4,172,4,25,20,13
	.byte	'SCU',0
	.word	39261
	.byte	20,2,35,0,0,14
	.word	39266
	.byte	33
	.byte	'Ifx_SRC_GSCU',0,4,175,4,3
	.word	39300
	.byte	18,24
	.word	36580
	.byte	19,0,0,14
	.word	39327
	.byte	10
	.byte	'_Ifx_SRC_GSENT',0,4,178,4,25,24,13
	.byte	'SENT',0
	.word	39336
	.byte	24,2,35,0,0,14
	.word	39341
	.byte	33
	.byte	'Ifx_SRC_GSENT',0,4,181,4,3
	.word	39377
	.byte	18,12
	.word	36640
	.byte	19,0,0,14
	.word	39405
	.byte	10
	.byte	'_Ifx_SRC_GSMU',0,4,184,4,25,12,13
	.byte	'SMU',0
	.word	39414
	.byte	12,2,35,0,0,14
	.word	39419
	.byte	33
	.byte	'Ifx_SRC_GSMU',0,4,187,4,3
	.word	39453
	.byte	18,16
	.word	36698
	.byte	19,1,0,14
	.word	39480
	.byte	10
	.byte	'_Ifx_SRC_GSTM',0,4,190,4,25,16,13
	.byte	'STM',0
	.word	39489
	.byte	16,2,35,0,0,14
	.word	39494
	.byte	33
	.byte	'Ifx_SRC_GSTM',0,4,193,4,3
	.word	39528
	.byte	18,64
	.word	36874
	.byte	19,3,0,14
	.word	39555
	.byte	18,224,1
	.word	456
	.byte	19,223,1,0,18,32
	.word	36770
	.byte	19,1,0,14
	.word	39580
	.byte	10
	.byte	'_Ifx_SRC_GVADC',0,4,196,4,25,192,2,13
	.byte	'G',0
	.word	39564
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	39569
	.byte	224,1,2,35,64,13
	.byte	'CG',0
	.word	39589
	.byte	32,3,35,160,2,0,14
	.word	39594
	.byte	33
	.byte	'Ifx_SRC_GVADC',0,4,201,4,3
	.word	39663
	.byte	14
	.word	36976
	.byte	10
	.byte	'_Ifx_SRC_GXBAR',0,4,204,4,25,4,13
	.byte	'XBAR',0
	.word	39691
	.byte	4,2,35,0,0,14
	.word	39696
	.byte	33
	.byte	'Ifx_SRC_GXBAR',0,4,207,4,3
	.word	39732
	.byte	33
	.byte	'Ifx_FFT_CLC_Bits',0,9,50,3
	.word	2155
	.byte	33
	.byte	'Ifx_FFT_CSR_Bits',0,9,66,3
	.word	2412
	.byte	33
	.byte	'Ifx_FFT_HISTORY0_Bits',0,9,81,3
	.word	2691
	.byte	33
	.byte	'Ifx_FFT_HISTORY1_Bits',0,9,96,3
	.word	2958
	.byte	33
	.byte	'Ifx_FFT_ID_Bits',0,9,104,3
	.word	2282
	.byte	33
	.byte	'Ifx_FFT_KRST0_Bits',0,9,112,3
	.word	3714
	.byte	33
	.byte	'Ifx_FFT_KRST1_Bits',0,9,119,3
	.word	3611
	.byte	33
	.byte	'Ifx_FFT_KRSTCLR_Bits',0,9,126,3
	.word	3506
	.byte	33
	.byte	'Ifx_FFT_OCS_Bits',0,9,136,1,3
	.word	3346
	.byte	33
	.byte	'Ifx_FFT_ODA_Bits',0,9,144,1,3
	.word	3225
	.byte	33
	.byte	'Ifx_FFT_CLC',0,9,157,1,3
	.word	2233
	.byte	33
	.byte	'Ifx_FFT_CSR',0,9,165,1,3
	.word	2642
	.byte	33
	.byte	'Ifx_FFT_HISTORY0',0,9,173,1,3
	.word	2909
	.byte	33
	.byte	'Ifx_FFT_HISTORY1',0,9,181,1,3
	.word	3176
	.byte	33
	.byte	'Ifx_FFT_ID',0,9,189,1,3
	.word	2363
	.byte	33
	.byte	'Ifx_FFT_KRST0',0,9,197,1,3
	.word	3796
	.byte	33
	.byte	'Ifx_FFT_KRST1',0,9,205,1,3
	.word	3674
	.byte	33
	.byte	'Ifx_FFT_KRSTCLR',0,9,213,1,3
	.word	3571
	.byte	33
	.byte	'Ifx_FFT_OCS',0,9,221,1,3
	.word	3466
	.byte	33
	.byte	'Ifx_FFT_ODA',0,9,229,1,3
	.word	3306
	.byte	14
	.word	3845
	.byte	33
	.byte	'Ifx_FFT',0,9,130,2,3
	.word	40256
	.byte	33
	.byte	'Ifx_LMU_ACCEN0_Bits',0,10,79,3
	.word	4354
	.byte	33
	.byte	'Ifx_LMU_ACCEN1_Bits',0,10,85,3
	.word	4923
	.byte	33
	.byte	'Ifx_LMU_BUFCON_Bits',0,10,99,3
	.word	5336
	.byte	33
	.byte	'Ifx_LMU_CLC_Bits',0,10,107,3
	.word	4149
	.byte	33
	.byte	'Ifx_LMU_MEMCON_Bits',0,10,125,3
	.word	5012
	.byte	33
	.byte	'Ifx_LMU_MODID_Bits',0,10,131,1,3
	.word	4267
	.byte	33
	.byte	'Ifx_LMU_ACCEN0',0,10,144,1,3
	.word	4883
	.byte	33
	.byte	'Ifx_LMU_ACCEN1',0,10,152,1,3
	.word	4972
	.byte	33
	.byte	'Ifx_LMU_BUFCON',0,10,160,1,3
	.word	5525
	.byte	33
	.byte	'Ifx_LMU_CLC',0,10,168,1,3
	.word	4227
	.byte	33
	.byte	'Ifx_LMU_MEMCON',0,10,176,1,3
	.word	5296
	.byte	33
	.byte	'Ifx_LMU_MODID',0,10,184,1,3
	.word	4314
	.byte	14
	.word	5585
	.byte	33
	.byte	'Ifx_LMU',0,10,208,1,3
	.word	40583
	.byte	15,23,240,10,9,1,16
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,16
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,33
	.byte	'IfxScu_CCUCON0_CLKSEL',0,23,244,10,3
	.word	40605
	.byte	15,23,254,10,9,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,16
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,16
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,33
	.byte	'IfxScu_WDTCON1_IR',0,23,131,11,3
	.word	40702
	.byte	10
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,7,45,16,4,11
	.byte	'EN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_ACCEN0_Bits',0,7,79,3
	.word	40824
	.byte	10
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,7,82,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN1_Bits',0,7,85,3
	.word	41381
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,7,88,16,4,11
	.byte	'STM0DIS',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	433
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,7,94,3
	.word	41458
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,7,97,16,4,11
	.byte	'BAUD1DIV',0,1
	.word	456
	.byte	4,4,2,35,0,11
	.byte	'BAUD2DIV',0,1
	.word	456
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	456
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	456
	.byte	4,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	456
	.byte	4,4,2,35,2,11
	.byte	'FSI2DIV',0,1
	.word	456
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	456
	.byte	2,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	456
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	456
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	456
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON0_Bits',0,7,111,3
	.word	41594
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,7,114,16,4,11
	.byte	'CANDIV',0,1
	.word	456
	.byte	4,4,2,35,0,11
	.byte	'ERAYDIV',0,1
	.word	456
	.byte	4,0,2,35,0,11
	.byte	'STMDIV',0,1
	.word	456
	.byte	4,4,2,35,1,11
	.byte	'GTMDIV',0,1
	.word	456
	.byte	4,0,2,35,1,11
	.byte	'ETHDIV',0,1
	.word	456
	.byte	4,4,2,35,2,11
	.byte	'ASCLINFDIV',0,1
	.word	456
	.byte	4,0,2,35,2,11
	.byte	'ASCLINSDIV',0,1
	.word	456
	.byte	4,4,2,35,3,11
	.byte	'INSEL',0,1
	.word	456
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON1_Bits',0,7,126,3
	.word	41874
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,7,129,1,16,4,11
	.byte	'BBBDIV',0,1
	.word	456
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON2_Bits',0,7,135,1,3
	.word	42112
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,7,138,1,16,4,11
	.byte	'PLLDIV',0,1
	.word	456
	.byte	6,2,2,35,0,11
	.byte	'PLLSEL',0,1
	.word	456
	.byte	2,0,2,35,0,11
	.byte	'PLLERAYDIV',0,1
	.word	456
	.byte	6,2,2,35,1,11
	.byte	'PLLERAYSEL',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'SRIDIV',0,1
	.word	456
	.byte	6,2,2,35,2,11
	.byte	'SRISEL',0,1
	.word	456
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON3_Bits',0,7,150,1,3
	.word	42240
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,7,153,1,16,4,11
	.byte	'SPBDIV',0,1
	.word	456
	.byte	6,2,2,35,0,11
	.byte	'SPBSEL',0,1
	.word	456
	.byte	2,0,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	456
	.byte	6,2,2,35,1,11
	.byte	'GTMSEL',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'STMDIV',0,1
	.word	456
	.byte	6,2,2,35,2,11
	.byte	'STMSEL',0,1
	.word	456
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON4_Bits',0,7,165,1,3
	.word	42483
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,7,168,1,16,4,11
	.byte	'MAXDIV',0,1
	.word	456
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CCUCON5_Bits',0,7,174,1,3
	.word	42718
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,7,177,1,16,4,11
	.byte	'CPU0DIV',0,1
	.word	456
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	433
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6_Bits',0,7,181,1,3
	.word	42846
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,7,184,1,16,4,11
	.byte	'CPU1DIV',0,1
	.word	456
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	433
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7_Bits',0,7,188,1,3
	.word	42946
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,7,191,1,16,4,11
	.byte	'CHREV',0,1
	.word	456
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	456
	.byte	2,0,2,35,0,11
	.byte	'CHID',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'EEA',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	456
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	456
	.byte	4,4,2,35,3,11
	.byte	'SP',0,1
	.word	456
	.byte	2,2,2,35,3,11
	.byte	'SEC',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_CHIPID_Bits',0,7,202,1,3
	.word	43046
	.byte	10
	.byte	'_Ifx_SCU_DTSCON_Bits',0,7,205,1,16,4,11
	.byte	'PWD',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'START',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	2,4,2,35,0,11
	.byte	'CAL',0,4
	.word	433
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_DTSCON_Bits',0,7,213,1,3
	.word	43254
	.byte	10
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,7,216,1,16,4,11
	.byte	'LOWER',0,2
	.word	951
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	456
	.byte	5,1,2,35,1,11
	.byte	'LLU',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	951
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	456
	.byte	4,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_DTSLIM_Bits',0,7,225,1,3
	.word	43419
	.byte	10
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,7,228,1,16,4,11
	.byte	'RESULT',0,2
	.word	951
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	456
	.byte	4,2,2,35,1,11
	.byte	'RDY',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'BUSY',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,7,235,1,3
	.word	43602
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,7,238,1,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	456
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	456
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	433
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	456
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	456
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EICR_Bits',0,7,129,2,3
	.word	43756
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,7,132,2,16,4,11
	.byte	'INTF0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	433
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR_Bits',0,7,143,2,3
	.word	44120
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,7,146,2,16,4,11
	.byte	'POL',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	951
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	456
	.byte	6,0,2,35,2,11
	.byte	'EMSFM',0,1
	.word	456
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	456
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	456
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_EMSR_Bits',0,7,159,2,3
	.word	44331
	.byte	10
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,7,162,2,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	951
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	433
	.byte	23,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFG_Bits',0,7,167,2,3
	.word	44583
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,7,170,2,16,4,11
	.byte	'ARI',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	433
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG_Bits',0,7,175,2,3
	.word	44701
	.byte	10
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,7,178,2,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	28,4,2,35,0,11
	.byte	'EVR13OFF',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'BPEVR13OFF',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVR13CON_Bits',0,7,185,2,3
	.word	44812
	.byte	10
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,7,188,2,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	28,4,2,35,0,11
	.byte	'EVR33OFF',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'BPEVR33OFF',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVR33CON_Bits',0,7,195,2,3
	.word	44975
	.byte	10
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,7,198,2,16,4,11
	.byte	'ADC13V',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,7,205,2,3
	.word	45138
	.byte	10
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,7,208,2,16,4,11
	.byte	'DVS13TRIM',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'DVS33TRIM',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,7,215,2,3
	.word	45296
	.byte	10
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,7,218,2,16,4,11
	.byte	'EVR13OVMOD',0,1
	.word	456
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	2,4,2,35,0,11
	.byte	'EVR13UVMOD',0,1
	.word	456
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	456
	.byte	2,0,2,35,0,11
	.byte	'EVR33OVMOD',0,1
	.word	456
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	456
	.byte	2,4,2,35,1,11
	.byte	'EVR33UVMOD',0,1
	.word	456
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'SWDOVMOD',0,1
	.word	456
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	456
	.byte	2,4,2,35,2,11
	.byte	'SWDUVMOD',0,1
	.word	456
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	951
	.byte	10,0,2,35,2,0,33
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,7,232,2,3
	.word	45461
	.byte	10
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,7,235,2,16,4,11
	.byte	'OSCTRIM',0,2
	.word	951
	.byte	10,6,2,35,0,11
	.byte	'OSCPTAT',0,1
	.word	456
	.byte	6,0,2,35,1,11
	.byte	'OSCANASEL',0,1
	.word	456
	.byte	4,4,2,35,2,11
	.byte	'HPBGTRIM',0,2
	.word	951
	.byte	7,5,2,35,2,11
	.byte	'HPBGCLKEN',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'OSC3V3',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	456
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,7,245,2,3
	.word	45790
	.byte	10
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,7,248,2,16,4,11
	.byte	'EVR13OVVAL',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVROVMON_Bits',0,7,255,2,3
	.word	46011
	.byte	10
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,7,130,3,16,4,11
	.byte	'RST13TRIM',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	433
	.byte	16,8,2,35,0,11
	.byte	'RST13OFF',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'BPRST13OFF',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'BPRST33OFF',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'BPRSTSWDOFF',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,7,142,3,3
	.word	46174
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,7,145,3,16,4,11
	.byte	'SD5P',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'SD5I',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'SD5D',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,7,152,3,3
	.word	46446
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,7,155,3,16,4,11
	.byte	'SD33P',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'SD33I',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'SD33D',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,7,162,3,3
	.word	46599
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,7,165,3,16,4,11
	.byte	'CT5REG0',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'CT5REG1',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'CT5REG2',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,7,172,3,3
	.word	46755
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,7,175,3,16,4,11
	.byte	'CT5REG3',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'CT5REG4',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,7,181,3,3
	.word	46917
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,7,184,3,16,4,11
	.byte	'CT33REG0',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'CT33REG1',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'CT33REG2',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,7,191,3,3
	.word	47060
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,7,194,3,16,4,11
	.byte	'CT33REG3',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'CT33REG4',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,7,200,3,3
	.word	47225
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,7,203,3,16,4,11
	.byte	'SDFREQSPRD',0,2
	.word	951
	.byte	16,0,2,35,0,11
	.byte	'SDFREQ',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'SDSTEP',0,1
	.word	456
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	456
	.byte	2,2,2,35,3,11
	.byte	'SDSAMPLE',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,7,211,3,3
	.word	47370
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,7,214,3,16,4,11
	.byte	'DRVP',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'SDMINMAXDC',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'DRVN',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'SDLUT',0,1
	.word	456
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,7,222,3,3
	.word	47551
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,7,225,3,16,4,11
	.byte	'SDPWMPRE',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'SDPID',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'SDVOKLVL',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,7,232,3,3
	.word	47725
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,7,235,3,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'SYNCDIV',0,1
	.word	456
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	433
	.byte	20,1,2,35,0,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,7,241,3,3
	.word	47885
	.byte	10
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,7,244,3,16,4,11
	.byte	'EVR13',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'OV13',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EVR33',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'OV33',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'OVSWD',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'UV13',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'UV33',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'UVSWD',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'EXTPASS13',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'EXTPASS33',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'BGPROK',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	433
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,7,130,4,3
	.word	48029
	.byte	10
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,7,133,4,16,4,11
	.byte	'EVR13TRIM',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,7,139,4,3
	.word	48303
	.byte	10
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,7,142,4,16,4,11
	.byte	'EVR13UVVAL',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,7,149,4,3
	.word	48442
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,7,152,4,16,4,11
	.byte	'EN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	456
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	951
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	456
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	456
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	456
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_EXTCON_Bits',0,7,163,4,3
	.word	48605
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,7,166,4,16,4,11
	.byte	'STEP',0,2
	.word	951
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	456
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	951
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	456
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_FDR_Bits',0,7,174,4,3
	.word	48823
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,7,177,4,16,4,11
	.byte	'FS0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_SCU_FMR_Bits',0,7,197,4,3
	.word	48986
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,7,200,4,16,4,11
	.byte	'MODREV',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_ID_Bits',0,7,205,4,3
	.word	49322
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,7,208,4,16,4,11
	.byte	'IPEN00',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	456
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_SCU_IGCR_Bits',0,7,232,4,3
	.word	49429
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,7,235,4,16,4,11
	.byte	'P0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	433
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_IN_Bits',0,7,240,4,3
	.word	49881
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,7,243,4,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	456
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	456
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_IOCR_Bits',0,7,250,4,3
	.word	49980
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,7,253,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'LBISTREQP',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,2
	.word	951
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,7,131,5,3
	.word	50130
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,7,134,5,16,4,11
	.byte	'SEED',0,4
	.word	433
	.byte	23,9,2,35,0,11
	.byte	'reserved_23',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	456
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	456
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,7,141,5,3
	.word	50279
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,7,144,5,16,4,11
	.byte	'SIGNATURE',0,4
	.word	433
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	7,1,2,35,3,11
	.byte	'LBISTDONE',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,7,149,5,3
	.word	50440
	.byte	10
	.byte	'_Ifx_SCU_LCLCON_Bits',0,7,152,5,16,4,11
	.byte	'reserved_0',0,2
	.word	951
	.byte	16,0,2,35,0,11
	.byte	'LS',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	951
	.byte	14,1,2,35,2,11
	.byte	'LSEN',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_LCLCON_Bits',0,7,158,5,3
	.word	50570
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,7,161,5,16,4,11
	.byte	'LCLT0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	433
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_LCLTEST_Bits',0,7,166,5,3
	.word	50702
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,7,169,5,16,4,11
	.byte	'DEPT',0,1
	.word	456
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	951
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_MANID_Bits',0,7,174,5,3
	.word	50817
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,7,177,5,16,4,11
	.byte	'PS0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	951
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	951
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_OMR_Bits',0,7,185,5,3
	.word	50928
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,7,188,5,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	456
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	456
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'X1D',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'X1DEN',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	456
	.byte	4,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	456
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	456
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	456
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_OSCCON_Bits',0,7,209,5,3
	.word	51086
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,7,212,5,16,4,11
	.byte	'P0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	433
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_OUT_Bits',0,7,217,5,3
	.word	51498
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,7,220,5,16,4,11
	.byte	'CSEL0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	951
	.byte	13,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	456
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	456
	.byte	6,0,2,35,3,0,33
	.byte	'Ifx_SCU_OVCCON_Bits',0,7,233,5,3
	.word	51599
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,7,236,5,16,4,11
	.byte	'OVEN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	433
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,7,242,5,3
	.word	51866
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,7,245,5,16,4,11
	.byte	'PDIS0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	433
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC_Bits',0,7,250,5,3
	.word	52002
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,7,253,5,16,4,11
	.byte	'PD0',0,1
	.word	456
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	456
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	433
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDR_Bits',0,7,132,6,3
	.word	52113
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,7,135,6,16,4,11
	.byte	'PDR0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	433
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR_Bits',0,7,146,6,3
	.word	52246
	.byte	10
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,7,149,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	951
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	456
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	456
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	456
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	456
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_PLLCON0_Bits',0,7,166,6,3
	.word	52449
	.byte	10
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,7,169,6,16,4,11
	.byte	'K2DIV',0,1
	.word	456
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	456
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	456
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	951
	.byte	9,0,2,35,2,0,33
	.byte	'Ifx_SCU_PLLCON1_Bits',0,7,177,6,3
	.word	52805
	.byte	10
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,7,180,6,16,4,11
	.byte	'MODCFG',0,2
	.word	951
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_PLLCON2_Bits',0,7,184,6,3
	.word	52983
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,7,187,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	2,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	951
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	456
	.byte	5,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	456
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	456
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	456
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,7,204,6,3
	.word	53083
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,7,207,6,16,4,11
	.byte	'K2DIV',0,1
	.word	456
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	456
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	456
	.byte	4,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	456
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	951
	.byte	9,0,2,35,2,0,33
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,7,215,6,3
	.word	53453
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,7,218,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	433
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,7,227,6,3
	.word	53639
	.byte	10
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,7,230,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	433
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,7,241,6,3
	.word	53837
	.byte	10
	.byte	'_Ifx_SCU_PMCSR_Bits',0,7,244,6,16,4,11
	.byte	'REQSLP',0,1
	.word	456
	.byte	2,6,2,35,0,11
	.byte	'SMUSLP',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	456
	.byte	5,0,2,35,0,11
	.byte	'PMST',0,1
	.word	456
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	433
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR_Bits',0,7,251,6,3
	.word	54070
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,7,254,6,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKEN',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'PINAWKEN',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'PINBWKEN',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'ESR0DFEN',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'ESR0EDCON',0,1
	.word	456
	.byte	2,1,2,35,0,11
	.byte	'ESR1DFEN',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'ESR1EDCON',0,1
	.word	456
	.byte	2,6,2,35,1,11
	.byte	'PINADFEN',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'PINAEDCON',0,1
	.word	456
	.byte	2,3,2,35,1,11
	.byte	'PINBDFEN',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'PINBEDCON',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'SCREN',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'STBYRAMSEL',0,1
	.word	456
	.byte	2,5,2,35,2,11
	.byte	'SCRCLKSEL',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'TRISTEN',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'TRISTREQ',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'PORSTDF',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'DCDCSYNC',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	456
	.byte	3,3,2,35,3,11
	.byte	'ESR0TRIST',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,7,153,7,3
	.word	54222
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,7,156,7,16,4,11
	.byte	'SCRSTEN',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'SCRSTREQ',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	6,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	456
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	456
	.byte	3,0,2,35,1,11
	.byte	'SCRCFG',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'CPUSEL',0,1
	.word	456
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	456
	.byte	3,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,7,170,7,3
	.word	54789
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR2_Bits',0,7,173,7,16,4,11
	.byte	'SCRINT',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'BUSY',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'SCRECC',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'SCRWDT',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'SCRRST',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	456
	.byte	4,0,2,35,1,11
	.byte	'TCINT',0,1
	.word	456
	.byte	8,0,2,35,2,11
	.byte	'TCINTREQ',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'SMURST',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'RST',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	456
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMSWCR2_Bits',0,7,187,7,3
	.word	55083
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,7,190,7,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKP',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUN',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'PINAWKP',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUN',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'PINBWKP',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUN',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'PORSTDF',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'HWCFGEVR',0,1
	.word	456
	.byte	3,3,2,35,1,11
	.byte	'STBYRAM',0,1
	.word	456
	.byte	2,1,2,35,1,11
	.byte	'TRIST',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'SCRST',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'SCRWKP',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'SCR',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'ESR1WKEN',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'PINAWKEN',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'PINBWKEN',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	951
	.byte	4,5,2,35,2,11
	.byte	'ESR0TRIST',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	456
	.byte	4,0,2,35,3,0,33
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,7,214,7,3
	.word	55361
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,7,217,7,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKPCLR',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUNCLR',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'PINAWKPCLR',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUNCLR',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'PINBWKPCLR',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUNCLR',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'SCRSTCLR',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'SCRWKPCLR',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	951
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,7,230,7,3
	.word	55857
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,7,233,7,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	951
	.byte	10,4,2,35,0,11
	.byte	'CSS0',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'CSS1',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'CSS2',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON2_Bits',0,7,243,7,3
	.word	56170
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,7,246,7,16,4,11
	.byte	'ESR0',0,1
	.word	456
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	456
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	456
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	456
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	456
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	456
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	456
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_RSTCON_Bits',0,7,129,8,3
	.word	56379
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,7,132,8,16,4,11
	.byte	'ESR0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'PORST',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	456
	.byte	2,1,2,35,2,11
	.byte	'EVR13',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	456
	.byte	2,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	456
	.byte	3,0,2,35,3,0,33
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,7,155,8,3
	.word	56590
	.byte	10
	.byte	'_Ifx_SCU_SAFECON_Bits',0,7,158,8,16,4,11
	.byte	'HBT',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	433
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_SCU_SAFECON_Bits',0,7,162,8,3
	.word	57022
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,7,165,8,16,4,11
	.byte	'HWCFG',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	456
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	456
	.byte	3,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	456
	.byte	7,0,2,35,3,0,33
	.byte	'Ifx_SCU_STSTAT_Bits',0,7,178,8,3
	.word	57118
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,7,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	433
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,7,186,8,3
	.word	57378
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,7,189,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	456
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	456
	.byte	3,0,2,35,0,11
	.byte	'DATM',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	433
	.byte	23,0,2,35,0,0,33
	.byte	'Ifx_SCU_SYSCON_Bits',0,7,198,8,3
	.word	57503
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,7,201,8,16,4,11
	.byte	'ESR0T',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,7,208,8,3
	.word	57700
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,7,211,8,16,4,11
	.byte	'ESR0T',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,7,218,8,3
	.word	57853
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,7,221,8,16,4,11
	.byte	'ESR0T',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET_Bits',0,7,228,8,3
	.word	58006
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,7,231,8,16,4,11
	.byte	'ESR0T',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,7,238,8,3
	.word	58159
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,7,247,8,3
	.word	1066
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,7,134,9,3
	.word	1202
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,7,150,9,3
	.word	1446
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,7,153,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	1050
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	1050
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,7,159,9,3
	.word	58414
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,7,162,9,16,4,11
	.byte	'CLRIRF',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	456
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,7,175,9,3
	.word	58540
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,7,178,9,16,4,11
	.byte	'AE',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	456
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,7,191,9,3
	.word	58792
	.byte	12,7,199,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40824
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN0',0,7,204,9,3
	.word	59011
	.byte	12,7,207,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41381
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ACCEN1',0,7,212,9,3
	.word	59075
	.byte	12,7,215,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41458
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ARSTDIS',0,7,220,9,3
	.word	59139
	.byte	12,7,223,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41594
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON0',0,7,228,9,3
	.word	59204
	.byte	12,7,231,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41874
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON1',0,7,236,9,3
	.word	59269
	.byte	12,7,239,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42112
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON2',0,7,244,9,3
	.word	59334
	.byte	12,7,247,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42240
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON3',0,7,252,9,3
	.word	59399
	.byte	12,7,255,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42483
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON4',0,7,132,10,3
	.word	59464
	.byte	12,7,135,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42718
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON5',0,7,140,10,3
	.word	59529
	.byte	12,7,143,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42846
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON6',0,7,148,10,3
	.word	59594
	.byte	12,7,151,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42946
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CCUCON7',0,7,156,10,3
	.word	59659
	.byte	12,7,159,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43046
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_CHIPID',0,7,164,10,3
	.word	59724
	.byte	12,7,167,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43254
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSCON',0,7,172,10,3
	.word	59788
	.byte	12,7,175,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43419
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSLIM',0,7,180,10,3
	.word	59852
	.byte	12,7,183,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43602
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_DTSSTAT',0,7,188,10,3
	.word	59916
	.byte	12,7,191,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43756
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EICR',0,7,196,10,3
	.word	59981
	.byte	12,7,199,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44120
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EIFR',0,7,204,10,3
	.word	60043
	.byte	12,7,207,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44331
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EMSR',0,7,212,10,3
	.word	60105
	.byte	12,7,215,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44583
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESRCFG',0,7,220,10,3
	.word	60167
	.byte	12,7,223,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44701
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ESROCFG',0,7,228,10,3
	.word	60231
	.byte	12,7,231,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44812
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVR13CON',0,7,236,10,3
	.word	60296
	.byte	12,7,239,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44975
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVR33CON',0,7,244,10,3
	.word	60362
	.byte	12,7,247,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45138
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRADCSTAT',0,7,252,10,3
	.word	60428
	.byte	12,7,255,10,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45296
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRDVSTAT',0,7,132,11,3
	.word	60496
	.byte	12,7,135,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45461
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRMONCTRL',0,7,140,11,3
	.word	60563
	.byte	12,7,143,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45790
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVROSCCTRL',0,7,148,11,3
	.word	60631
	.byte	12,7,151,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46011
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVROVMON',0,7,156,11,3
	.word	60699
	.byte	12,7,159,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46174
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRRSTCON',0,7,164,11,3
	.word	60765
	.byte	12,7,167,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46446
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,7,172,11,3
	.word	60832
	.byte	12,7,175,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46599
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,7,180,11,3
	.word	60901
	.byte	12,7,183,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46755
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,7,188,11,3
	.word	60970
	.byte	12,7,191,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46917
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,7,196,11,3
	.word	61039
	.byte	12,7,199,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47060
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,7,204,11,3
	.word	61108
	.byte	12,7,207,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47225
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,7,212,11,3
	.word	61177
	.byte	12,7,215,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47370
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSDCTRL1',0,7,220,11,3
	.word	61246
	.byte	12,7,223,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47551
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSDCTRL2',0,7,228,11,3
	.word	61314
	.byte	12,7,231,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47725
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSDCTRL3',0,7,236,11,3
	.word	61382
	.byte	12,7,239,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47885
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSDCTRL4',0,7,244,11,3
	.word	61450
	.byte	12,7,247,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48029
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRSTAT',0,7,252,11,3
	.word	61518
	.byte	12,7,255,11,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48303
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRTRIM',0,7,132,12,3
	.word	61583
	.byte	12,7,135,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48442
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EVRUVMON',0,7,140,12,3
	.word	61648
	.byte	12,7,143,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48605
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_EXTCON',0,7,148,12,3
	.word	61714
	.byte	12,7,151,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48823
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FDR',0,7,156,12,3
	.word	61778
	.byte	12,7,159,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48986
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_FMR',0,7,164,12,3
	.word	61839
	.byte	12,7,167,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49322
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_ID',0,7,172,12,3
	.word	61900
	.byte	12,7,175,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49429
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IGCR',0,7,180,12,3
	.word	61960
	.byte	12,7,183,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49881
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IN',0,7,188,12,3
	.word	62022
	.byte	12,7,191,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49980
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_IOCR',0,7,196,12,3
	.word	62082
	.byte	12,7,199,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50130
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL0',0,7,204,12,3
	.word	62144
	.byte	12,7,207,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50279
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL1',0,7,212,12,3
	.word	62212
	.byte	12,7,215,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50440
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LBISTCTRL2',0,7,220,12,3
	.word	62280
	.byte	12,7,223,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50570
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLCON',0,7,228,12,3
	.word	62348
	.byte	12,7,231,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50702
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_LCLTEST',0,7,236,12,3
	.word	62412
	.byte	12,7,239,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50817
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_MANID',0,7,244,12,3
	.word	62477
	.byte	12,7,247,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50928
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OMR',0,7,252,12,3
	.word	62540
	.byte	12,7,255,12,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51086
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OSCCON',0,7,132,13,3
	.word	62601
	.byte	12,7,135,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51498
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OUT',0,7,140,13,3
	.word	62665
	.byte	12,7,143,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51599
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCCON',0,7,148,13,3
	.word	62726
	.byte	12,7,151,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51866
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_OVCENABLE',0,7,156,13,3
	.word	62790
	.byte	12,7,159,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52002
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDISC',0,7,164,13,3
	.word	62857
	.byte	12,7,167,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52113
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDR',0,7,172,13,3
	.word	62920
	.byte	12,7,175,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52246
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PDRR',0,7,180,13,3
	.word	62981
	.byte	12,7,183,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52449
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PLLCON0',0,7,188,13,3
	.word	63043
	.byte	12,7,191,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52805
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PLLCON1',0,7,196,13,3
	.word	63108
	.byte	12,7,199,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52983
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PLLCON2',0,7,204,13,3
	.word	63173
	.byte	12,7,207,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53083
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PLLERAYCON0',0,7,212,13,3
	.word	63238
	.byte	12,7,215,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53453
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PLLERAYCON1',0,7,220,13,3
	.word	63307
	.byte	12,7,223,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53639
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PLLERAYSTAT',0,7,228,13,3
	.word	63376
	.byte	12,7,231,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53837
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PLLSTAT',0,7,236,13,3
	.word	63445
	.byte	12,7,239,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54070
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMCSR',0,7,244,13,3
	.word	63510
	.byte	12,7,247,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54222
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWCR0',0,7,252,13,3
	.word	63573
	.byte	12,7,255,13,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54789
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWCR1',0,7,132,14,3
	.word	63638
	.byte	12,7,135,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55083
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWCR2',0,7,140,14,3
	.word	63703
	.byte	12,7,143,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55361
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWSTAT',0,7,148,14,3
	.word	63768
	.byte	12,7,151,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	55857
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_PMSWSTATCLR',0,7,156,14,3
	.word	63834
	.byte	12,7,159,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56379
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON',0,7,164,14,3
	.word	63903
	.byte	12,7,167,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56170
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTCON2',0,7,172,14,3
	.word	63967
	.byte	12,7,175,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	56590
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_RSTSTAT',0,7,180,14,3
	.word	64032
	.byte	12,7,183,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57022
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SAFECON',0,7,188,14,3
	.word	64097
	.byte	12,7,191,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57118
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_STSTAT',0,7,196,14,3
	.word	64162
	.byte	12,7,199,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57378
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SWRSTCON',0,7,204,14,3
	.word	64226
	.byte	12,7,207,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57503
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_SYSCON',0,7,212,14,3
	.word	64292
	.byte	12,7,215,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57700
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPCLR',0,7,220,14,3
	.word	64356
	.byte	12,7,223,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	57853
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPDIS',0,7,228,14,3
	.word	64421
	.byte	12,7,231,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58006
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSET',0,7,236,14,3
	.word	64486
	.byte	12,7,239,14,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58159
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_TRAPSTAT',0,7,244,14,3
	.word	64551
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON0',0,7,252,14,3
	.word	1162
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_CON1',0,7,132,15,3
	.word	1406
	.byte	33
	.byte	'Ifx_SCU_WDTCPU_SR',0,7,140,15,3
	.word	1637
	.byte	12,7,143,15,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58414
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON0',0,7,148,15,3
	.word	64702
	.byte	12,7,151,15,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58540
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_CON1',0,7,156,15,3
	.word	64769
	.byte	12,7,159,15,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	58792
	.byte	4,2,35,0,0,33
	.byte	'Ifx_SCU_WDTS_SR',0,7,164,15,3
	.word	64836
	.byte	14
	.word	1677
	.byte	33
	.byte	'Ifx_SCU_WDTCPU',0,7,180,15,3
	.word	64901
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,7,183,15,25,12,13
	.byte	'CON0',0
	.word	64702
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	64769
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	64836
	.byte	4,2,35,8,0,14
	.word	64930
	.byte	33
	.byte	'Ifx_SCU_WDTS',0,7,188,15,3
	.word	64991
	.byte	18,8
	.word	60167
	.byte	19,1,0,18,8
	.word	63510
	.byte	19,1,0,14
	.word	64930
	.byte	18,24
	.word	1677
	.byte	19,1,0,14
	.word	65041
	.byte	18,16
	.word	59981
	.byte	19,3,0,18,16
	.word	61960
	.byte	19,3,0,18,180,3
	.word	456
	.byte	19,179,3,0,10
	.byte	'_Ifx_SCU',0,7,201,15,25,128,8,13
	.byte	'reserved_0',0
	.word	3836
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	61900
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2273
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	62601
	.byte	4,2,35,16,13
	.byte	'PLLSTAT',0
	.word	63445
	.byte	4,2,35,20,13
	.byte	'PLLCON0',0
	.word	63043
	.byte	4,2,35,24,13
	.byte	'PLLCON1',0
	.word	63108
	.byte	4,2,35,28,13
	.byte	'PLLCON2',0
	.word	63173
	.byte	4,2,35,32,13
	.byte	'PLLERAYSTAT',0
	.word	63376
	.byte	4,2,35,36,13
	.byte	'PLLERAYCON0',0
	.word	63238
	.byte	4,2,35,40,13
	.byte	'PLLERAYCON1',0
	.word	63307
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	59204
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	59269
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	61778
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	61714
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	59334
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	59399
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	59464
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	59529
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	64032
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2273
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	63903
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	59139
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	64226
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	63967
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	2273
	.byte	4,2,35,104,13
	.byte	'EVRRSTCON',0
	.word	60765
	.byte	4,2,35,108,13
	.byte	'ESRCFG',0
	.word	65018
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	60231
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	64292
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	59594
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	59659
	.byte	4,3,35,132,1,13
	.byte	'reserved_88',0
	.word	14810
	.byte	20,3,35,136,1,13
	.byte	'PDR',0
	.word	62920
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	62082
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	62665
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	62540
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	62022
	.byte	4,3,35,172,1,13
	.byte	'EVRSTAT',0
	.word	61518
	.byte	4,3,35,176,1,13
	.byte	'EVRDVSTAT',0
	.word	60496
	.byte	4,3,35,180,1,13
	.byte	'EVR13CON',0
	.word	60296
	.byte	4,3,35,184,1,13
	.byte	'EVR33CON',0
	.word	60362
	.byte	4,3,35,188,1,13
	.byte	'STSTAT',0
	.word	64162
	.byte	4,3,35,192,1,13
	.byte	'reserved_C4',0
	.word	2273
	.byte	4,3,35,196,1,13
	.byte	'PMSWCR0',0
	.word	63573
	.byte	4,3,35,200,1,13
	.byte	'PMSWSTAT',0
	.word	63768
	.byte	4,3,35,204,1,13
	.byte	'PMSWSTATCLR',0
	.word	63834
	.byte	4,3,35,208,1,13
	.byte	'PMCSR',0
	.word	65027
	.byte	8,3,35,212,1,13
	.byte	'reserved_DC',0
	.word	2273
	.byte	4,3,35,220,1,13
	.byte	'DTSSTAT',0
	.word	59916
	.byte	4,3,35,224,1,13
	.byte	'DTSCON',0
	.word	59788
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	63638
	.byte	4,3,35,232,1,13
	.byte	'PMSWCR2',0
	.word	63703
	.byte	4,3,35,236,1,13
	.byte	'WDTS',0
	.word	65036
	.byte	12,3,35,240,1,13
	.byte	'EMSR',0
	.word	60105
	.byte	4,3,35,252,1,13
	.byte	'WDTCPU',0
	.word	65050
	.byte	24,3,35,128,2,13
	.byte	'reserved_118',0
	.word	2949
	.byte	12,3,35,152,2,13
	.byte	'TRAPSTAT',0
	.word	64551
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	64486
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	64356
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS',0
	.word	64421
	.byte	4,3,35,176,2,13
	.byte	'reserved_134',0
	.word	2273
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	62348
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	62412
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	59724
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	62477
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	3836
	.byte	8,3,35,200,2,13
	.byte	'SAFECON',0
	.word	64097
	.byte	4,3,35,208,2,13
	.byte	'reserved_154',0
	.word	34790
	.byte	16,3,35,212,2,13
	.byte	'LBISTCTRL0',0
	.word	62144
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	62212
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	62280
	.byte	4,3,35,236,2,13
	.byte	'reserved_170',0
	.word	2682
	.byte	28,3,35,240,2,13
	.byte	'PDISC',0
	.word	62857
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	3836
	.byte	8,3,35,144,3,13
	.byte	'EVRTRIM',0
	.word	61583
	.byte	4,3,35,152,3,13
	.byte	'EVRADCSTAT',0
	.word	60428
	.byte	4,3,35,156,3,13
	.byte	'EVRUVMON',0
	.word	61648
	.byte	4,3,35,160,3,13
	.byte	'EVROVMON',0
	.word	60699
	.byte	4,3,35,164,3,13
	.byte	'EVRMONCTRL',0
	.word	60563
	.byte	4,3,35,168,3,13
	.byte	'reserved_1AC',0
	.word	2273
	.byte	4,3,35,172,3,13
	.byte	'EVRSDCTRL1',0
	.word	61246
	.byte	4,3,35,176,3,13
	.byte	'EVRSDCTRL2',0
	.word	61314
	.byte	4,3,35,180,3,13
	.byte	'EVRSDCTRL3',0
	.word	61382
	.byte	4,3,35,184,3,13
	.byte	'EVRSDCTRL4',0
	.word	61450
	.byte	4,3,35,188,3,13
	.byte	'EVRSDCOEFF1',0
	.word	60832
	.byte	4,3,35,192,3,13
	.byte	'EVRSDCOEFF2',0
	.word	60901
	.byte	4,3,35,196,3,13
	.byte	'EVRSDCOEFF3',0
	.word	60970
	.byte	4,3,35,200,3,13
	.byte	'EVRSDCOEFF4',0
	.word	61039
	.byte	4,3,35,204,3,13
	.byte	'EVRSDCOEFF5',0
	.word	61108
	.byte	4,3,35,208,3,13
	.byte	'EVRSDCOEFF6',0
	.word	61177
	.byte	4,3,35,212,3,13
	.byte	'EVROSCCTRL',0
	.word	60631
	.byte	4,3,35,216,3,13
	.byte	'reserved_1DC',0
	.word	2273
	.byte	4,3,35,220,3,13
	.byte	'OVCENABLE',0
	.word	62790
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	62726
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	34425
	.byte	40,3,35,232,3,13
	.byte	'EICR',0
	.word	65055
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	60043
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	61839
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	62981
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	65064
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	2273
	.byte	4,3,35,188,4,13
	.byte	'DTSLIM',0
	.word	59852
	.byte	4,3,35,192,4,13
	.byte	'reserved_244',0
	.word	65073
	.byte	180,3,3,35,196,4,13
	.byte	'ACCEN1',0
	.word	59075
	.byte	4,3,35,248,7,13
	.byte	'ACCEN0',0
	.word	59011
	.byte	4,3,35,252,7,0,14
	.word	65084
	.byte	33
	.byte	'Ifx_SCU',0,7,181,16,3
	.word	67074
	.byte	33
	.byte	'IfxFft_Input',0,8,79,3
	.word	32566
	.byte	33
	.byte	'IfxFft_Length',0,8,95,3
	.word	5864
	.byte	33
	.byte	'IfxFft_Operation',0,8,104,3
	.word	32748
	.byte	33
	.byte	'IfxFft_Output',0,8,113,3
	.word	32682
	.byte	15,8,117,9,1,16
	.byte	'IfxFft_SuspendMode_none',0,0,16
	.byte	'IfxFft_SuspendMode_hard',0,1,16
	.byte	'IfxFft_SuspendMode_soft',0,2,0,33
	.byte	'IfxFft_SuspendMode',0,8,122,3
	.word	67186
	.byte	33
	.byte	'IfxDma_ChannelId',0,17,156,1,3
	.word	25211
	.byte	33
	.byte	'Ifx_DMA_ACCEN00_Bits',0,16,79,3
	.word	15087
	.byte	33
	.byte	'Ifx_DMA_ACCEN01_Bits',0,16,85,3
	.word	15657
	.byte	33
	.byte	'Ifx_DMA_ACCEN10_Bits',0,16,122,3
	.word	15747
	.byte	33
	.byte	'Ifx_DMA_ACCEN11_Bits',0,16,128,1,3
	.word	16317
	.byte	33
	.byte	'Ifx_DMA_ACCEN20_Bits',0,16,165,1,3
	.word	16407
	.byte	33
	.byte	'Ifx_DMA_ACCEN21_Bits',0,16,171,1,3
	.word	16978
	.byte	33
	.byte	'Ifx_DMA_ACCEN30_Bits',0,16,208,1,3
	.word	17069
	.byte	33
	.byte	'Ifx_DMA_ACCEN31_Bits',0,16,214,1,3
	.word	17640
	.byte	33
	.byte	'Ifx_DMA_BLK_CLRE_Bits',0,16,230,1,3
	.word	18258
	.byte	33
	.byte	'Ifx_DMA_BLK_EER_Bits',0,16,243,1,3
	.word	17742
	.byte	33
	.byte	'Ifx_DMA_BLK_ERRSR_Bits',0,16,132,2,3
	.word	17966
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_ADICR_Bits',0,16,152,2,3
	.word	20170
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_CHCR_Bits',0,16,168,2,3
	.word	20486
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_CHSR_Bits',0,16,184,2,3
	.word	20856
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_DADR_Bits',0,16,190,2,3
	.word	20081
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R0_Bits',0,16,199,2,3
	.word	18721
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R1_Bits',0,16,208,2,3
	.word	18856
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R2_Bits',0,16,217,2,3
	.word	18991
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R3_Bits',0,16,226,2,3
	.word	19126
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R4_Bits',0,16,235,2,3
	.word	19261
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R5_Bits',0,16,244,2,3
	.word	19396
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R6_Bits',0,16,253,2,3
	.word	19531
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R7_Bits',0,16,134,3,3
	.word	19666
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_RDCRC_Bits',0,16,140,3,3
	.word	19810
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_SADR_Bits',0,16,146,3,3
	.word	19992
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_SDCRC_Bits',0,16,152,3,3
	.word	19901
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_SHADR_Bits',0,16,158,3,3
	.word	20765
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_SR_Bits',0,16,169,3,3
	.word	18541
	.byte	33
	.byte	'Ifx_DMA_CH_ADICR_Bits',0,16,189,3,3
	.word	23306
	.byte	33
	.byte	'Ifx_DMA_CH_CHCFGR_Bits',0,16,205,3,3
	.word	23618
	.byte	33
	.byte	'Ifx_DMA_CH_CHCSR_Bits',0,16,226,3,3
	.word	23982
	.byte	33
	.byte	'Ifx_DMA_CH_DADR_Bits',0,16,232,3,3
	.word	23221
	.byte	33
	.byte	'Ifx_DMA_CH_RDCRCR_Bits',0,16,238,3,3
	.word	22960
	.byte	33
	.byte	'Ifx_DMA_CH_SADR_Bits',0,16,244,3,3
	.word	23136
	.byte	33
	.byte	'Ifx_DMA_CH_SDCRCR_Bits',0,16,250,3,3
	.word	23048
	.byte	33
	.byte	'Ifx_DMA_CH_SHADR_Bits',0,16,128,4,3
	.word	23895
	.byte	33
	.byte	'Ifx_DMA_CLC_Bits',0,16,138,4,3
	.word	14531
	.byte	33
	.byte	'Ifx_DMA_ERRINTR_Bits',0,16,145,4,3
	.word	21686
	.byte	33
	.byte	'Ifx_DMA_HRR_Bits',0,16,152,4,3
	.word	22278
	.byte	33
	.byte	'Ifx_DMA_ID_Bits',0,16,160,4,3
	.word	14688
	.byte	33
	.byte	'Ifx_DMA_MEMCON_Bits',0,16,175,4,3
	.word	14819
	.byte	33
	.byte	'Ifx_DMA_MODE_Bits',0,16,182,4,3
	.word	22154
	.byte	33
	.byte	'Ifx_DMA_OTSS_Bits',0,16,191,4,3
	.word	21547
	.byte	33
	.byte	'Ifx_DMA_PRR0_Bits',0,16,200,4,3
	.word	21792
	.byte	33
	.byte	'Ifx_DMA_PRR1_Bits',0,16,209,4,3
	.word	21926
	.byte	33
	.byte	'Ifx_DMA_SUSACR_Bits',0,16,216,4,3
	.word	22518
	.byte	33
	.byte	'Ifx_DMA_SUSENR_Bits',0,16,223,4,3
	.word	22401
	.byte	33
	.byte	'Ifx_DMA_TIME_Bits',0,16,229,4,3
	.word	22060
	.byte	33
	.byte	'Ifx_DMA_TSR_Bits',0,16,248,4,3
	.word	22635
	.byte	33
	.byte	'Ifx_DMA_ACCEN00',0,16,133,5,3
	.word	15617
	.byte	33
	.byte	'Ifx_DMA_ACCEN01',0,16,141,5,3
	.word	15707
	.byte	33
	.byte	'Ifx_DMA_ACCEN10',0,16,149,5,3
	.word	16277
	.byte	33
	.byte	'Ifx_DMA_ACCEN11',0,16,157,5,3
	.word	16367
	.byte	33
	.byte	'Ifx_DMA_ACCEN20',0,16,165,5,3
	.word	16938
	.byte	33
	.byte	'Ifx_DMA_ACCEN21',0,16,173,5,3
	.word	17029
	.byte	33
	.byte	'Ifx_DMA_ACCEN30',0,16,181,5,3
	.word	17600
	.byte	33
	.byte	'Ifx_DMA_ACCEN31',0,16,189,5,3
	.word	17691
	.byte	33
	.byte	'Ifx_DMA_BLK_CLRE',0,16,197,5,3
	.word	18501
	.byte	33
	.byte	'Ifx_DMA_BLK_EER',0,16,205,5,3
	.word	17926
	.byte	33
	.byte	'Ifx_DMA_BLK_ERRSR',0,16,213,5,3
	.word	18218
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_ADICR',0,16,221,5,3
	.word	20446
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_CHCR',0,16,229,5,3
	.word	20725
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_CHSR',0,16,237,5,3
	.word	21089
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_DADR',0,16,245,5,3
	.word	20130
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R0',0,16,253,5,3
	.word	18816
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R1',0,16,133,6,3
	.word	18951
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R2',0,16,141,6,3
	.word	19086
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R3',0,16,149,6,3
	.word	19221
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R4',0,16,157,6,3
	.word	19356
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R5',0,16,165,6,3
	.word	19491
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R6',0,16,173,6,3
	.word	19626
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_R7',0,16,181,6,3
	.word	19761
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_RDCRC',0,16,189,6,3
	.word	19861
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_SADR',0,16,197,6,3
	.word	20041
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_SDCRC',0,16,205,6,3
	.word	19952
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_SHADR',0,16,213,6,3
	.word	20816
	.byte	33
	.byte	'Ifx_DMA_BLK_ME_SR',0,16,221,6,3
	.word	18681
	.byte	33
	.byte	'Ifx_DMA_CH_ADICR',0,16,229,6,3
	.word	23578
	.byte	33
	.byte	'Ifx_DMA_CH_CHCFGR',0,16,237,6,3
	.word	23855
	.byte	33
	.byte	'Ifx_DMA_CH_CHCSR',0,16,245,6,3
	.word	24289
	.byte	33
	.byte	'Ifx_DMA_CH_DADR',0,16,253,6,3
	.word	23266
	.byte	33
	.byte	'Ifx_DMA_CH_RDCRCR',0,16,133,7,3
	.word	23008
	.byte	33
	.byte	'Ifx_DMA_CH_SADR',0,16,141,7,3
	.word	23181
	.byte	33
	.byte	'Ifx_DMA_CH_SDCRCR',0,16,149,7,3
	.word	23096
	.byte	33
	.byte	'Ifx_DMA_CH_SHADR',0,16,157,7,3
	.word	23942
	.byte	33
	.byte	'Ifx_DMA_CLC',0,16,165,7,3
	.word	14648
	.byte	33
	.byte	'Ifx_DMA_ERRINTR',0,16,173,7,3
	.word	21752
	.byte	33
	.byte	'Ifx_DMA_HRR',0,16,181,7,3
	.word	22340
	.byte	33
	.byte	'Ifx_DMA_ID',0,16,189,7,3
	.word	14770
	.byte	33
	.byte	'Ifx_DMA_MEMCON',0,16,197,7,3
	.word	15047
	.byte	33
	.byte	'Ifx_DMA_MODE',0,16,205,7,3
	.word	22218
	.byte	33
	.byte	'Ifx_DMA_OTSS',0,16,213,7,3
	.word	21646
	.byte	33
	.byte	'Ifx_DMA_PRR0',0,16,221,7,3
	.word	21886
	.byte	33
	.byte	'Ifx_DMA_PRR1',0,16,229,7,3
	.word	22020
	.byte	33
	.byte	'Ifx_DMA_SUSACR',0,16,237,7,3
	.word	22585
	.byte	33
	.byte	'Ifx_DMA_SUSENR',0,16,245,7,3
	.word	22468
	.byte	33
	.byte	'Ifx_DMA_TIME',0,16,253,7,3
	.word	22103
	.byte	33
	.byte	'Ifx_DMA_TSR',0,16,133,8,3
	.word	22910
	.byte	14
	.word	21129
	.byte	33
	.byte	'Ifx_DMA_BLK_ME',0,16,165,8,3
	.word	70077
	.byte	14
	.word	21422
	.byte	33
	.byte	'Ifx_DMA_BLK',0,16,185,8,3
	.word	70106
	.byte	14
	.word	24329
	.byte	33
	.byte	'Ifx_DMA_CH',0,16,198,8,3
	.word	70132
	.byte	14
	.word	24495
	.byte	33
	.byte	'Ifx_DMA',0,16,250,8,3
	.word	70157
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,24,45,16,4,11
	.byte	'ADDR',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_A_Bits',0,24,48,3
	.word	70179
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,24,51,16,4,11
	.byte	'VSS',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	1050
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_BIV_Bits',0,24,55,3
	.word	70240
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,24,58,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	1050
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_BTV_Bits',0,24,62,3
	.word	70319
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,24,65,16,4,11
	.byte	'CountValue',0,4
	.word	1050
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	1050
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_CCNT_Bits',0,24,69,3
	.word	70405
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,24,72,16,4,11
	.byte	'CM',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	1050
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	1050
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	1050
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1050
	.byte	21,0,2,35,0,0,33
	.byte	'Ifx_CPU_CCTRL_Bits',0,24,80,3
	.word	70494
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,24,83,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1050
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_COMPAT_Bits',0,24,89,3
	.word	70640
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,24,92,16,4,11
	.byte	'CORE_ID',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1050
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_CORE_ID_Bits',0,24,96,3
	.word	70767
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,24,99,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	1050
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_L_Bits',0,24,103,3
	.word	70865
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,24,106,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	1050
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_U_Bits',0,24,110,3
	.word	70958
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,24,113,16,4,11
	.byte	'MODREV',0,4
	.word	1050
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	1050
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	1050
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPU_ID_Bits',0,24,118,3
	.word	71051
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,24,121,16,4,11
	.byte	'XE',0,4
	.word	1050
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1050
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_CPXE_Bits',0,24,125,3
	.word	71158
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,24,128,1,16,4,11
	.byte	'EVTA',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1050
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1050
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1050
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_CREVT_Bits',0,24,136,1,3
	.word	71245
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,24,139,1,16,4,11
	.byte	'CID',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1050
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_CUS_ID_Bits',0,24,143,1,3
	.word	71399
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,24,146,1,16,4,11
	.byte	'DATA',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_D_Bits',0,24,149,1,3
	.word	71493
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,24,152,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	1050
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	1050
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	1050
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1050
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	1050
	.byte	1,17,2,35,0,11
	.byte	'SME',0,4
	.word	1050
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1050
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_DATR_Bits',0,24,163,1,3
	.word	71556
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,24,166,1,16,4,11
	.byte	'DE',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	1050
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1050
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	1050
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	1050
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	1050
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	1050
	.byte	19,0,2,35,0,0,33
	.byte	'Ifx_CPU_DBGSR_Bits',0,24,177,1,3
	.word	71774
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,24,180,1,16,4,11
	.byte	'DTA',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1050
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_DBGTCR_Bits',0,24,184,1,3
	.word	71989
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,24,187,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1050
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCON0_Bits',0,24,192,1,3
	.word	72083
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,24,195,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	1050
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	1050
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCON2_Bits',0,24,199,1,3
	.word	72199
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,24,202,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	6,26,2,35,0,11
	.byte	'DCXValue',0,4
	.word	1050
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_CPU_DCX_Bits',0,24,206,1,3
	.word	72300
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,24,209,1,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_DEADD_Bits',0,24,212,1,3
	.word	72393
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,24,215,1,16,4,11
	.byte	'TA',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_DIEAR_Bits',0,24,218,1,3
	.word	72473
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,24,221,1,16,4,11
	.byte	'IED',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	1050
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	1050
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	1050
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	1050
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1050
	.byte	18,0,2,35,0,0,33
	.byte	'Ifx_CPU_DIETR_Bits',0,24,233,1,3
	.word	72542
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,24,236,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'DMSValue',0,4
	.word	1050
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_DMS_Bits',0,24,240,1,3
	.word	72771
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,24,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	1050
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_L_Bits',0,24,247,1,3
	.word	72864
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,24,250,1,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	1050
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_U_Bits',0,24,254,1,3
	.word	72959
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,24,129,2,16,4,11
	.byte	'RE',0,4
	.word	1050
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1050
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPRE_Bits',0,24,133,2,3
	.word	73054
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,24,136,2,16,4,11
	.byte	'WE',0,4
	.word	1050
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1050
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_DPWE_Bits',0,24,140,2,3
	.word	73144
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,24,143,2,16,4,11
	.byte	'SRE',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1050
	.byte	3,26,2,35,0,11
	.byte	'CRE',0,4
	.word	1050
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	1050
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	1050
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	1050
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	1050
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	1050
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	1050
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	1050
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	1050
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1050
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	1050
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1050
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_DSTR_Bits',0,24,161,2,3
	.word	73234
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,24,164,2,16,4,11
	.byte	'EVTA',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1050
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1050
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1050
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_EXEVT_Bits',0,24,172,2,3
	.word	73558
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,24,175,2,16,4,11
	.byte	'FCXO',0,4
	.word	1050
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	1050
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1050
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_FCX_Bits',0,24,180,2,3
	.word	73712
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,24,183,2,16,4,11
	.byte	'TST',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1050
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	1050
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1050
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	1050
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	1050
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	1050
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	1050
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	1050
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	1050
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	1050
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	1050
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	1050
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	1050
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	1050
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	1050
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,24,202,2,3
	.word	73818
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,24,205,2,16,4,11
	.byte	'OPC',0,4
	.word	1050
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	1050
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	1050
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	1050
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1050
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,24,212,2,3
	.word	74167
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,24,215,2,16,4,11
	.byte	'PC',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,24,218,2,3
	.word	74327
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,24,221,2,16,4,11
	.byte	'SRC1',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,24,224,2,3
	.word	74408
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,24,227,2,16,4,11
	.byte	'SRC2',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,24,230,2,3
	.word	74495
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,24,233,2,16,4,11
	.byte	'SRC3',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,24,236,2,3
	.word	74582
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,24,239,2,16,4,11
	.byte	'CountValue',0,4
	.word	1050
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	1050
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_ICNT_Bits',0,24,243,2,3
	.word	74669
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,24,246,2,16,4,11
	.byte	'CCPN',0,4
	.word	1050
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1050
	.byte	5,17,2,35,0,11
	.byte	'IE',0,4
	.word	1050
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	1050
	.byte	10,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	1050
	.byte	6,0,2,35,0,0,33
	.byte	'Ifx_CPU_ICR_Bits',0,24,253,2,3
	.word	74760
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,24,128,3,16,4,11
	.byte	'ISP',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_ISP_Bits',0,24,131,3,3
	.word	74903
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,24,134,3,16,4,11
	.byte	'LCXO',0,4
	.word	1050
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	1050
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	1050
	.byte	12,0,2,35,0,0,33
	.byte	'Ifx_CPU_LCX_Bits',0,24,139,3,3
	.word	74969
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,24,142,3,16,4,11
	.byte	'CountValue',0,4
	.word	1050
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	1050
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M1CNT_Bits',0,24,146,3,3
	.word	75075
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,24,149,3,16,4,11
	.byte	'CountValue',0,4
	.word	1050
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	1050
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M2CNT_Bits',0,24,153,3,3
	.word	75168
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,24,156,3,16,4,11
	.byte	'CountValue',0,4
	.word	1050
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	1050
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_M3CNT_Bits',0,24,160,3,3
	.word	75261
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,24,163,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	1050
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_CPU_PC_Bits',0,24,167,3,3
	.word	75354
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,24,170,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1050
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON0_Bits',0,24,175,3,3
	.word	75439
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,24,178,3,16,4,11
	.byte	'PCINV',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	1050
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON1_Bits',0,24,183,3,3
	.word	75555
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,24,186,3,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	1050
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	1050
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCON2_Bits',0,24,190,3,3
	.word	75666
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,24,193,3,16,4,11
	.byte	'PCXO',0,4
	.word	1050
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	1050
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	1050
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	1050
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	1050
	.byte	10,0,2,35,0,0,33
	.byte	'Ifx_CPU_PCXI_Bits',0,24,200,3,3
	.word	75767
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,24,203,3,16,4,11
	.byte	'TA',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_PIEAR_Bits',0,24,206,3,3
	.word	75897
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,24,209,3,16,4,11
	.byte	'IED',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	1050
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	1050
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	1050
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	1050
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1050
	.byte	18,0,2,35,0,0,33
	.byte	'Ifx_CPU_PIETR_Bits',0,24,221,3,3
	.word	75966
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,24,224,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	13,19,2,35,0,11
	.byte	'DAC',0,4
	.word	1050
	.byte	3,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1050
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA0_Bits',0,24,229,3,3
	.word	76195
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,24,232,3,16,4,11
	.byte	'reserved_0',0,4
	.word	1050
	.byte	14,18,2,35,0,11
	.byte	'CAC',0,4
	.word	1050
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1050
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA1_Bits',0,24,237,3,3
	.word	76308
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,24,240,3,16,4,11
	.byte	'PSI',0,4
	.word	1050
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	1050
	.byte	16,0,2,35,0,0,33
	.byte	'Ifx_CPU_PMA2_Bits',0,24,244,3,3
	.word	76421
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,24,247,3,16,4,11
	.byte	'FRE',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1050
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	1050
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	1050
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	1050
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	1050
	.byte	17,0,2,35,0,0,33
	.byte	'Ifx_CPU_PSTR_Bits',0,24,129,4,3
	.word	76512
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,24,132,4,16,4,11
	.byte	'CDC',0,4
	.word	1050
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	1050
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	1050
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	1050
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	1050
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	1050
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	1050
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	1050
	.byte	12,5,2,35,0,11
	.byte	'SAV',0,4
	.word	1050
	.byte	1,4,2,35,0,11
	.byte	'AV',0,4
	.word	1050
	.byte	1,3,2,35,0,11
	.byte	'SV',0,4
	.word	1050
	.byte	1,2,2,35,0,11
	.byte	'V',0,4
	.word	1050
	.byte	1,1,2,35,0,11
	.byte	'C',0,4
	.word	1050
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_PSW_Bits',0,24,147,4,3
	.word	76715
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,24,150,4,16,4,11
	.byte	'ADFLIP',0,4
	.word	1050
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	1050
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	1050
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	1050
	.byte	1,0,2,35,0,0,33
	.byte	'Ifx_CPU_SEGEN_Bits',0,24,156,4,3
	.word	76958
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,24,159,4,16,4,11
	.byte	'PC',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'PT',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1050
	.byte	5,24,2,35,0,11
	.byte	'DC',0,4
	.word	1050
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	1050
	.byte	1,22,2,35,0,11
	.byte	'DT',0,4
	.word	1050
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	1050
	.byte	13,8,2,35,0,11
	.byte	'IODT',0,4
	.word	1050
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	1050
	.byte	7,0,2,35,0,0,33
	.byte	'Ifx_CPU_SMACON_Bits',0,24,171,4,3
	.word	77086
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,24,174,4,16,4,11
	.byte	'EN',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,24,177,4,3
	.word	77327
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,24,180,4,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,24,183,4,3
	.word	77410
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,24,186,4,16,4,11
	.byte	'EN',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,24,189,4,3
	.word	77501
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,24,192,4,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,24,195,4,3
	.word	77592
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,24,198,4,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	433
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,24,202,4,3
	.word	77691
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,24,205,4,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	433
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,24,209,4,3
	.word	77798
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,24,212,4,16,4,11
	.byte	'EVTA',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1050
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1050
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1050
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_SWEVT_Bits',0,24,220,4,3
	.word	77905
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,24,223,4,16,4,11
	.byte	'FCDSF',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'IT',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1050
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_SYSCON_Bits',0,24,231,4,3
	.word	78059
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,24,234,4,16,4,11
	.byte	'ASI',0,4
	.word	1050
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	1050
	.byte	27,0,2,35,0,0,33
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,24,238,4,3
	.word	78220
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,24,241,4,16,4,11
	.byte	'TEXP0',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	1050
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	1050
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	1050
	.byte	15,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_CON_Bits',0,24,249,4,3
	.word	78318
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,24,252,4,16,4,11
	.byte	'Timer',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,24,255,4,3
	.word	78490
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,24,130,5,16,4,11
	.byte	'ADDR',0,4
	.word	1050
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_CPU_TR_ADR_Bits',0,24,133,5,3
	.word	78570
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,24,136,5,16,4,11
	.byte	'EVTA',0,4
	.word	1050
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	1050
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	1050
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1050
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	1050
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	1050
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	1050
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	1050
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	1050
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	1050
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	1050
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	1050
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	1050
	.byte	3,0,2,35,0,0,33
	.byte	'Ifx_CPU_TR_EVT_Bits',0,24,153,5,3
	.word	78643
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,24,156,5,16,4,11
	.byte	'T0',0,4
	.word	1050
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	1050
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	1050
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	1050
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	1050
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	1050
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	1050
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	1050
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	1050
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,24,167,5,3
	.word	78961
	.byte	12,24,175,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70179
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_A',0,24,180,5,3
	.word	79156
	.byte	12,24,183,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70240
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BIV',0,24,188,5,3
	.word	79215
	.byte	12,24,191,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70319
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_BTV',0,24,196,5,3
	.word	79276
	.byte	12,24,199,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70405
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CCNT',0,24,204,5,3
	.word	79337
	.byte	12,24,207,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70494
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CCTRL',0,24,212,5,3
	.word	79399
	.byte	12,24,215,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70640
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_COMPAT',0,24,220,5,3
	.word	79462
	.byte	12,24,223,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70767
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CORE_ID',0,24,228,5,3
	.word	79526
	.byte	12,24,231,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70865
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_L',0,24,236,5,3
	.word	79591
	.byte	12,24,239,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70958
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPR_U',0,24,244,5,3
	.word	79654
	.byte	12,24,247,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71051
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPU_ID',0,24,252,5,3
	.word	79717
	.byte	12,24,255,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71158
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CPXE',0,24,132,6,3
	.word	79781
	.byte	12,24,135,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71245
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CREVT',0,24,140,6,3
	.word	79843
	.byte	12,24,143,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71399
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_CUS_ID',0,24,148,6,3
	.word	79906
	.byte	12,24,151,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71493
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_D',0,24,156,6,3
	.word	79970
	.byte	12,24,159,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71556
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DATR',0,24,164,6,3
	.word	80029
	.byte	12,24,167,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71774
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DBGSR',0,24,172,6,3
	.word	80091
	.byte	12,24,175,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71989
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DBGTCR',0,24,180,6,3
	.word	80154
	.byte	12,24,183,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72083
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCON0',0,24,188,6,3
	.word	80218
	.byte	12,24,191,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72199
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCON2',0,24,196,6,3
	.word	80281
	.byte	12,24,199,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72300
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DCX',0,24,204,6,3
	.word	80344
	.byte	12,24,207,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72393
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DEADD',0,24,212,6,3
	.word	80405
	.byte	12,24,215,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72473
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DIEAR',0,24,220,6,3
	.word	80468
	.byte	12,24,223,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72542
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DIETR',0,24,228,6,3
	.word	80531
	.byte	12,24,231,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72771
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DMS',0,24,236,6,3
	.word	80594
	.byte	12,24,239,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72864
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_L',0,24,244,6,3
	.word	80655
	.byte	12,24,247,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72959
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPR_U',0,24,252,6,3
	.word	80718
	.byte	12,24,255,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73054
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPRE',0,24,132,7,3
	.word	80781
	.byte	12,24,135,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73144
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DPWE',0,24,140,7,3
	.word	80843
	.byte	12,24,143,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73234
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_DSTR',0,24,148,7,3
	.word	80905
	.byte	12,24,151,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73558
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_EXEVT',0,24,156,7,3
	.word	80967
	.byte	12,24,159,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73712
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FCX',0,24,164,7,3
	.word	81030
	.byte	12,24,167,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73818
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,24,172,7,3
	.word	81091
	.byte	12,24,175,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74167
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,24,180,7,3
	.word	81161
	.byte	12,24,183,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74327
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,24,188,7,3
	.word	81231
	.byte	12,24,191,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74408
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,24,196,7,3
	.word	81300
	.byte	12,24,199,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74495
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,24,204,7,3
	.word	81371
	.byte	12,24,207,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74582
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,24,212,7,3
	.word	81442
	.byte	12,24,215,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74669
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ICNT',0,24,220,7,3
	.word	81513
	.byte	12,24,223,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74760
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ICR',0,24,228,7,3
	.word	81575
	.byte	12,24,231,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74903
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_ISP',0,24,236,7,3
	.word	81636
	.byte	12,24,239,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74969
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_LCX',0,24,244,7,3
	.word	81697
	.byte	12,24,247,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75075
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M1CNT',0,24,252,7,3
	.word	81758
	.byte	12,24,255,7,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75168
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M2CNT',0,24,132,8,3
	.word	81821
	.byte	12,24,135,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75261
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_M3CNT',0,24,140,8,3
	.word	81884
	.byte	12,24,143,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75354
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PC',0,24,148,8,3
	.word	81947
	.byte	12,24,151,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75439
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON0',0,24,156,8,3
	.word	82007
	.byte	12,24,159,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75555
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON1',0,24,164,8,3
	.word	82070
	.byte	12,24,167,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75666
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCON2',0,24,172,8,3
	.word	82133
	.byte	12,24,175,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75767
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PCXI',0,24,180,8,3
	.word	82196
	.byte	12,24,183,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75897
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PIEAR',0,24,188,8,3
	.word	82258
	.byte	12,24,191,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75966
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PIETR',0,24,196,8,3
	.word	82321
	.byte	12,24,199,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76195
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA0',0,24,204,8,3
	.word	82384
	.byte	12,24,207,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76308
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA1',0,24,212,8,3
	.word	82446
	.byte	12,24,215,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76421
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PMA2',0,24,220,8,3
	.word	82508
	.byte	12,24,223,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76512
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PSTR',0,24,228,8,3
	.word	82570
	.byte	12,24,231,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76715
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_PSW',0,24,236,8,3
	.word	82632
	.byte	12,24,239,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76958
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SEGEN',0,24,244,8,3
	.word	82693
	.byte	12,24,247,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77086
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SMACON',0,24,252,8,3
	.word	82756
	.byte	12,24,255,8,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77327
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_ACCENA',0,24,132,9,3
	.word	82820
	.byte	12,24,135,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77410
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_ACCENB',0,24,140,9,3
	.word	82890
	.byte	12,24,143,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77501
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,24,148,9,3
	.word	82960
	.byte	12,24,151,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77592
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,24,156,9,3
	.word	83034
	.byte	12,24,159,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77691
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,24,164,9,3
	.word	83108
	.byte	12,24,167,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77798
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,24,172,9,3
	.word	83178
	.byte	12,24,175,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77905
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SWEVT',0,24,180,9,3
	.word	83248
	.byte	12,24,183,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78059
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_SYSCON',0,24,188,9,3
	.word	83311
	.byte	12,24,191,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78220
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TASK_ASI',0,24,196,9,3
	.word	83375
	.byte	12,24,199,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78318
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_CON',0,24,204,9,3
	.word	83441
	.byte	12,24,207,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78490
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TPS_TIMER',0,24,212,9,3
	.word	83506
	.byte	12,24,215,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78570
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TR_ADR',0,24,220,9,3
	.word	83573
	.byte	12,24,223,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78643
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TR_EVT',0,24,228,9,3
	.word	83637
	.byte	12,24,231,9,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78961
	.byte	4,2,35,0,0,33
	.byte	'Ifx_CPU_TRIG_ACC',0,24,236,9,3
	.word	83701
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,24,247,9,25,8,13
	.byte	'L',0
	.word	79591
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	79654
	.byte	4,2,35,4,0,14
	.word	83767
	.byte	33
	.byte	'Ifx_CPU_CPR',0,24,251,9,3
	.word	83809
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,24,254,9,25,8,13
	.byte	'L',0
	.word	80655
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	80718
	.byte	4,2,35,4,0,14
	.word	83835
	.byte	33
	.byte	'Ifx_CPU_DPR',0,24,130,10,3
	.word	83877
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN',0,24,133,10,25,16,13
	.byte	'LA',0
	.word	83108
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	83178
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	82960
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	83034
	.byte	4,2,35,12,0,14
	.word	83903
	.byte	33
	.byte	'Ifx_CPU_SPROT_RGN',0,24,139,10,3
	.word	83985
	.byte	18,12
	.word	83506
	.byte	19,2,0,10
	.byte	'_Ifx_CPU_TPS',0,24,142,10,25,16,13
	.byte	'CON',0
	.word	83441
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	84017
	.byte	12,2,35,4,0,14
	.word	84026
	.byte	33
	.byte	'Ifx_CPU_TPS',0,24,146,10,3
	.word	84074
	.byte	10
	.byte	'_Ifx_CPU_TR',0,24,149,10,25,8,13
	.byte	'EVT',0
	.word	83637
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	83573
	.byte	4,2,35,4,0,14
	.word	84100
	.byte	33
	.byte	'Ifx_CPU_TR',0,24,153,10,3
	.word	84145
	.byte	18,176,32
	.word	456
	.byte	19,175,32,0,18,208,223,1
	.word	456
	.byte	19,207,223,1,0,18,248,1
	.word	456
	.byte	19,247,1,0,18,244,29
	.word	456
	.byte	19,243,29,0,18,188,3
	.word	456
	.byte	19,187,3,0,18,232,3
	.word	456
	.byte	19,231,3,0,18,252,23
	.word	456
	.byte	19,251,23,0,18,228,63
	.word	456
	.byte	19,227,63,0,18,128,1
	.word	83835
	.byte	19,15,0,14
	.word	84260
	.byte	18,64
	.word	83767
	.byte	19,7,0,14
	.word	84275
	.byte	18,192,31
	.word	456
	.byte	19,191,31,0,18,16
	.word	79781
	.byte	19,3,0,18,16
	.word	80781
	.byte	19,3,0,18,16
	.word	80843
	.byte	19,3,0,18,208,7
	.word	456
	.byte	19,207,7,0,14
	.word	84026
	.byte	18,240,23
	.word	456
	.byte	19,239,23,0,18,64
	.word	84100
	.byte	19,7,0,14
	.word	84354
	.byte	18,192,23
	.word	456
	.byte	19,191,23,0,18,232,1
	.word	456
	.byte	19,231,1,0,18,180,1
	.word	456
	.byte	19,179,1,0,18,172,1
	.word	456
	.byte	19,171,1,0,18,64
	.word	79970
	.byte	19,15,0,18,64
	.word	456
	.byte	19,63,0,18,64
	.word	79156
	.byte	19,15,0,10
	.byte	'_Ifx_CPU',0,24,166,10,25,128,128,4,13
	.byte	'reserved_0',0
	.word	84170
	.byte	176,32,2,35,0,13
	.byte	'SEGEN',0
	.word	82693
	.byte	4,3,35,176,32,13
	.byte	'reserved_1034',0
	.word	84181
	.byte	208,223,1,3,35,180,32,13
	.byte	'TASK_ASI',0
	.word	83375
	.byte	4,4,35,132,128,2,13
	.byte	'reserved_8008',0
	.word	84194
	.byte	248,1,4,35,136,128,2,13
	.byte	'PMA0',0
	.word	82384
	.byte	4,4,35,128,130,2,13
	.byte	'PMA1',0
	.word	82446
	.byte	4,4,35,132,130,2,13
	.byte	'PMA2',0
	.word	82508
	.byte	4,4,35,136,130,2,13
	.byte	'reserved_810C',0
	.word	84205
	.byte	244,29,4,35,140,130,2,13
	.byte	'DCON2',0
	.word	80281
	.byte	4,4,35,128,160,2,13
	.byte	'reserved_9004',0
	.word	3836
	.byte	8,4,35,132,160,2,13
	.byte	'SMACON',0
	.word	82756
	.byte	4,4,35,140,160,2,13
	.byte	'DSTR',0
	.word	80905
	.byte	4,4,35,144,160,2,13
	.byte	'reserved_9014',0
	.word	2273
	.byte	4,4,35,148,160,2,13
	.byte	'DATR',0
	.word	80029
	.byte	4,4,35,152,160,2,13
	.byte	'DEADD',0
	.word	80405
	.byte	4,4,35,156,160,2,13
	.byte	'DIEAR',0
	.word	80468
	.byte	4,4,35,160,160,2,13
	.byte	'DIETR',0
	.word	80531
	.byte	4,4,35,164,160,2,13
	.byte	'reserved_9028',0
	.word	8806
	.byte	24,4,35,168,160,2,13
	.byte	'DCON0',0
	.word	80218
	.byte	4,4,35,192,160,2,13
	.byte	'reserved_9044',0
	.word	84216
	.byte	188,3,4,35,196,160,2,13
	.byte	'PSTR',0
	.word	82570
	.byte	4,4,35,128,164,2,13
	.byte	'PCON1',0
	.word	82070
	.byte	4,4,35,132,164,2,13
	.byte	'PCON2',0
	.word	82133
	.byte	4,4,35,136,164,2,13
	.byte	'PCON0',0
	.word	82007
	.byte	4,4,35,140,164,2,13
	.byte	'PIEAR',0
	.word	82258
	.byte	4,4,35,144,164,2,13
	.byte	'PIETR',0
	.word	82321
	.byte	4,4,35,148,164,2,13
	.byte	'reserved_9218',0
	.word	84227
	.byte	232,3,4,35,152,164,2,13
	.byte	'COMPAT',0
	.word	79462
	.byte	4,4,35,128,168,2,13
	.byte	'reserved_9404',0
	.word	84238
	.byte	252,23,4,35,132,168,2,13
	.byte	'FPU_TRAP_CON',0
	.word	81091
	.byte	4,4,35,128,192,2,13
	.byte	'FPU_TRAP_PC',0
	.word	81231
	.byte	4,4,35,132,192,2,13
	.byte	'FPU_TRAP_OPC',0
	.word	81161
	.byte	4,4,35,136,192,2,13
	.byte	'reserved_A00C',0
	.word	2273
	.byte	4,4,35,140,192,2,13
	.byte	'FPU_TRAP_SRC1',0
	.word	81300
	.byte	4,4,35,144,192,2,13
	.byte	'FPU_TRAP_SRC2',0
	.word	81371
	.byte	4,4,35,148,192,2,13
	.byte	'FPU_TRAP_SRC3',0
	.word	81442
	.byte	4,4,35,152,192,2,13
	.byte	'reserved_A01C',0
	.word	84249
	.byte	228,63,4,35,156,192,2,13
	.byte	'DPR',0
	.word	84270
	.byte	128,1,4,35,128,128,3,13
	.byte	'reserved_C080',0
	.word	21522
	.byte	128,31,4,35,128,129,3,13
	.byte	'CPR',0
	.word	84284
	.byte	64,4,35,128,160,3,13
	.byte	'reserved_D040',0
	.word	84289
	.byte	192,31,4,35,192,160,3,13
	.byte	'CPXE',0
	.word	84300
	.byte	16,4,35,128,192,3,13
	.byte	'DPRE',0
	.word	84309
	.byte	16,4,35,144,192,3,13
	.byte	'DPWE',0
	.word	84318
	.byte	16,4,35,160,192,3,13
	.byte	'reserved_E030',0
	.word	84327
	.byte	208,7,4,35,176,192,3,13
	.byte	'TPS',0
	.word	84338
	.byte	16,4,35,128,200,3,13
	.byte	'reserved_E410',0
	.word	84343
	.byte	240,23,4,35,144,200,3,13
	.byte	'TR',0
	.word	84363
	.byte	64,4,35,128,224,3,13
	.byte	'reserved_F040',0
	.word	84368
	.byte	192,23,4,35,192,224,3,13
	.byte	'CCTRL',0
	.word	79399
	.byte	4,4,35,128,248,3,13
	.byte	'CCNT',0
	.word	79337
	.byte	4,4,35,132,248,3,13
	.byte	'ICNT',0
	.word	81513
	.byte	4,4,35,136,248,3,13
	.byte	'M1CNT',0
	.word	81758
	.byte	4,4,35,140,248,3,13
	.byte	'M2CNT',0
	.word	81821
	.byte	4,4,35,144,248,3,13
	.byte	'M3CNT',0
	.word	81884
	.byte	4,4,35,148,248,3,13
	.byte	'reserved_FC18',0
	.word	84379
	.byte	232,1,4,35,152,248,3,13
	.byte	'DBGSR',0
	.word	80091
	.byte	4,4,35,128,250,3,13
	.byte	'reserved_FD04',0
	.word	2273
	.byte	4,4,35,132,250,3,13
	.byte	'EXEVT',0
	.word	80967
	.byte	4,4,35,136,250,3,13
	.byte	'CREVT',0
	.word	79843
	.byte	4,4,35,140,250,3,13
	.byte	'SWEVT',0
	.word	83248
	.byte	4,4,35,144,250,3,13
	.byte	'reserved_FD14',0
	.word	2682
	.byte	28,4,35,148,250,3,13
	.byte	'TRIG_ACC',0
	.word	83701
	.byte	4,4,35,176,250,3,13
	.byte	'reserved_FD34',0
	.word	2949
	.byte	12,4,35,180,250,3,13
	.byte	'DMS',0
	.word	80594
	.byte	4,4,35,192,250,3,13
	.byte	'DCX',0
	.word	80344
	.byte	4,4,35,196,250,3,13
	.byte	'DBGTCR',0
	.word	80154
	.byte	4,4,35,200,250,3,13
	.byte	'reserved_FD4C',0
	.word	84390
	.byte	180,1,4,35,204,250,3,13
	.byte	'PCXI',0
	.word	82196
	.byte	4,4,35,128,252,3,13
	.byte	'PSW',0
	.word	82632
	.byte	4,4,35,132,252,3,13
	.byte	'PC',0
	.word	81947
	.byte	4,4,35,136,252,3,13
	.byte	'reserved_FE0C',0
	.word	3836
	.byte	8,4,35,140,252,3,13
	.byte	'SYSCON',0
	.word	83311
	.byte	4,4,35,148,252,3,13
	.byte	'CPU_ID',0
	.word	79717
	.byte	4,4,35,152,252,3,13
	.byte	'CORE_ID',0
	.word	79526
	.byte	4,4,35,156,252,3,13
	.byte	'BIV',0
	.word	79215
	.byte	4,4,35,160,252,3,13
	.byte	'BTV',0
	.word	79276
	.byte	4,4,35,164,252,3,13
	.byte	'ISP',0
	.word	81636
	.byte	4,4,35,168,252,3,13
	.byte	'ICR',0
	.word	81575
	.byte	4,4,35,172,252,3,13
	.byte	'reserved_FE30',0
	.word	3836
	.byte	8,4,35,176,252,3,13
	.byte	'FCX',0
	.word	81030
	.byte	4,4,35,184,252,3,13
	.byte	'LCX',0
	.word	81697
	.byte	4,4,35,188,252,3,13
	.byte	'reserved_FE40',0
	.word	34790
	.byte	16,4,35,192,252,3,13
	.byte	'CUS_ID',0
	.word	79906
	.byte	4,4,35,208,252,3,13
	.byte	'reserved_FE54',0
	.word	84401
	.byte	172,1,4,35,212,252,3,13
	.byte	'D',0
	.word	84412
	.byte	64,4,35,128,254,3,13
	.byte	'reserved_FF40',0
	.word	84421
	.byte	64,4,35,192,254,3,13
	.byte	'A',0
	.word	84430
	.byte	64,4,35,128,255,3,13
	.byte	'reserved_FFC0',0
	.word	84421
	.byte	64,4,35,192,255,3,0,14
	.word	84439
	.byte	33
	.byte	'Ifx_CPU',0,24,130,11,3
	.word	86230
	.byte	15,12,127,9,1,16
	.byte	'IfxCpu_Id_0',0,0,16
	.byte	'IfxCpu_Id_1',0,1,16
	.byte	'IfxCpu_Id_none',0,2,0,33
	.byte	'IfxCpu_Id',0,12,132,1,3
	.word	86252
	.byte	33
	.byte	'IfxCpu_ResourceCpu',0,12,161,1,3
	.word	6233
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,25,45,16,4,11
	.byte	'EN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_STM_ACCEN0_Bits',0,25,79,3
	.word	86350
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,25,82,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN1_Bits',0,25,85,3
	.word	86907
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,25,88,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CAP_Bits',0,25,91,3
	.word	86984
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,25,94,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CAPSV_Bits',0,25,97,3
	.word	87056
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,25,100,16,4,11
	.byte	'DISR',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_STM_CLC_Bits',0,25,107,3
	.word	87132
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,25,110,16,4,11
	.byte	'MSIZE0',0,1
	.word	456
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	456
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	456
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	456
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	456
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	456
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	456
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	456
	.byte	3,0,2,35,3,0,33
	.byte	'Ifx_STM_CMCON_Bits',0,25,120,3
	.word	87273
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,25,123,16,4,11
	.byte	'CMPVAL',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_CMP_Bits',0,25,126,3
	.word	87491
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,25,129,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	433
	.byte	25,0,2,35,0,0,33
	.byte	'Ifx_STM_ICR_Bits',0,25,139,1,3
	.word	87558
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,25,142,1,16,4,11
	.byte	'MODREV',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_STM_ID_Bits',0,25,147,1,3
	.word	87761
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,25,150,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_STM_ISCR_Bits',0,25,157,1,3
	.word	87868
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,25,160,1,16,4,11
	.byte	'RST',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	433
	.byte	30,0,2,35,0,0,33
	.byte	'Ifx_STM_KRST0_Bits',0,25,165,1,3
	.word	88019
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,25,168,1,16,4,11
	.byte	'RST',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	433
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_STM_KRST1_Bits',0,25,172,1,3
	.word	88130
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,25,175,1,16,4,11
	.byte	'CLR',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	433
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_STM_KRSTCLR_Bits',0,25,179,1,3
	.word	88222
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,25,182,1,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	456
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	456
	.byte	2,0,2,35,3,0,33
	.byte	'Ifx_STM_OCS_Bits',0,25,189,1,3
	.word	88318
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,25,192,1,16,4,11
	.byte	'STM31_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM0_Bits',0,25,195,1,3
	.word	88464
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,25,198,1,16,4,11
	.byte	'STM31_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM0SV_Bits',0,25,201,1,3
	.word	88536
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,25,204,1,16,4,11
	.byte	'STM35_4',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM1_Bits',0,25,207,1,3
	.word	88612
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,25,210,1,16,4,11
	.byte	'STM39_8',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM2_Bits',0,25,213,1,3
	.word	88684
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,25,216,1,16,4,11
	.byte	'STM43_12',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM3_Bits',0,25,219,1,3
	.word	88756
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,25,222,1,16,4,11
	.byte	'STM47_16',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM4_Bits',0,25,225,1,3
	.word	88829
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,25,228,1,16,4,11
	.byte	'STM51_20',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM5_Bits',0,25,231,1,3
	.word	88902
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,25,234,1,16,4,11
	.byte	'STM63_32',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_STM_TIM6_Bits',0,25,237,1,3
	.word	88975
	.byte	12,25,245,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86350
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN0',0,25,250,1,3
	.word	89048
	.byte	12,25,253,1,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86907
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ACCEN1',0,25,130,2,3
	.word	89112
	.byte	12,25,133,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	86984
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CAP',0,25,138,2,3
	.word	89176
	.byte	12,25,141,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87056
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CAPSV',0,25,146,2,3
	.word	89237
	.byte	12,25,149,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87132
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CLC',0,25,154,2,3
	.word	89300
	.byte	12,25,157,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87273
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CMCON',0,25,162,2,3
	.word	89361
	.byte	12,25,165,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87491
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_CMP',0,25,170,2,3
	.word	89424
	.byte	12,25,173,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87558
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ICR',0,25,178,2,3
	.word	89485
	.byte	12,25,181,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87761
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ID',0,25,186,2,3
	.word	89546
	.byte	12,25,189,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	87868
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_ISCR',0,25,194,2,3
	.word	89606
	.byte	12,25,197,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88019
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRST0',0,25,202,2,3
	.word	89668
	.byte	12,25,205,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88130
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRST1',0,25,210,2,3
	.word	89731
	.byte	12,25,213,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88222
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_KRSTCLR',0,25,218,2,3
	.word	89794
	.byte	12,25,221,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88318
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_OCS',0,25,226,2,3
	.word	89859
	.byte	12,25,229,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88464
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM0',0,25,234,2,3
	.word	89920
	.byte	12,25,237,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88536
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM0SV',0,25,242,2,3
	.word	89982
	.byte	12,25,245,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88612
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM1',0,25,250,2,3
	.word	90046
	.byte	12,25,253,2,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88684
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM2',0,25,130,3,3
	.word	90108
	.byte	12,25,133,3,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88756
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM3',0,25,138,3,3
	.word	90170
	.byte	12,25,141,3,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88829
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM4',0,25,146,3,3
	.word	90232
	.byte	12,25,149,3,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88902
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM5',0,25,154,3,3
	.word	90294
	.byte	12,25,157,3,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	88975
	.byte	4,2,35,0,0,33
	.byte	'Ifx_STM_TIM6',0,25,162,3,3
	.word	90356
	.byte	15,11,144,1,9,1,16
	.byte	'IfxCpu_CounterMode_normal',0,0,16
	.byte	'IfxCpu_CounterMode_task',0,1,0,33
	.byte	'IfxCpu_CounterMode',0,11,148,1,3
	.word	90418
	.byte	32,11,160,1,9,6,13
	.byte	'counter',0
	.word	6388
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	456
	.byte	1,2,35,4,0,33
	.byte	'IfxCpu_Counter',0,11,164,1,3
	.word	90507
	.byte	32,11,172,1,9,32,13
	.byte	'instruction',0
	.word	90507
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	90507
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	90507
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	90507
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	90507
	.byte	6,2,35,24,0,33
	.byte	'IfxCpu_Perf',0,11,179,1,3
	.word	90573
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,26,45,16,4,11
	.byte	'EN0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,26,79,3
	.word	90691
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,26,82,16,4,11
	.byte	'reserved_0',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,26,85,3
	.word	91252
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,26,88,16,4,11
	.byte	'SEL',0,1
	.word	456
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	456
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	433
	.byte	22,0,2,35,0,0,33
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,26,95,3
	.word	91333
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,26,98,16,4,11
	.byte	'VLD0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'VLD1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'VLD2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'VLD3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'VLD4',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'VLD5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'VLD6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'VLD7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'VLD8',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'VLD9',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	433
	.byte	22,0,2,35,0,0,33
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,26,111,3
	.word	91486
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,26,114,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	433
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	456
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,26,121,3
	.word	91734
	.byte	10
	.byte	'_Ifx_FLASH_COMM0_Bits',0,26,124,16,4,11
	.byte	'STATUS',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	433
	.byte	24,0,2,35,0,0,33
	.byte	'Ifx_FLASH_COMM0_Bits',0,26,128,1,3
	.word	91880
	.byte	10
	.byte	'_Ifx_FLASH_COMM1_Bits',0,26,131,1,16,4,11
	.byte	'STATUS',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_FLASH_COMM1_Bits',0,26,136,1,3
	.word	91978
	.byte	10
	.byte	'_Ifx_FLASH_COMM2_Bits',0,26,139,1,16,4,11
	.byte	'STATUS',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_FLASH_COMM2_Bits',0,26,144,1,3
	.word	92094
	.byte	10
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,26,147,1,16,4,11
	.byte	'RCODE',0,4
	.word	433
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	951
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_ECCRD_Bits',0,26,153,1,3
	.word	92210
	.byte	10
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,26,156,1,16,4,11
	.byte	'RCODE',0,4
	.word	433
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	951
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_ECCRP_Bits',0,26,162,1,3
	.word	92350
	.byte	10
	.byte	'_Ifx_FLASH_ECCW_Bits',0,26,165,1,16,4,11
	.byte	'WCODE',0,4
	.word	433
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	951
	.byte	8,2,2,35,2,11
	.byte	'DECENCDIS',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'PECENCDIS',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_ECCW_Bits',0,26,171,1,3
	.word	92490
	.byte	10
	.byte	'_Ifx_FLASH_FCON_Bits',0,26,174,1,16,4,11
	.byte	'WSPFLASH',0,1
	.word	456
	.byte	4,4,2,35,0,11
	.byte	'WSECPF',0,1
	.word	456
	.byte	2,2,2,35,0,11
	.byte	'WSDFLASH',0,2
	.word	951
	.byte	6,4,2,35,0,11
	.byte	'WSECDF',0,1
	.word	456
	.byte	3,1,2,35,1,11
	.byte	'IDLE',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'ESLDIS',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'SLEEP',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'NSAFECC',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'STALL',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'RES21',0,1
	.word	456
	.byte	2,2,2,35,2,11
	.byte	'RES23',0,1
	.word	456
	.byte	2,0,2,35,2,11
	.byte	'VOPERM',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'SQERM',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'PROERM',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	456
	.byte	3,2,2,35,3,11
	.byte	'PR5V',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'EOBM',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_FCON_Bits',0,26,193,1,3
	.word	92629
	.byte	10
	.byte	'_Ifx_FLASH_FPRO_Bits',0,26,196,1,16,4,11
	.byte	'PROINP',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'PRODISP',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'PROIND',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'PRODISD',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'PROINHSMCOTP',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'PROINOTP',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'RES7',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'PROINDBG',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'PRODISDBG',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'PROINHSM',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	456
	.byte	5,0,2,35,1,11
	.byte	'DCFP',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'DDFP',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'DDFPX',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'DDFD',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'ENPE',0,1
	.word	456
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	456
	.byte	8,0,2,35,3,0,33
	.byte	'Ifx_FLASH_FPRO_Bits',0,26,218,1,3
	.word	92991
	.byte	10
	.byte	'_Ifx_FLASH_FSR_Bits',0,26,221,1,16,4,11
	.byte	'FABUSY',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'D0BUSY',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'RES1',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'P0BUSY',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'P1BUSY',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'RES6',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'PROG',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'ERASE',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'PFPAGE',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'DFPAGE',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'OPER',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'SQER',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'PROER',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'PFSBER',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'PFDBER',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'PFMBER',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'RES17',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'DFSBER',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'DFDBER',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'DFTBER',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'DFMBER',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'SRIADDERR',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	951
	.byte	2,7,2,35,2,11
	.byte	'PVER',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'EVER',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'SPND',0,1
	.word	456
	.byte	1,4,2,35,3,11
	.byte	'SLM',0,1
	.word	456
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	456
	.byte	1,2,2,35,3,11
	.byte	'ORIER',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_FSR_Bits',0,26,254,1,3
	.word	93432
	.byte	10
	.byte	'_Ifx_FLASH_ID_Bits',0,26,129,2,16,4,11
	.byte	'MODREV',0,1
	.word	456
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	456
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_FLASH_ID_Bits',0,26,134,2,3
	.word	94038
	.byte	10
	.byte	'_Ifx_FLASH_MARD_Bits',0,26,137,2,16,4,11
	.byte	'HMARGIN',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'SELD0',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'SPND',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'SPNDERR',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	951
	.byte	10,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_FLASH_MARD_Bits',0,26,147,2,3
	.word	94149
	.byte	10
	.byte	'_Ifx_FLASH_MARP_Bits',0,26,150,2,16,4,11
	.byte	'SELP0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'SELP1',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'RES2',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'RES3',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	951
	.byte	11,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_FLASH_MARP_Bits',0,26,159,2,3
	.word	94363
	.byte	10
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,26,162,2,16,4,11
	.byte	'L',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'NSAFECC',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'RAMIN',0,1
	.word	456
	.byte	2,4,2,35,0,11
	.byte	'RAMINSEL',0,1
	.word	456
	.byte	4,0,2,35,0,11
	.byte	'OSCCFG',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'MODE',0,1
	.word	456
	.byte	2,5,2,35,1,11
	.byte	'APREN',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'CAP0EN',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'CAP1EN',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'CAP2EN',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'CAP3EN',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'ESR0CNT',0,2
	.word	951
	.byte	12,4,2,35,2,11
	.byte	'RES29',0,1
	.word	456
	.byte	2,2,2,35,3,11
	.byte	'RES30',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_PROCOND_Bits',0,26,179,2,3
	.word	94550
	.byte	10
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,26,182,2,16,4,11
	.byte	'OCDSDIS',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'EDM',0,1
	.word	456
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	433
	.byte	28,0,2,35,0,0,33
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,26,188,2,3
	.word	94874
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,26,191,2,16,4,11
	.byte	'HSMDBGDIS',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'TSTIFLCK',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'HSMTSTDIS',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'RES15',0,2
	.word	951
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,26,199,2,3
	.word	95017
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,26,202,2,16,4,11
	.byte	'HSMBOOTEN',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'SSWWAIT',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'HSMDX',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'HSM6X',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'HSM16X',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'HSM17X',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'HSMENPINS',0,2
	.word	951
	.byte	2,7,2,35,0,11
	.byte	'HSMENRES',0,1
	.word	456
	.byte	2,5,2,35,1,11
	.byte	'DESTDBG',0,1
	.word	456
	.byte	2,3,2,35,1,11
	.byte	'BLKFLAN',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	456
	.byte	2,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	951
	.byte	14,0,2,35,2,0,33
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,26,219,2,3
	.word	95206
	.byte	10
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,26,222,2,16,4,11
	.byte	'S0ROM',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'S1ROM',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'S2ROM',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'S3ROM',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'S4ROM',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'S5ROM',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'S7ROM',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'S8ROM',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'S9ROM',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'S10ROM',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'S11ROM',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'S12ROM',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'S13ROM',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'S14ROM',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'S15ROM',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'S18ROM',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'S19ROM',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'S20ROM',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'S21ROM',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'S22ROM',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'S23ROM',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'S24ROM',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'S25ROM',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'S26ROM',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	456
	.byte	2,3,2,35,3,11
	.byte	'BML',0,1
	.word	456
	.byte	2,1,2,35,3,11
	.byte	'TP',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,26,254,2,3
	.word	95569
	.byte	10
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,26,129,3,16,4,11
	.byte	'S0L',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	456
	.byte	4,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_PROCONP_Bits',0,26,160,3,3
	.word	96164
	.byte	10
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,26,163,3,16,4,11
	.byte	'S0WOP',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'S1WOP',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'S2WOP',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'S3WOP',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'S4WOP',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'S5WOP',0,1
	.word	456
	.byte	1,2,2,35,0,11
	.byte	'S6WOP',0,1
	.word	456
	.byte	1,1,2,35,0,11
	.byte	'S7WOP',0,1
	.word	456
	.byte	1,0,2,35,0,11
	.byte	'S8WOP',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'S9WOP',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'S10WOP',0,1
	.word	456
	.byte	1,5,2,35,1,11
	.byte	'S11WOP',0,1
	.word	456
	.byte	1,4,2,35,1,11
	.byte	'S12WOP',0,1
	.word	456
	.byte	1,3,2,35,1,11
	.byte	'S13WOP',0,1
	.word	456
	.byte	1,2,2,35,1,11
	.byte	'S14WOP',0,1
	.word	456
	.byte	1,1,2,35,1,11
	.byte	'S15WOP',0,1
	.word	456
	.byte	1,0,2,35,1,11
	.byte	'S16WOP',0,1
	.word	456
	.byte	1,7,2,35,2,11
	.byte	'S17WOP',0,1
	.word	456
	.byte	1,6,2,35,2,11
	.byte	'S18WOP',0,1
	.word	456
	.byte	1,5,2,35,2,11
	.byte	'S19WOP',0,1
	.word	456
	.byte	1,4,2,35,2,11
	.byte	'S20WOP',0,1
	.word	456
	.byte	1,3,2,35,2,11
	.byte	'S21WOP',0,1
	.word	456
	.byte	1,2,2,35,2,11
	.byte	'S22WOP',0,1
	.word	456
	.byte	1,1,2,35,2,11
	.byte	'S23WOP',0,1
	.word	456
	.byte	1,0,2,35,2,11
	.byte	'S24WOP',0,1
	.word	456
	.byte	1,7,2,35,3,11
	.byte	'S25WOP',0,1
	.word	456
	.byte	1,6,2,35,3,11
	.byte	'S26WOP',0,1
	.word	456
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	456
	.byte	4,1,2,35,3,11
	.byte	'DATM',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,26,194,3,3
	.word	96688
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,26,197,3,16,4,11
	.byte	'TAG',0,1
	.word	456
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	433
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,26,201,3,3
	.word	97270
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,26,204,3,16,4,11
	.byte	'TAG',0,1
	.word	456
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	433
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,26,208,3,3
	.word	97372
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,26,211,3,16,4,11
	.byte	'TAG',0,1
	.word	456
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	433
	.byte	26,0,2,35,0,0,33
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,26,215,3,3
	.word	97474
	.byte	10
	.byte	'_Ifx_FLASH_RRAD_Bits',0,26,218,3,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	3,5,2,35,0,11
	.byte	'ADD',0,4
	.word	433
	.byte	29,0,2,35,0,0,33
	.byte	'Ifx_FLASH_RRAD_Bits',0,26,222,3,3
	.word	97576
	.byte	10
	.byte	'_Ifx_FLASH_RRCT_Bits',0,26,225,3,16,4,11
	.byte	'STRT',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'STP',0,1
	.word	456
	.byte	1,6,2,35,0,11
	.byte	'BUSY',0,1
	.word	456
	.byte	1,5,2,35,0,11
	.byte	'DONE',0,1
	.word	456
	.byte	1,4,2,35,0,11
	.byte	'ERR',0,1
	.word	456
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	456
	.byte	3,0,2,35,0,11
	.byte	'EOBM',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	456
	.byte	7,0,2,35,1,11
	.byte	'CNT',0,2
	.word	951
	.byte	16,0,2,35,2,0,33
	.byte	'Ifx_FLASH_RRCT_Bits',0,26,236,3,3
	.word	97670
	.byte	10
	.byte	'_Ifx_FLASH_RRD0_Bits',0,26,239,3,16,4,11
	.byte	'DATA',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_FLASH_RRD0_Bits',0,26,242,3,3
	.word	97880
	.byte	10
	.byte	'_Ifx_FLASH_RRD1_Bits',0,26,245,3,16,4,11
	.byte	'DATA',0,4
	.word	433
	.byte	32,0,2,35,0,0,33
	.byte	'Ifx_FLASH_RRD1_Bits',0,26,248,3,3
	.word	97953
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,26,251,3,16,4,11
	.byte	'SEL',0,1
	.word	456
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	456
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	456
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	456
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	433
	.byte	22,0,2,35,0,0,33
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,26,130,4,3
	.word	98026
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,26,133,4,16,4,11
	.byte	'VLD0',0,1
	.word	456
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	433
	.byte	31,0,2,35,0,0,33
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,26,137,4,3
	.word	98181
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,26,140,4,16,4,11
	.byte	'reserved_0',0,1
	.word	456
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	433
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	456
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	456
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	456
	.byte	1,0,2,35,3,0,33
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,26,147,4,3
	.word	98286
	.byte	12,26,155,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90691
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_ACCEN0',0,26,160,4,3
	.word	98434
	.byte	12,26,163,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91252
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_ACCEN1',0,26,168,4,3
	.word	98500
	.byte	12,26,171,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91333
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_CBAB_CFG',0,26,176,4,3
	.word	98566
	.byte	12,26,179,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91486
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_CBAB_STAT',0,26,184,4,3
	.word	98634
	.byte	12,26,187,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91734
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_CBAB_TOP',0,26,192,4,3
	.word	98703
	.byte	12,26,195,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91880
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_COMM0',0,26,200,4,3
	.word	98771
	.byte	12,26,203,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91978
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_COMM1',0,26,208,4,3
	.word	98836
	.byte	12,26,211,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92094
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_COMM2',0,26,216,4,3
	.word	98901
	.byte	12,26,219,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92210
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_ECCRD',0,26,224,4,3
	.word	98966
	.byte	12,26,227,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92350
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_ECCRP',0,26,232,4,3
	.word	99031
	.byte	12,26,235,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92490
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_ECCW',0,26,240,4,3
	.word	99096
	.byte	12,26,243,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92629
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_FCON',0,26,248,4,3
	.word	99160
	.byte	12,26,251,4,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92991
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_FPRO',0,26,128,5,3
	.word	99224
	.byte	12,26,131,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93432
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_FSR',0,26,136,5,3
	.word	99288
	.byte	12,26,139,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94038
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_ID',0,26,144,5,3
	.word	99351
	.byte	12,26,147,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94149
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_MARD',0,26,152,5,3
	.word	99413
	.byte	12,26,155,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94363
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_MARP',0,26,160,5,3
	.word	99477
	.byte	12,26,163,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94550
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_PROCOND',0,26,168,5,3
	.word	99541
	.byte	12,26,171,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94874
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_PROCONDBG',0,26,176,5,3
	.word	99608
	.byte	12,26,179,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95017
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_PROCONHSM',0,26,184,5,3
	.word	99677
	.byte	12,26,187,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95206
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,26,192,5,3
	.word	99746
	.byte	12,26,195,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95569
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_PROCONOTP',0,26,200,5,3
	.word	99819
	.byte	12,26,203,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96164
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_PROCONP',0,26,208,5,3
	.word	99888
	.byte	12,26,211,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96688
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_PROCONWOP',0,26,216,5,3
	.word	99955
	.byte	12,26,219,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97270
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_RDB_CFG0',0,26,224,5,3
	.word	100024
	.byte	12,26,227,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97372
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_RDB_CFG1',0,26,232,5,3
	.word	100092
	.byte	12,26,235,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97474
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_RDB_CFG2',0,26,240,5,3
	.word	100160
	.byte	12,26,243,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97576
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_RRAD',0,26,248,5,3
	.word	100228
	.byte	12,26,251,5,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97670
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_RRCT',0,26,128,6,3
	.word	100292
	.byte	12,26,131,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97880
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_RRD0',0,26,136,6,3
	.word	100356
	.byte	12,26,139,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97953
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_RRD1',0,26,144,6,3
	.word	100420
	.byte	12,26,147,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98026
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_UBAB_CFG',0,26,152,6,3
	.word	100484
	.byte	12,26,155,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98181
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_UBAB_STAT',0,26,160,6,3
	.word	100552
	.byte	12,26,163,6,9,4,13
	.byte	'U',0
	.word	433
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	449
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98286
	.byte	4,2,35,0,0,33
	.byte	'Ifx_FLASH_UBAB_TOP',0,26,168,6,3
	.word	100621
	.byte	10
	.byte	'_Ifx_FLASH_CBAB',0,26,179,6,25,12,13
	.byte	'CFG',0
	.word	98566
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	98634
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	98703
	.byte	4,2,35,8,0,14
	.word	100689
	.byte	33
	.byte	'Ifx_FLASH_CBAB',0,26,184,6,3
	.word	100752
	.byte	10
	.byte	'_Ifx_FLASH_RDB',0,26,187,6,25,12,13
	.byte	'CFG0',0
	.word	100024
	.byte	4,2,35,0,13
	.byte	'CFG1',0
	.word	100092
	.byte	4,2,35,4,13
	.byte	'CFG2',0
	.word	100160
	.byte	4,2,35,8,0,14
	.word	100781
	.byte	33
	.byte	'Ifx_FLASH_RDB',0,26,192,6,3
	.word	100845
	.byte	10
	.byte	'_Ifx_FLASH_UBAB',0,26,195,6,25,12,13
	.byte	'CFG',0
	.word	100484
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	100552
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	100621
	.byte	4,2,35,8,0,14
	.word	100873
	.byte	33
	.byte	'Ifx_FLASH_UBAB',0,26,200,6,3
	.word	100936
	.byte	33
	.byte	'Ifx_P_ACCEN0_Bits',0,14,79,3
	.word	13170
	.byte	33
	.byte	'Ifx_P_ACCEN1_Bits',0,14,85,3
	.word	13083
	.byte	33
	.byte	'Ifx_P_ESR_Bits',0,14,107,3
	.word	9435
	.byte	33
	.byte	'Ifx_P_ID_Bits',0,14,115,3
	.word	7506
	.byte	33
	.byte	'Ifx_P_IN_Bits',0,14,137,1,3
	.word	8492
	.byte	33
	.byte	'Ifx_P_IOCR0_Bits',0,14,150,1,3
	.word	7625
	.byte	33
	.byte	'Ifx_P_IOCR12_Bits',0,14,163,1,3
	.word	8272
	.byte	33
	.byte	'Ifx_P_IOCR4_Bits',0,14,176,1,3
	.word	7840
	.byte	33
	.byte	'Ifx_P_IOCR8_Bits',0,14,189,1,3
	.word	8055
	.byte	33
	.byte	'Ifx_P_LPCR0_Bits',0,14,197,1,3
	.word	12442
	.byte	33
	.byte	'Ifx_P_LPCR1_Bits',0,14,205,1,3
	.word	12566
	.byte	33
	.byte	'Ifx_P_LPCR1_P21_Bits',0,14,215,1,3
	.word	12650
	.byte	33
	.byte	'Ifx_P_LPCR2_Bits',0,14,229,1,3
	.word	12830
	.byte	33
	.byte	'Ifx_P_OMCR0_Bits',0,14,240,1,3
	.word	11081
	.byte	33
	.byte	'Ifx_P_OMCR12_Bits',0,14,250,1,3
	.word	11605
	.byte	33
	.byte	'Ifx_P_OMCR4_Bits',0,14,133,2,3
	.word	11255
	.byte	33
	.byte	'Ifx_P_OMCR8_Bits',0,14,144,2,3
	.word	11429
	.byte	33
	.byte	'Ifx_P_OMCR_Bits',0,14,166,2,3
	.word	12094
	.byte	33
	.byte	'Ifx_P_OMR_Bits',0,14,203,2,3
	.word	6935
	.byte	33
	.byte	'Ifx_P_OMSR0_Bits',0,14,213,2,3
	.word	10418
	.byte	33
	.byte	'Ifx_P_OMSR12_Bits',0,14,224,2,3
	.word	10906
	.byte	33
	.byte	'Ifx_P_OMSR4_Bits',0,14,235,2,3
	.word	10565
	.byte	33
	.byte	'Ifx_P_OMSR8_Bits',0,14,246,2,3
	.word	10734
	.byte	33
	.byte	'Ifx_P_OMSR_Bits',0,14,140,3,3
	.word	11761
	.byte	33
	.byte	'Ifx_P_OUT_Bits',0,14,162,3,3
	.word	6619
	.byte	33
	.byte	'Ifx_P_PCSR_Bits',0,14,180,3,3
	.word	10132
	.byte	33
	.byte	'Ifx_P_PDISC_Bits',0,14,202,3,3
	.word	9766
	.byte	33
	.byte	'Ifx_P_PDR0_Bits',0,14,223,3,3
	.word	8815
	.byte	33
	.byte	'Ifx_P_PDR1_Bits',0,14,244,3,3
	.word	9119
	.byte	33
	.byte	'Ifx_P_ACCEN0',0,14,129,4,3
	.word	13697
	.byte	33
	.byte	'Ifx_P_ACCEN1',0,14,137,4,3
	.word	13130
	.byte	33
	.byte	'Ifx_P_ESR',0,14,145,4,3
	.word	9726
	.byte	33
	.byte	'Ifx_P_ID',0,14,153,4,3
	.word	7585
	.byte	33
	.byte	'Ifx_P_IN',0,14,161,4,3
	.word	8766
	.byte	33
	.byte	'Ifx_P_IOCR0',0,14,169,4,3
	.word	7800
	.byte	33
	.byte	'Ifx_P_IOCR12',0,14,177,4,3
	.word	8452
	.byte	33
	.byte	'Ifx_P_IOCR4',0,14,185,4,3
	.word	8015
	.byte	33
	.byte	'Ifx_P_IOCR8',0,14,193,4,3
	.word	8232
	.byte	33
	.byte	'Ifx_P_LPCR0',0,14,201,4,3
	.word	12526
	.byte	33
	.byte	'Ifx_P_LPCR1',0,14,210,4,3
	.word	12775
	.byte	33
	.byte	'Ifx_P_LPCR2',0,14,218,4,3
	.word	13034
	.byte	33
	.byte	'Ifx_P_OMCR',0,14,226,4,3
	.word	12402
	.byte	33
	.byte	'Ifx_P_OMCR0',0,14,234,4,3
	.word	11215
	.byte	33
	.byte	'Ifx_P_OMCR12',0,14,242,4,3
	.word	11721
	.byte	33
	.byte	'Ifx_P_OMCR4',0,14,250,4,3
	.word	11389
	.byte	33
	.byte	'Ifx_P_OMCR8',0,14,130,5,3
	.word	11565
	.byte	33
	.byte	'Ifx_P_OMR',0,14,138,5,3
	.word	7466
	.byte	33
	.byte	'Ifx_P_OMSR',0,14,146,5,3
	.word	12054
	.byte	33
	.byte	'Ifx_P_OMSR0',0,14,154,5,3
	.word	10525
	.byte	33
	.byte	'Ifx_P_OMSR12',0,14,162,5,3
	.word	11041
	.byte	33
	.byte	'Ifx_P_OMSR4',0,14,170,5,3
	.word	10694
	.byte	33
	.byte	'Ifx_P_OMSR8',0,14,178,5,3
	.word	10866
	.byte	33
	.byte	'Ifx_P_OUT',0,14,186,5,3
	.word	6895
	.byte	33
	.byte	'Ifx_P_PCSR',0,14,194,5,3
	.word	10378
	.byte	33
	.byte	'Ifx_P_PDISC',0,14,202,5,3
	.word	10092
	.byte	33
	.byte	'Ifx_P_PDR0',0,14,210,5,3
	.word	9079
	.byte	33
	.byte	'Ifx_P_PDR1',0,14,218,5,3
	.word	9395
	.byte	14
	.word	13737
	.byte	33
	.byte	'Ifx_P',0,14,139,6,3
	.word	102283
	.byte	15,13,83,9,1,16
	.byte	'IfxPort_InputMode_undefined',0,127,16
	.byte	'IfxPort_InputMode_noPullDevice',0,0,16
	.byte	'IfxPort_InputMode_pullDown',0,8,16
	.byte	'IfxPort_InputMode_pullUp',0,16,0,33
	.byte	'IfxPort_InputMode',0,13,89,3
	.word	102303
	.byte	15,13,120,9,1,16
	.byte	'IfxPort_OutputIdx_general',0,128,1,16
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,16
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,16
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,16
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,16
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,16
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,16
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,33
	.byte	'IfxPort_OutputIdx',0,13,130,1,3
	.word	102454
	.byte	15,13,134,1,9,1,16
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,16
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,33
	.byte	'IfxPort_OutputMode',0,13,138,1,3
	.word	102698
	.byte	15,13,144,1,9,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,16
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,16
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,16
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,16
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,16
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,16
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,16
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,16
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,16
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,33
	.byte	'IfxPort_PadDriver',0,13,158,1,3
	.word	102796
	.byte	33
	.byte	'IfxPort_State',0,13,178,1,3
	.word	14350
	.byte	32,13,190,1,9,8,13
	.byte	'port',0
	.word	14345
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	456
	.byte	1,2,35,4,0,33
	.byte	'IfxPort_Pin',0,13,194,1,3
	.word	103261
	.byte	33
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,27,148,1,16
	.word	172
	.byte	32,27,212,5,9,8,13
	.byte	'value',0
	.word	6388
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	6388
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_CcuconRegConfig',0,27,216,5,3
	.word	103361
	.byte	32,27,221,5,9,8,13
	.byte	'pDivider',0
	.word	456
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	456
	.byte	1,2,35,1,13
	.byte	'k2Initial',0
	.word	456
	.byte	1,2,35,2,13
	.byte	'waitTime',0
	.word	229
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_InitialStepConfig',0,27,227,5,3
	.word	103432
	.byte	32,27,231,5,9,12,13
	.byte	'k2Step',0
	.word	456
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	229
	.byte	4,2,35,2,13
	.byte	'hookFunction',0
	.word	103321
	.byte	4,2,35,8,0,33
	.byte	'IfxScuCcu_PllStepsConfig',0,27,236,5,3
	.word	103549
	.byte	3
	.word	169
	.byte	32,27,244,5,9,48,13
	.byte	'ccucon0',0
	.word	103361
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	103361
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	103361
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	103361
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	103361
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	103361
	.byte	8,2,35,40,0,33
	.byte	'IfxScuCcu_ClockDistributionConfig',0,27,252,5,3
	.word	103651
	.byte	32,27,128,6,9,8,13
	.byte	'value',0
	.word	6388
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	6388
	.byte	4,2,35,4,0,33
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,27,132,6,3
	.word	103803
	.byte	3
	.word	103549
	.byte	32,27,137,6,9,16,13
	.byte	'numOfPllDividerSteps',0
	.word	456
	.byte	1,2,35,0,13
	.byte	'pllDividerStep',0
	.word	103879
	.byte	4,2,35,4,13
	.byte	'pllInitialStep',0
	.word	103432
	.byte	8,2,35,8,0,33
	.byte	'IfxScuCcu_SysPllConfig',0,27,142,6,3
	.word	103884
	.byte	33
	.byte	'IfxDma_ChannelBusPriority',0,15,99,3
	.word	28977
	.byte	33
	.byte	'IfxDma_ChannelIncrementCircular',0,15,122,3
	.word	29445
	.byte	33
	.byte	'IfxDma_ChannelIncrementDirection',0,15,131,1,3
	.word	29351
	.byte	33
	.byte	'IfxDma_ChannelIncrementStep',0,15,146,1,3
	.word	29083
	.byte	33
	.byte	'IfxDma_ChannelInterruptControl',0,15,155,1,3
	.word	30612
	.byte	33
	.byte	'IfxDma_ChannelMove',0,15,170,1,3
	.word	28035
	.byte	33
	.byte	'IfxDma_ChannelMoveSize',0,15,183,1,3
	.word	28427
	.byte	33
	.byte	'IfxDma_ChannelOperationMode',0,15,192,1,3
	.word	28342
	.byte	33
	.byte	'IfxDma_ChannelPattern',0,15,207,1,3
	.word	28621
	.byte	33
	.byte	'IfxDma_ChannelRequestMode',0,15,225,1,3
	.word	28227
	.byte	33
	.byte	'IfxDma_ChannelRequestSource',0,15,234,1,3
	.word	28888
	.byte	33
	.byte	'IfxDma_ChannelShadow',0,15,254,1,3
	.word	30059
	.byte	15,15,128,2,9,1,16
	.byte	'IfxDma_HardwareResourcePartition_0',0,0,16
	.byte	'IfxDma_HardwareResourcePartition_1',0,1,16
	.byte	'IfxDma_HardwareResourcePartition_2',0,2,16
	.byte	'IfxDma_HardwareResourcePartition_3',0,3,0,33
	.byte	'IfxDma_HardwareResourcePartition',0,15,134,2,3
	.word	104424
	.byte	15,15,138,2,9,1,16
	.byte	'IfxDma_MoveEngine_0',0,0,16
	.byte	'IfxDma_MoveEngine_1',0,1,0,33
	.byte	'IfxDma_MoveEngine',0,15,142,2,3
	.word	104621
	.byte	15,15,147,2,9,1,16
	.byte	'IfxDma_SleepMode_enable',0,0,16
	.byte	'IfxDma_SleepMode_disable',0,1,0,33
	.byte	'IfxDma_SleepMode',0,15,151,2,3
	.word	104699
	.byte	33
	.byte	'IfxDma_Dma',0,19,210,3,3
	.word	27867
	.byte	33
	.byte	'IfxDma_Dma_Channel',0,19,223,3,3
	.word	27974
	.byte	33
	.byte	'IfxDma_Dma_ChannelConfig',0,19,135,4,3
	.word	30730
	.byte	33
	.byte	'IfxFft_Fft_Job',0,18,231,1,33
	.word	31986
	.byte	33
	.byte	'IfxFft_Fft',0,18,254,1,3
	.word	32121
	.byte	33
	.byte	'IfxFft_Fft_Count64',0,18,136,2,3
	.word	31916
	.byte	33
	.byte	'IfxFft_Fft_Config',0,18,155,2,3
	.word	32341
	.byte	33
	.byte	'IfxFft_Fft_JobConfig',0,18,171,2,3
	.word	32801
.L406:
	.byte	18,32
	.word	315
	.byte	19,3,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L88:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,4,1,58,15,59,15,57,15,11,15,0,0,16,40,0,3,8,28,13,0,0
	.byte	17,11,1,0,0,18,1,1,11,15,73,19,0,0,19,33,0,47,15,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,0,3,8
	.byte	54,15,39,12,63,12,60,12,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28,29,1,49,19,0,0,29,11,0,49,19,0,0,30
	.byte	46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,31,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,32,19,1,58,15,59,15,57,15,11,15,0,0,33,22,0,3,8,58,15,59,15,57,15,73,19,0,0,34,21,0,54
	.byte	15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L89:
	.word	.L497-.L496
.L496:
	.half	3
	.word	.L499-.L498
.L498:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,4,0,0
	.byte	'IfxScuWdt.h',0,5,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxFft.h',0,6,0,0
	.byte	'IfxFft_regdef.h',0,3,0,0
	.byte	'IfxLmu_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,4,0,0
	.byte	'IfxPort.h',0,7,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxDma.h',0,8,0,0
	.byte	'IfxDma_regdef.h',0,3,0,0
	.byte	'IfxDma_cfg.h',0,4,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.h',0,0,0,0
	.byte	'IfxDma_Dma.h',0,9,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'IfxScu_cfg.h',0,4,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxFlash_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,5,0,0,0
.L499:
.L497:
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_initModule')
	.sect	'.debug_info'
.L90:
	.word	409
	.half	3
	.word	.L91
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L93,.L92
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_initModule',0,1,152,2,6,1,1,1
	.word	.L65,.L172,.L64
	.byte	4
	.byte	'fft',0,1,152,2,40
	.word	.L173,.L174
	.byte	4
	.byte	'config',0,1,152,2,70
	.word	.L175,.L176
	.byte	5
	.word	.L65,.L172
	.byte	6
	.byte	'fftSFR',0,1,155,2,14
	.word	.L177,.L178
	.byte	6
	.byte	'lmuSFR',0,1,156,2,14
	.word	.L179,.L180
	.byte	7
	.word	.L181,.L182,.L12
	.byte	8
	.word	.L183,.L184
	.byte	9
	.word	.L185,.L182,.L12
	.byte	0,7
	.word	.L186,.L187,.L13
	.byte	8
	.word	.L188,.L189
	.byte	8
	.word	.L190,.L191
	.byte	10
	.word	.L192,.L187,.L13
	.byte	6
	.byte	'password',0,2,247,1,12
	.word	.L193,.L194
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_initModule')
	.sect	'.debug_abbrev'
.L91:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_initModule')
	.sect	'.debug_line'
.L92:
	.word	.L501-.L500
.L500:
	.half	3
	.word	.L503-.L502
.L502:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0
	.byte	'IfxFft.h',0,1,0,0,0
.L503:
	.byte	5,6,7,0,5,2
	.word	.L65
	.byte	3,151,2,1,5,29,9
	.half	.L427-.L65
	.byte	3,3,1,9
	.half	.L428-.L427
	.byte	3,1,1,5,14,9
	.half	.L429-.L428
	.byte	3,2,1,9
	.half	.L504-.L429
	.byte	3,1,1,5,21,9
	.half	.L505-.L504
	.byte	3,7,1,5,19,9
	.half	.L506-.L505
	.byte	1,5,21,9
	.half	.L507-.L506
	.byte	3,1,1,5,19,9
	.half	.L430-.L507
	.byte	1,5,21,9
	.half	.L508-.L430
	.byte	3,1,1,5,19,9
	.half	.L509-.L508
	.byte	1,4,2,5,22,9
	.half	.L182-.L509
	.byte	3,17,1,5,28,9
	.half	.L510-.L182
	.byte	1,5,5,9
	.half	.L511-.L510
	.byte	1,4,1,9
	.half	.L12-.L511
	.byte	3,114,1,4,2,5,55,7,9
	.half	.L187-.L12
	.byte	3,76,1,5,21,9
	.half	.L425-.L187
	.byte	1,5,31,9
	.half	.L432-.L425
	.byte	3,1,1,5,18,9
	.half	.L433-.L432
	.byte	3,2,1,5,16,9
	.half	.L512-.L433
	.byte	1,5,29,9
	.half	.L513-.L512
	.byte	3,1,1,4,1,9
	.half	.L13-.L513
	.byte	3,62,1,5,1,9
	.half	.L436-.L13
	.byte	3,14,1,7,9
	.half	.L94-.L436
	.byte	0,1,1
.L501:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_initModule')
	.sect	'.debug_ranges'
.L93:
	.word	-1,.L65,0,.L94-.L65,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_initModuleConfig')
	.sect	'.debug_info'
.L95:
	.word	287
	.half	3
	.word	.L96
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L98,.L97
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_initModuleConfig',0,1,202,2,6,1,1,1
	.word	.L67,.L195,.L66
	.byte	4
	.byte	'config',0,1,202,2,53
	.word	.L196,.L197
	.byte	4
	.byte	'fft',0,1,202,2,70
	.word	.L177,.L198
	.byte	4
	.byte	'lmu',0,1,202,2,84
	.word	.L179,.L199
	.byte	5
	.word	.L67,.L195
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_initModuleConfig')
	.sect	'.debug_abbrev'
.L96:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_initModuleConfig')
	.sect	'.debug_line'
.L97:
	.word	.L515-.L514
.L514:
	.half	3
	.word	.L517-.L516
.L516:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0,0
.L517:
	.byte	5,17,7,0,5,2
	.word	.L67
	.byte	3,204,2,1,9
	.half	.L518-.L67
	.byte	3,1,1,5,33,9
	.half	.L519-.L518
	.byte	3,9,1,9
	.half	.L520-.L519
	.byte	3,1,1,5,35,9
	.half	.L521-.L520
	.byte	3,1,1,5,33,9
	.half	.L522-.L521
	.byte	1,5,35,9
	.half	.L523-.L522
	.byte	3,1,1,5,33,9
	.half	.L524-.L523
	.byte	1,5,35,9
	.half	.L525-.L524
	.byte	3,1,1,5,33,9
	.half	.L526-.L525
	.byte	1,5,30,9
	.half	.L527-.L526
	.byte	3,3,1,5,28,9
	.half	.L528-.L527
	.byte	1,5,30,9
	.half	.L529-.L528
	.byte	3,1,1,5,28,9
	.half	.L530-.L529
	.byte	1,5,30,9
	.half	.L531-.L530
	.byte	3,1,1,5,28,9
	.half	.L532-.L531
	.byte	1,5,1,9
	.half	.L533-.L532
	.byte	3,1,1,7,9
	.half	.L99-.L533
	.byte	0,1,1
.L515:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_initModuleConfig')
	.sect	'.debug_ranges'
.L98:
	.word	-1,.L67,0,.L99-.L67,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_isrInput')
	.sect	'.debug_info'
.L100:
	.word	265
	.half	3
	.word	.L101
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L103,.L102
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_isrInput',0,1,252,2,6,1,1,1
	.word	.L71,.L200,.L70
	.byte	4
	.byte	'fft',0,1,252,2,38
	.word	.L173,.L201
	.byte	5
	.word	.L71,.L200
	.byte	6
	.byte	'inputJob',0,1,129,3,21
	.word	.L202,.L203
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_isrInput')
	.sect	'.debug_abbrev'
.L101:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_isrInput')
	.sect	'.debug_line'
.L102:
	.word	.L535-.L534
.L534:
	.half	3
	.word	.L537-.L536
.L536:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0,0
.L537:
	.byte	5,6,7,0,5,2
	.word	.L71
	.byte	3,251,2,1,5,40,9
	.half	.L441-.L71
	.byte	3,5,1,5,12,9
	.half	.L440-.L441
	.byte	3,2,1,5,5,9
	.half	.L538-.L440
	.byte	1,5,9,7,9
	.half	.L539-.L538
	.byte	3,2,1,5,33,7,9
	.half	.L540-.L539
	.byte	3,2,1,5,9,9
	.half	.L17-.L540
	.byte	3,126,1,5,16,9
	.half	.L16-.L17
	.byte	3,7,1,5,9,9
	.half	.L541-.L16
	.byte	1,5,27,7,9
	.half	.L542-.L541
	.byte	3,2,1,5,25,9
	.half	.L543-.L542
	.byte	1,5,45,9
	.half	.L544-.L543
	.byte	3,1,1,5,35,9
	.half	.L545-.L544
	.byte	3,1,1,5,38,9
	.half	.L546-.L545
	.byte	1,5,25,9
	.half	.L547-.L546
	.byte	1,5,28,9
	.half	.L548-.L547
	.byte	3,126,1,5,20,9
	.half	.L19-.L548
	.byte	3,6,1,5,36,9
	.half	.L549-.L19
	.byte	1,5,13,9
	.half	.L550-.L549
	.byte	1,5,30,7,9
	.half	.L551-.L550
	.byte	3,2,1,5,28,9
	.half	.L552-.L551
	.byte	1,5,12,9
	.half	.L18-.L552
	.byte	3,5,1,5,26,9
	.half	.L553-.L18
	.byte	1,5,5,9
	.half	.L554-.L553
	.byte	1,5,16,7,9
	.half	.L555-.L554
	.byte	3,2,1,5,8,9
	.half	.L22-.L555
	.byte	3,3,1,5,18,9
	.half	.L556-.L22
	.byte	1,5,1,9
	.half	.L557-.L556
	.byte	3,4,1,7,9
	.half	.L104-.L557
	.byte	0,1,1
.L535:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_isrInput')
	.sect	'.debug_ranges'
.L103:
	.word	-1,.L71,0,.L104-.L71,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_isrOutput')
	.sect	'.debug_info'
.L105:
	.word	299
	.half	3
	.word	.L106
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L108,.L107
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_isrOutput',0,1,167,3,6,1,1,1
	.word	.L73,.L204,.L72
	.byte	4
	.byte	'fft',0,1,167,3,39
	.word	.L173,.L205
	.byte	5
	.word	.L73,.L204
	.byte	6
	.byte	'outputJob',0,1,170,3,21
	.word	.L202,.L206
	.byte	5
	.word	.L207,.L26
	.byte	6
	.byte	'inputJob',0,1,176,3,29
	.word	.L202,.L208
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_isrOutput')
	.sect	'.debug_abbrev'
.L106:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_isrOutput')
	.sect	'.debug_line'
.L107:
	.word	.L559-.L558
.L558:
	.half	3
	.word	.L561-.L560
.L560:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0,0
.L561:
	.byte	5,6,7,0,5,2
	.word	.L73
	.byte	3,166,3,1,5,41,9
	.half	.L444-.L73
	.byte	3,3,1,5,5,9
	.half	.L445-.L444
	.byte	3,2,1,5,22,7,9
	.half	.L562-.L445
	.byte	3,2,1,5,9,9
	.half	.L563-.L562
	.byte	1,5,48,7,9
	.half	.L207-.L563
	.byte	3,2,1,5,13,9
	.half	.L443-.L207
	.byte	3,2,1,5,37,7,9
	.half	.L564-.L443
	.byte	3,2,1,5,46,9
	.half	.L446-.L564
	.byte	1,5,24,9
	.half	.L25-.L446
	.byte	3,4,1,5,17,9
	.half	.L565-.L25
	.byte	1,5,35,7,9
	.half	.L566-.L565
	.byte	3,2,1,5,33,9
	.half	.L567-.L566
	.byte	1,5,45,9
	.half	.L568-.L567
	.byte	3,1,1,5,44,9
	.half	.L448-.L568
	.byte	3,1,1,5,33,9
	.half	.L569-.L448
	.byte	1,5,36,9
	.half	.L570-.L569
	.byte	3,126,1,5,34,9
	.half	.L27-.L570
	.byte	3,6,1,5,32,9
	.half	.L571-.L27
	.byte	1,5,13,9
	.half	.L26-.L571
	.byte	3,118,1,5,20,9
	.half	.L24-.L26
	.byte	3,16,1,5,13,9
	.half	.L572-.L24
	.byte	1,5,31,7,9
	.half	.L573-.L572
	.byte	3,2,1,5,29,9
	.half	.L574-.L573
	.byte	1,5,41,9
	.half	.L575-.L574
	.byte	3,1,1,5,40,9
	.half	.L450-.L575
	.byte	3,1,1,5,29,9
	.half	.L576-.L450
	.byte	1,5,32,9
	.half	.L577-.L576
	.byte	3,126,1,5,30,9
	.half	.L30-.L577
	.byte	3,6,1,5,28,9
	.half	.L578-.L30
	.byte	1,5,1,9
	.half	.L23-.L578
	.byte	3,23,1,7,9
	.half	.L109-.L23
	.byte	0,1,1
.L559:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_isrOutput')
	.sect	'.debug_ranges'
.L108:
	.word	-1,.L73,0,.L109-.L73,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_cloneAndLinkJobs')
	.sect	'.debug_info'
.L110:
	.word	278
	.half	3
	.word	.L111
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L113,.L112
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_cloneAndLinkJobs',0,1,148,1,6,1,1,1
	.word	.L57,.L209,.L56
	.byte	4
	.byte	'originalJob',0,1,148,1,50
	.word	.L202,.L210
	.byte	4
	.byte	'newJob',0,1,148,1,79
	.word	.L202,.L211
	.byte	5
	.word	.L57,.L209
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_cloneAndLinkJobs')
	.sect	'.debug_abbrev'
.L111:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_cloneAndLinkJobs')
	.sect	'.debug_line'
.L112:
	.word	.L580-.L579
.L579:
	.half	3
	.word	.L582-.L581
.L581:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0,0
.L582:
	.byte	5,28,7,0,5,2
	.word	.L57
	.byte	3,149,1,1,5,26,9
	.half	.L583-.L57
	.byte	1,9
	.half	.L584-.L583
	.byte	3,1,1,5,1,9
	.half	.L585-.L584
	.byte	3,1,1,7,9
	.half	.L114-.L585
	.byte	0,1,1
.L580:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_cloneAndLinkJobs')
	.sect	'.debug_ranges'
.L113:
	.word	-1,.L57,0,.L114-.L57,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_initJob')
	.sect	'.debug_info'
.L115:
	.word	264
	.half	3
	.word	.L116
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L118,.L117
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_initJob',0,1,235,1,6,1,1,1
	.word	.L61,.L212,.L60
	.byte	4
	.byte	'job',0,1,235,1,41
	.word	.L202,.L213
	.byte	4
	.byte	'jobConfig',0,1,235,1,74
	.word	.L214,.L215
	.byte	5
	.word	.L61,.L212
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_initJob')
	.sect	'.debug_abbrev'
.L116:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_initJob')
	.sect	'.debug_line'
.L117:
	.word	.L587-.L586
.L586:
	.half	3
	.word	.L589-.L588
.L588:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0,0
.L589:
	.byte	5,6,7,0,5,2
	.word	.L61
	.byte	3,234,1,1,5,29,9
	.half	.L420-.L61
	.byte	3,3,1,5,18,9
	.half	.L590-.L420
	.byte	1,5,20,9
	.half	.L591-.L590
	.byte	3,1,1,5,18,9
	.half	.L592-.L591
	.byte	1,5,41,9
	.half	.L593-.L592
	.byte	3,3,1,5,20,9
	.half	.L421-.L593
	.byte	1,5,31,9
	.half	.L594-.L421
	.byte	3,1,1,5,20,9
	.half	.L595-.L594
	.byte	1,5,31,9
	.half	.L596-.L595
	.byte	3,1,1,5,20,9
	.half	.L597-.L596
	.byte	1,5,34,9
	.half	.L598-.L597
	.byte	3,3,1,5,1,9
	.half	.L423-.L598
	.byte	3,15,1,7,9
	.half	.L119-.L423
	.byte	0,1,1
.L587:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_initJob')
	.sect	'.debug_ranges'
.L118:
	.word	-1,.L61,0,.L119-.L61,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_initJobConfig')
	.sect	'.debug_info'
.L120:
	.word	267
	.half	3
	.word	.L121
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L123,.L122
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_initJobConfig',0,1,137,2,6,1,1,1
	.word	.L63,.L216,.L62
	.byte	4
	.byte	'config',0,1,137,2,53
	.word	.L217,.L218
	.byte	4
	.byte	'fft',0,1,137,2,73
	.word	.L173,.L219
	.byte	5
	.word	.L63,.L216
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_initJobConfig')
	.sect	'.debug_abbrev'
.L121:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_initJobConfig')
	.sect	'.debug_line'
.L122:
	.word	.L600-.L599
.L599:
	.half	3
	.word	.L602-.L601
.L601:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0,0
.L602:
	.byte	5,31,7,0,5,2
	.word	.L63
	.byte	3,138,2,1,5,33,9
	.half	.L603-.L63
	.byte	3,1,1,5,31,9
	.half	.L604-.L603
	.byte	1,5,33,9
	.half	.L605-.L604
	.byte	3,1,1,5,31,9
	.half	.L606-.L605
	.byte	1,5,33,9
	.half	.L607-.L606
	.byte	3,1,1,5,31,9
	.half	.L608-.L607
	.byte	1,5,33,9
	.half	.L609-.L608
	.byte	3,1,1,5,31,9
	.half	.L610-.L609
	.byte	1,5,33,9
	.half	.L611-.L610
	.byte	3,1,1,5,31,9
	.half	.L612-.L611
	.byte	1,5,33,9
	.half	.L613-.L612
	.byte	3,1,1,5,31,9
	.half	.L614-.L613
	.byte	1,5,33,9
	.half	.L615-.L614
	.byte	3,1,1,5,31,9
	.half	.L616-.L615
	.byte	1,5,33,9
	.half	.L617-.L616
	.byte	3,1,1,5,31,9
	.half	.L618-.L617
	.byte	1,5,33,9
	.half	.L619-.L618
	.byte	3,1,1,5,31,9
	.half	.L620-.L619
	.byte	1,5,1,9
	.half	.L621-.L620
	.byte	3,1,1,7,9
	.half	.L124-.L621
	.byte	0,1,1
.L600:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_initJobConfig')
	.sect	'.debug_ranges'
.L123:
	.word	-1,.L63,0,.L124-.L63,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_initWindow')
	.sect	'.debug_info'
.L125:
	.word	329
	.half	3
	.word	.L126
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L128,.L127
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_initWindow',0,1,228,2,6,1,1,1
	.word	.L69,.L220,.L68
	.byte	4
	.byte	'fft',0,1,228,2,40
	.word	.L173,.L221
	.byte	4
	.byte	'windowData',0,1,228,2,59
	.word	.L222,.L223
	.byte	5
	.word	.L69,.L220
	.byte	6
	.byte	'i',0,1,230,2,19
	.word	.L224,.L225
	.byte	6
	.byte	'ptr',0,1,231,2,19
	.word	.L222,.L226
	.byte	5
	.word	.L69,.L220
	.byte	6
	.byte	'wmem',0,1,243,2,13
	.word	.L227,.L228
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_initWindow')
	.sect	'.debug_abbrev'
.L126:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_initWindow')
	.sect	'.debug_line'
.L127:
	.word	.L623-.L622
.L622:
	.half	3
	.word	.L625-.L624
.L624:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0,0
.L625:
	.byte	5,20,7,0,5,2
	.word	.L69
	.byte	3,242,2,1,5,12,9
	.half	.L438-.L69
	.byte	3,2,1,5,83,9
	.half	.L439-.L438
	.byte	1,5,21,9
	.half	.L15-.L439
	.byte	3,2,1,5,19,9
	.half	.L626-.L15
	.byte	1,5,26,9
	.half	.L627-.L626
	.byte	1,5,15,9
	.half	.L628-.L627
	.byte	1,5,86,9
	.half	.L629-.L628
	.byte	3,126,1,5,47,9
	.half	.L14-.L629
	.byte	1,5,83,9
	.half	.L630-.L14
	.byte	1,5,1,7,9
	.half	.L631-.L630
	.byte	3,4,1,7,9
	.half	.L129-.L631
	.byte	0,1,1
.L623:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_initWindow')
	.sect	'.debug_ranges'
.L128:
	.word	-1,.L69,0,.L129-.L69,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_modifyDataPointers')
	.sect	'.debug_info'
.L130:
	.word	297
	.half	3
	.word	.L131
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L133,.L132
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_modifyDataPointers',0,1,143,4,6,1,1,1
	.word	.L77,.L229,.L76
	.byte	4
	.byte	'job',0,1,143,4,52
	.word	.L202,.L230
	.byte	4
	.byte	'inputPtr',0,1,143,4,69
	.word	.L231,.L232
	.byte	4
	.byte	'outputPtr',0,1,143,4,85
	.word	.L233,.L234
	.byte	5
	.word	.L77,.L229
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_modifyDataPointers')
	.sect	'.debug_abbrev'
.L131:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_modifyDataPointers')
	.sect	'.debug_line'
.L132:
	.word	.L633-.L632
.L632:
	.half	3
	.word	.L635-.L634
.L634:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0,0
.L635:
	.byte	5,20,7,0,5,2
	.word	.L77
	.byte	3,144,4,1,9
	.half	.L636-.L77
	.byte	3,1,1,5,1,9
	.half	.L637-.L636
	.byte	3,1,1,7,9
	.half	.L134-.L637
	.byte	0,1,1
.L633:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_modifyDataPointers')
	.sect	'.debug_ranges'
.L133:
	.word	-1,.L77,0,.L134-.L77,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_startJob')
	.sect	'.debug_info'
.L135:
	.word	385
	.half	3
	.word	.L136
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L138,.L137
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_startJob',0,1,150,4,9
	.word	.L235
	.byte	1,1,1
	.word	.L79,.L236,.L78
	.byte	4
	.byte	'job',0,1,150,4,45
	.word	.L202,.L237
	.byte	5
	.word	.L79,.L236
	.byte	6
	.byte	'fft',0,1,152,4,17
	.word	.L173,.L238
	.byte	6
	.byte	'fftSFR',0,1,154,4,17
	.word	.L177,.L239
	.byte	6
	.byte	'result',0,1,158,4,17
	.word	.L235,.L240
	.byte	7
	.word	.L241,.L242,.L32
	.byte	8
	.word	.L243,.L244
	.byte	9
	.word	.L245,.L242,.L32
	.byte	0,7
	.word	.L246,.L247,.L248
	.byte	8
	.word	.L249,.L250
	.byte	8
	.word	.L251,.L252
	.byte	9
	.word	.L253,.L247,.L248
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_startJob')
	.sect	'.debug_abbrev'
.L136:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_startJob')
	.sect	'.debug_line'
.L137:
	.word	.L639-.L638
.L638:
	.half	3
	.word	.L641-.L640
.L640:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0
	.byte	'IfxFft.h',0,1,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.h',0,0,0,0,0
.L641:
	.byte	5,9,7,0,5,2
	.word	.L79
	.byte	3,149,4,1,5,29,9
	.half	.L457-.L79
	.byte	3,2,1,9
	.half	.L458-.L457
	.byte	3,2,1,4,2,5,22,9
	.half	.L242-.L458
	.byte	3,177,126,1,5,27,9
	.half	.L642-.L242
	.byte	1,5,5,9
	.half	.L643-.L642
	.byte	1,4,1,9
	.half	.L32-.L643
	.byte	3,213,1,1,5,50,7,9
	.half	.L644-.L32
	.byte	3,2,1,4,3,5,22,9
	.half	.L247-.L644
	.byte	3,168,127,1,5,16,9
	.half	.L645-.L247
	.byte	1,4,1,5,21,9
	.half	.L248-.L645
	.byte	3,219,0,1,5,9,9
	.half	.L646-.L248
	.byte	1,5,29,7,9
	.half	.L647-.L646
	.byte	3,2,1,5,27,9
	.half	.L648-.L647
	.byte	1,5,29,9
	.half	.L649-.L648
	.byte	3,1,1,5,27,9
	.half	.L650-.L649
	.byte	1,9
	.half	.L651-.L650
	.byte	3,1,1,5,29,9
	.half	.L652-.L651
	.byte	3,1,1,5,27,9
	.half	.L653-.L652
	.byte	1,5,30,9
	.half	.L34-.L653
	.byte	3,4,1,5,26,9
	.half	.L456-.L34
	.byte	3,3,1,5,21,9
	.half	.L654-.L456
	.byte	1,5,5,9
	.half	.L33-.L654
	.byte	3,6,1,5,1,9
	.half	.L35-.L33
	.byte	3,1,1,7,9
	.half	.L139-.L35
	.byte	0,1,1
.L639:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_startJob')
	.sect	'.debug_ranges'
.L138:
	.word	-1,.L79,0,.L139-.L79,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_isrIntra')
	.sect	'.debug_info'
.L140:
	.word	242
	.half	3
	.word	.L141
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L143,.L142
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_isrIntra',0,1,225,4,6,1,1,1
	.word	.L83,.L254,.L82
	.byte	4
	.byte	'fft',0,1,225,4,38
	.word	.L173,.L255
	.byte	5
	.word	.L83,.L254
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_isrIntra')
	.sect	'.debug_abbrev'
.L141:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_isrIntra')
	.sect	'.debug_line'
.L142:
	.word	.L656-.L655
.L655:
	.half	3
	.word	.L658-.L657
.L657:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0,0
.L658:
	.byte	5,6,7,0,5,2
	.word	.L83
	.byte	3,224,4,1,5,12,9
	.half	.L468-.L83
	.byte	3,6,1,5,5,9
	.half	.L659-.L468
	.byte	1,5,23,7,9
	.half	.L660-.L659
	.byte	3,2,1,5,21,9
	.half	.L661-.L660
	.byte	1,5,41,9
	.half	.L662-.L661
	.byte	3,1,1,5,31,9
	.half	.L663-.L662
	.byte	3,1,1,5,34,9
	.half	.L664-.L663
	.byte	1,5,21,9
	.half	.L665-.L664
	.byte	1,5,24,9
	.half	.L666-.L665
	.byte	3,126,1,5,16,9
	.half	.L43-.L666
	.byte	3,6,1,5,9,9
	.half	.L667-.L43
	.byte	1,5,27,7,9
	.half	.L668-.L667
	.byte	3,2,1,5,25,9
	.half	.L669-.L668
	.byte	1,5,45,9
	.half	.L670-.L669
	.byte	3,1,1,5,35,9
	.half	.L671-.L670
	.byte	3,1,1,5,38,9
	.half	.L672-.L671
	.byte	1,5,25,9
	.half	.L673-.L672
	.byte	1,5,28,9
	.half	.L674-.L673
	.byte	3,126,1,5,26,9
	.half	.L45-.L674
	.byte	3,6,1,5,24,9
	.half	.L675-.L45
	.byte	1,5,8,9
	.half	.L44-.L675
	.byte	3,4,1,5,18,9
	.half	.L676-.L44
	.byte	1,5,1,9
	.half	.L677-.L676
	.byte	3,5,1,7,9
	.half	.L144-.L677
	.byte	0,1,1
.L656:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_isrIntra')
	.sect	'.debug_ranges'
.L143:
	.word	-1,.L83,0,.L144-.L83,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_initDma')
	.sect	'.debug_info'
.L145:
	.word	1138
	.half	3
	.word	.L146
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L148,.L147
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_initDma',0,1,131,5,6,1,1,1
	.word	.L85,.L256,.L84
	.byte	4
	.byte	'fft',0,1,131,5,37
	.word	.L173,.L257
	.byte	4
	.byte	'config',0,1,131,5,67
	.word	.L175,.L258
	.byte	5
	.word	.L85,.L256
	.byte	6
	.byte	'dmaSFR',0,1,135,5,30
	.word	.L259,.L260
	.byte	6
	.byte	'fftSFR',0,1,136,5,30
	.word	.L177,.L261
	.byte	6
	.byte	'inputDmaChannel',0,1,137,5,30
	.word	.L262,.L263
	.byte	6
	.byte	'discardDmaChannel',0,1,138,5,30
	.word	.L262,.L264
	.byte	6
	.byte	'outputDmaChannel',0,1,139,5,30
	.word	.L262,.L265
	.byte	6
	.byte	'dma',0,1,149,5,30
	.word	.L266,.L267
	.byte	7
	.word	.L268
	.byte	6
	.byte	'dmaCfg',0,1,152,5,30
	.word	.L276,.L277
	.byte	7
	.word	.L278
	.byte	6
	.byte	'srcr',0,1,207,5,32
	.word	.L281,.L282
	.byte	8
	.word	.L283,.L271,.L48
	.byte	9
	.word	.L284,.L285
	.byte	9
	.word	.L286,.L287
	.byte	10
	.word	.L288,.L271,.L48
	.byte	0,8
	.word	.L289,.L290,.L291
	.byte	9
	.word	.L292,.L293
	.byte	9
	.word	.L294,.L295
	.byte	9
	.word	.L296,.L297
	.byte	11
	.word	.L298,.L290,.L291
	.byte	8
	.word	.L299,.L300,.L291
	.byte	9
	.word	.L301,.L302
	.byte	10
	.word	.L303,.L300,.L291
	.byte	0,0,0,8
	.word	.L304,.L291,.L305
	.byte	9
	.word	.L306,.L307
	.byte	10
	.word	.L308,.L291,.L305
	.byte	0,8
	.word	.L309,.L305,.L49
	.byte	9
	.word	.L310,.L311
	.byte	10
	.word	.L312,.L305,.L49
	.byte	0,8
	.word	.L289,.L313,.L314
	.byte	9
	.word	.L292,.L293
	.byte	9
	.word	.L294,.L295
	.byte	9
	.word	.L296,.L297
	.byte	11
	.word	.L298,.L313,.L314
	.byte	8
	.word	.L299,.L315,.L314
	.byte	9
	.word	.L301,.L302
	.byte	10
	.word	.L303,.L315,.L314
	.byte	0,0,0,8
	.word	.L304,.L314,.L316
	.byte	9
	.word	.L306,.L307
	.byte	10
	.word	.L308,.L314,.L316
	.byte	0,8
	.word	.L283,.L273,.L51
	.byte	9
	.word	.L284,.L285
	.byte	9
	.word	.L286,.L287
	.byte	10
	.word	.L288,.L273,.L51
	.byte	0,8
	.word	.L289,.L317,.L318
	.byte	9
	.word	.L292,.L293
	.byte	9
	.word	.L294,.L295
	.byte	9
	.word	.L296,.L297
	.byte	11
	.word	.L298,.L317,.L318
	.byte	8
	.word	.L299,.L319,.L318
	.byte	9
	.word	.L301,.L302
	.byte	10
	.word	.L303,.L319,.L318
	.byte	0,0,0,8
	.word	.L304,.L318,.L320
	.byte	9
	.word	.L306,.L307
	.byte	10
	.word	.L308,.L318,.L320
	.byte	0,8
	.word	.L283,.L275,.L53
	.byte	9
	.word	.L284,.L285
	.byte	9
	.word	.L286,.L287
	.byte	10
	.word	.L288,.L275,.L53
	.byte	0,8
	.word	.L289,.L321,.L322
	.byte	9
	.word	.L292,.L293
	.byte	9
	.word	.L294,.L295
	.byte	9
	.word	.L296,.L297
	.byte	11
	.word	.L298,.L321,.L322
	.byte	8
	.word	.L299,.L323,.L322
	.byte	9
	.word	.L301,.L302
	.byte	10
	.word	.L303,.L323,.L322
	.byte	0,0,0,8
	.word	.L304,.L322,.L324
	.byte	9
	.word	.L306,.L307
	.byte	10
	.word	.L308,.L322,.L324
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_initDma')
	.sect	'.debug_abbrev'
.L146:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,85,6,0,0,8,29,1,49,16,17,1,18,1,0,0,9,5,0,49,16,2,6,0,0,10,11
	.byte	0,49,16,17,1,18,1,0,0,11,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_initDma')
	.sect	'.debug_line'
.L147:
	.word	.L679-.L678
.L678:
	.half	3
	.word	.L681-.L680
.L680:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0
	.byte	'IfxDma.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxFft.h',0,3,0,0,0
.L681:
	.byte	5,6,7,0,5,2
	.word	.L85
	.byte	3,130,5,1,5,51,9
	.half	.L474-.L85
	.byte	3,4,1,5,54,9
	.half	.L471-.L474
	.byte	3,2,1,9
	.half	.L475-.L471
	.byte	3,1,1,9
	.half	.L476-.L475
	.byte	3,1,1,5,36,9
	.half	.L479-.L476
	.byte	3,11,1,5,41,9
	.half	.L472-.L479
	.byte	1,5,35,9
	.half	.L269-.L472
	.byte	3,3,1,5,44,9
	.half	.L682-.L269
	.byte	1,5,46,9
	.half	.L683-.L682
	.byte	3,2,1,5,44,9
	.half	.L684-.L683
	.byte	1,5,46,9
	.half	.L685-.L684
	.byte	3,1,1,5,44,9
	.half	.L686-.L685
	.byte	1,5,46,9
	.half	.L687-.L686
	.byte	3,1,1,5,44,9
	.half	.L688-.L687
	.byte	1,5,46,9
	.half	.L689-.L688
	.byte	3,1,1,5,44,9
	.half	.L690-.L689
	.byte	1,5,46,9
	.half	.L691-.L690
	.byte	3,1,1,5,44,9
	.half	.L692-.L691
	.byte	1,5,48,9
	.half	.L693-.L692
	.byte	3,4,1,5,40,9
	.half	.L694-.L693
	.byte	1,5,42,9
	.half	.L695-.L694
	.byte	3,1,1,5,40,9
	.half	.L696-.L695
	.byte	1,5,42,9
	.half	.L697-.L696
	.byte	3,1,1,5,40,9
	.half	.L698-.L697
	.byte	1,5,46,9
	.half	.L699-.L698
	.byte	3,3,1,5,44,9
	.half	.L700-.L699
	.byte	1,5,46,9
	.half	.L701-.L700
	.byte	3,1,1,5,44,9
	.half	.L702-.L701
	.byte	1,5,51,9
	.half	.L703-.L702
	.byte	3,3,1,5,49,9
	.half	.L704-.L703
	.byte	1,5,51,9
	.half	.L705-.L704
	.byte	3,1,1,5,49,9
	.half	.L706-.L705
	.byte	1,5,51,9
	.half	.L707-.L706
	.byte	3,1,1,5,49,9
	.half	.L708-.L707
	.byte	1,5,51,9
	.half	.L709-.L708
	.byte	3,2,1,5,47,9
	.half	.L481-.L709
	.byte	3,4,1,5,39,9
	.half	.L710-.L481
	.byte	1,5,41,9
	.half	.L711-.L710
	.byte	3,1,1,5,39,9
	.half	.L712-.L711
	.byte	1,5,52,9
	.half	.L713-.L712
	.byte	3,1,1,5,48,9
	.half	.L483-.L713
	.byte	3,5,1,5,40,9
	.half	.L714-.L483
	.byte	1,5,42,9
	.half	.L715-.L714
	.byte	3,1,1,5,40,9
	.half	.L716-.L715
	.byte	1,5,42,9
	.half	.L717-.L716
	.byte	3,2,1,5,40,9
	.half	.L718-.L717
	.byte	1,5,46,9
	.half	.L719-.L718
	.byte	3,5,1,5,44,9
	.half	.L720-.L719
	.byte	1,5,46,9
	.half	.L721-.L720
	.byte	3,1,1,5,44,9
	.half	.L722-.L721
	.byte	1,5,46,9
	.half	.L723-.L722
	.byte	3,1,1,5,44,9
	.half	.L724-.L723
	.byte	1,5,51,9
	.half	.L725-.L724
	.byte	3,3,1,5,49,9
	.half	.L726-.L725
	.byte	1,5,51,9
	.half	.L727-.L726
	.byte	3,1,1,5,49,9
	.half	.L728-.L727
	.byte	1,5,50,9
	.half	.L729-.L728
	.byte	3,2,1,5,51,9
	.half	.L279-.L729
	.byte	3,7,1,9
	.half	.L270-.L279
	.byte	3,181,127,1,4,2,5,5,9
	.half	.L271-.L270
	.byte	3,245,6,1,5,37,7,9
	.half	.L47-.L271
	.byte	3,2,1,5,5,9
	.half	.L486-.L47
	.byte	1,4,1,5,33,9
	.half	.L48-.L486
	.byte	3,213,121,1,5,56,9
	.half	.L730-.L48
	.byte	1,4,3,5,11,9
	.half	.L290-.L730
	.byte	3,193,124,1,5,19,9
	.half	.L731-.L290
	.byte	1,5,17,9
	.half	.L732-.L731
	.byte	1,5,11,9
	.half	.L733-.L732
	.byte	3,1,1,5,17,9
	.half	.L734-.L733
	.byte	1,5,11,9
	.half	.L300-.L734
	.byte	3,103,1,5,17,9
	.half	.L735-.L300
	.byte	1,5,11,9
	.half	.L291-.L735
	.byte	3,18,1,5,16,9
	.half	.L736-.L291
	.byte	1,4,4,5,34,9
	.half	.L305-.L736
	.byte	3,18,1,5,5,9
	.half	.L737-.L305
	.byte	1,4,1,5,33,9
	.half	.L49-.L737
	.byte	3,184,3,1,5,56,9
	.half	.L738-.L49
	.byte	1,4,3,5,11,9
	.half	.L313-.L738
	.byte	3,188,124,1,5,19,9
	.half	.L739-.L313
	.byte	1,5,17,9
	.half	.L740-.L739
	.byte	1,5,11,9
	.half	.L741-.L740
	.byte	3,1,1,5,17,9
	.half	.L742-.L741
	.byte	1,5,11,9
	.half	.L315-.L742
	.byte	3,103,1,5,17,9
	.half	.L743-.L315
	.byte	1,5,11,9
	.half	.L314-.L743
	.byte	3,18,1,5,16,9
	.half	.L744-.L314
	.byte	1,4,1,5,51,9
	.half	.L316-.L744
	.byte	3,206,3,1,9
	.half	.L272-.L316
	.byte	3,171,127,1,4,2,5,5,9
	.half	.L273-.L272
	.byte	3,245,6,1,5,37,7,9
	.half	.L50-.L273
	.byte	3,2,1,5,5,9
	.half	.L490-.L50
	.byte	1,4,1,5,27,9
	.half	.L51-.L490
	.byte	3,223,121,1,5,63,9
	.half	.L492-.L51
	.byte	1,5,43,9
	.half	.L493-.L492
	.byte	1,4,3,5,11,9
	.half	.L317-.L493
	.byte	3,183,124,1,5,19,9
	.half	.L745-.L317
	.byte	1,5,17,9
	.half	.L746-.L745
	.byte	1,5,11,9
	.half	.L747-.L746
	.byte	3,1,1,5,17,9
	.half	.L748-.L747
	.byte	1,5,11,9
	.half	.L319-.L748
	.byte	3,103,1,5,17,9
	.half	.L749-.L319
	.byte	1,5,11,9
	.half	.L318-.L749
	.byte	3,18,1,5,16,9
	.half	.L750-.L318
	.byte	1,4,1,5,31,9
	.half	.L320-.L750
	.byte	3,209,3,1,5,25,9
	.half	.L751-.L320
	.byte	1,5,51,9
	.half	.L752-.L751
	.byte	3,3,1,9
	.half	.L274-.L752
	.byte	3,165,127,1,4,2,5,5,9
	.half	.L275-.L274
	.byte	3,245,6,1,5,37,7,9
	.half	.L52-.L275
	.byte	3,2,1,5,5,9
	.half	.L495-.L52
	.byte	1,4,1,5,33,9
	.half	.L53-.L495
	.byte	3,229,121,1,5,56,9
	.half	.L753-.L53
	.byte	1,4,3,5,11,9
	.half	.L321-.L753
	.byte	3,177,124,1,5,19,9
	.half	.L754-.L321
	.byte	1,5,17,9
	.half	.L755-.L754
	.byte	1,5,11,9
	.half	.L756-.L755
	.byte	3,1,1,5,17,9
	.half	.L757-.L756
	.byte	1,5,11,9
	.half	.L323-.L757
	.byte	3,103,1,5,17,9
	.half	.L758-.L323
	.byte	1,5,11,9
	.half	.L322-.L758
	.byte	3,18,1,5,16,9
	.half	.L759-.L322
	.byte	1,4,1,5,31,9
	.half	.L324-.L759
	.byte	3,215,3,1,5,25,9
	.half	.L760-.L324
	.byte	1,5,1,9
	.half	.L280-.L760
	.byte	3,3,1,7,9
	.half	.L149-.L280
	.byte	0,1,1
.L679:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_initDma')
	.sect	'.debug_ranges'
.L148:
	.word	-1,.L85,0,.L149-.L85,0,0
.L268:
	.word	-1,.L85,.L269-.L85,.L270-.L85,.L271-.L85,.L272-.L85,.L273-.L85,.L274-.L85,.L275-.L85,.L256-.L85,0,0
.L278:
	.word	-1,.L85,.L279-.L85,.L270-.L85,.L271-.L85,.L272-.L85,.L273-.L85,.L274-.L85,.L275-.L85,.L280-.L85,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_calcCSR')
	.sect	'.debug_info'
.L150:
	.word	265
	.half	3
	.word	.L151
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L153,.L152
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_calcCSR',0,1,136,1,19
	.word	.L325
	.byte	1,1
	.word	.L55,.L326,.L54
	.byte	4
	.byte	'config',0,1,136,1,66
	.word	.L214,.L327
	.byte	5
	.word	.L55,.L326
	.byte	6
	.byte	'csr',0,1,138,1,12
	.word	.L325,.L328
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_calcCSR')
	.sect	'.debug_abbrev'
.L151:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_calcCSR')
	.sect	'.debug_line'
.L152:
	.word	.L762-.L761
.L761:
	.half	3
	.word	.L764-.L763
.L763:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0,0
.L764:
	.byte	5,17,7,0,5,2
	.word	.L55
	.byte	3,142,1,1,5,11,9
	.half	.L765-.L55
	.byte	1,5,37,7,9
	.half	.L766-.L765
	.byte	1,5,42,9
	.half	.L767-.L766
	.byte	1,5,37,9
	.half	.L2-.L767
	.byte	1,5,16,9
	.half	.L3-.L2
	.byte	3,124,1,5,28,9
	.half	.L768-.L3
	.byte	1,5,16,9
	.half	.L769-.L768
	.byte	3,1,1,5,30,9
	.half	.L770-.L769
	.byte	1,5,55,9
	.half	.L771-.L770
	.byte	3,127,1,5,16,9
	.half	.L772-.L771
	.byte	3,2,1,5,31,9
	.half	.L773-.L772
	.byte	1,5,57,9
	.half	.L774-.L773
	.byte	3,127,1,5,16,9
	.half	.L775-.L774
	.byte	3,2,1,5,28,9
	.half	.L776-.L775
	.byte	1,5,59,9
	.half	.L777-.L776
	.byte	3,127,1,5,48,9
	.half	.L778-.L777
	.byte	3,2,1,5,53,9
	.half	.L407-.L778
	.byte	3,127,1,5,5,9
	.half	.L779-.L407
	.byte	3,2,1,5,1,9
	.half	.L4-.L779
	.byte	3,1,1,7,9
	.half	.L154-.L4
	.byte	0,1,1
.L762:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_calcCSR')
	.sect	'.debug_ranges'
.L153:
	.word	-1,.L55,0,.L154-.L55,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_unloadOutput')
	.sect	'.debug_info'
.L155:
	.word	708
	.half	3
	.word	.L156
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L158,.L157
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_unloadOutput',0,1,155,1,17,1,1
	.word	.L59,.L329,.L58
	.byte	4
	.byte	'job',0,1,155,1,57
	.word	.L202,.L330
	.byte	5
	.word	.L59,.L329
	.byte	6
	.byte	'srcr',0,1,159,1,28
	.word	.L281,.L331
	.byte	6
	.byte	'discardCount',0,1,160,1,28
	.word	.L332,.L333
	.byte	6
	.byte	'dmaOutput',0,1,163,1,28
	.word	.L262,.L334
	.byte	6
	.byte	'dmaDiscard',0,1,164,1,28
	.word	.L262,.L335
	.byte	6
	.byte	'dmaSFR',0,1,165,1,28
	.word	.L259,.L336
	.byte	7
	.word	.L337,.L338,.L339
	.byte	8
	.word	.L340,.L341
	.byte	8
	.word	.L342,.L343
	.byte	8
	.word	.L344,.L345
	.byte	9
	.word	.L346,.L338,.L339
	.byte	0,7
	.word	.L347,.L348,.L349
	.byte	8
	.word	.L350,.L351
	.byte	8
	.word	.L352,.L353
	.byte	8
	.word	.L354,.L355
	.byte	9
	.word	.L356,.L348,.L349
	.byte	0,7
	.word	.L337,.L357,.L358
	.byte	8
	.word	.L340,.L341
	.byte	8
	.word	.L342,.L343
	.byte	8
	.word	.L344,.L345
	.byte	9
	.word	.L346,.L357,.L358
	.byte	0,7
	.word	.L347,.L359,.L360
	.byte	8
	.word	.L350,.L351
	.byte	8
	.word	.L352,.L353
	.byte	8
	.word	.L354,.L355
	.byte	9
	.word	.L356,.L359,.L360
	.byte	0,7
	.word	.L283,.L361,.L8
	.byte	8
	.word	.L284,.L362
	.byte	8
	.word	.L286,.L363
	.byte	9
	.word	.L288,.L361,.L8
	.byte	0,7
	.word	.L283,.L364,.L11
	.byte	8
	.word	.L284,.L362
	.byte	8
	.word	.L286,.L363
	.byte	9
	.word	.L288,.L364,.L11
	.byte	0,7
	.word	.L365,.L366,.L367
	.byte	8
	.word	.L368,.L369
	.byte	8
	.word	.L370,.L371
	.byte	9
	.word	.L372,.L366,.L367
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_unloadOutput')
	.sect	'.debug_abbrev'
.L156:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_unloadOutput')
	.sect	'.debug_line'
.L157:
	.word	.L781-.L780
.L780:
	.half	3
	.word	.L783-.L782
.L782:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0
	.byte	'IfxDma.h',0,1,0,0,0
.L783:
	.byte	5,17,7,0,5,2
	.word	.L59
	.byte	3,154,1,1,5,46,9
	.half	.L408-.L59
	.byte	3,8,1,5,51,9
	.half	.L784-.L408
	.byte	1,5,46,9
	.half	.L410-.L784
	.byte	3,1,1,5,51,9
	.half	.L785-.L410
	.byte	1,5,50,9
	.half	.L411-.L785
	.byte	3,1,1,5,49,9
	.half	.L413-.L411
	.byte	3,8,1,5,83,9
	.half	.L786-.L413
	.byte	1,4,2,5,12,9
	.half	.L338-.L786
	.byte	3,135,11,1,5,41,9
	.half	.L787-.L338
	.byte	1,5,31,9
	.half	.L788-.L787
	.byte	1,4,1,5,44,9
	.half	.L339-.L788
	.byte	3,250,116,1,5,87,9
	.half	.L789-.L339
	.byte	1,4,2,5,12,9
	.half	.L348-.L789
	.byte	3,216,11,1,5,32,9
	.half	.L790-.L348
	.byte	1,5,38,9
	.half	.L791-.L790
	.byte	1,4,1,5,33,9
	.half	.L349-.L791
	.byte	3,170,116,1,5,55,9
	.half	.L792-.L349
	.byte	1,5,41,9
	.half	.L793-.L792
	.byte	1,5,5,9
	.half	.L414-.L793
	.byte	3,2,1,5,53,7,9
	.half	.L794-.L414
	.byte	3,6,1,5,85,9
	.half	.L795-.L794
	.byte	1,4,2,5,12,9
	.half	.L357-.L795
	.byte	3,252,10,1,5,41,9
	.half	.L796-.L357
	.byte	1,5,31,9
	.half	.L797-.L796
	.byte	1,4,1,5,48,9
	.half	.L358-.L797
	.byte	3,133,117,1,4,2,5,12,9
	.half	.L359-.L358
	.byte	3,205,11,1,5,32,9
	.half	.L798-.L359
	.byte	1,5,40,9
	.half	.L799-.L798
	.byte	1,5,38,9
	.half	.L415-.L799
	.byte	1,4,1,5,48,9
	.half	.L360-.L415
	.byte	3,185,116,1,4,2,5,5,9
	.half	.L361-.L360
	.byte	3,189,10,1,5,37,7,9
	.half	.L7-.L361
	.byte	3,2,1,5,5,9
	.half	.L800-.L7
	.byte	1,4,1,5,22,9
	.half	.L8-.L800
	.byte	3,195,117,1,5,27,9
	.half	.L409-.L8
	.byte	1,5,17,9
	.half	.L801-.L409
	.byte	1,5,105,9
	.half	.L802-.L801
	.byte	3,119,1,5,48,9
	.half	.L6-.L802
	.byte	3,16,1,4,2,5,5,9
	.half	.L364-.L6
	.byte	3,180,10,1,5,37,7,9
	.half	.L10-.L364
	.byte	3,2,1,5,5,9
	.half	.L803-.L10
	.byte	1,4,1,5,22,9
	.half	.L11-.L803
	.byte	3,204,117,1,5,27,9
	.half	.L417-.L11
	.byte	1,5,17,9
	.half	.L804-.L417
	.byte	1,5,44,9
	.half	.L9-.L804
	.byte	3,6,1,4,2,5,12,9
	.half	.L366-.L9
	.byte	3,197,11,1,5,31,9
	.half	.L805-.L366
	.byte	1,5,36,9
	.half	.L806-.L805
	.byte	1,4,1,5,1,9
	.half	.L367-.L806
	.byte	3,211,116,1,7,9
	.half	.L159-.L367
	.byte	0,1,1
.L781:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_unloadOutput')
	.sect	'.debug_ranges'
.L158:
	.word	-1,.L59,0,.L159-.L59,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_loadInput')
	.sect	'.debug_info'
.L160:
	.word	438
	.half	3
	.word	.L161
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L163,.L162
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_loadInput',0,1,232,3,17,1,1
	.word	.L75,.L373,.L74
	.byte	4
	.byte	'job',0,1,232,3,54
	.word	.L202,.L374
	.byte	5
	.word	.L75,.L373
	.byte	6
	.byte	'dmaInput',0,1,237,3,25
	.word	.L262,.L375
	.byte	6
	.byte	'dmaSFR',0,1,238,3,25
	.word	.L259,.L376
	.byte	7
	.word	.L377,.L378,.L379
	.byte	8
	.word	.L380,.L381
	.byte	8
	.word	.L382,.L383
	.byte	8
	.word	.L384,.L385
	.byte	9
	.word	.L386,.L378,.L379
	.byte	0,7
	.word	.L347,.L387,.L388
	.byte	8
	.word	.L350,.L389
	.byte	8
	.word	.L352,.L390
	.byte	8
	.word	.L354,.L391
	.byte	9
	.word	.L356,.L387,.L388
	.byte	0,7
	.word	.L365,.L392,.L393
	.byte	8
	.word	.L368,.L394
	.byte	8
	.word	.L370,.L395
	.byte	9
	.word	.L372,.L392,.L393
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_loadInput')
	.sect	'.debug_abbrev'
.L161:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_loadInput')
	.sect	'.debug_line'
.L162:
	.word	.L808-.L807
.L807:
	.half	3
	.word	.L810-.L809
.L809:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0
	.byte	'IfxDma.h',0,1,0,0,0
.L810:
	.byte	5,40,7,0,5,2
	.word	.L75
	.byte	3,236,3,1,5,45,9
	.half	.L811-.L75
	.byte	1,5,44,9
	.half	.L452-.L811
	.byte	3,1,1,9
	.half	.L454-.L452
	.byte	3,10,1,5,77,9
	.half	.L812-.L454
	.byte	1,4,2,5,12,9
	.half	.L378-.L812
	.byte	3,247,8,1,5,41,9
	.half	.L813-.L378
	.byte	1,5,31,9
	.half	.L814-.L813
	.byte	1,4,1,5,44,9
	.half	.L379-.L814
	.byte	3,138,119,1,5,86,9
	.half	.L815-.L379
	.byte	1,4,2,5,12,9
	.half	.L387-.L815
	.byte	3,141,9,1,5,32,9
	.half	.L816-.L387
	.byte	1,5,38,9
	.half	.L817-.L816
	.byte	1,4,1,5,44,9
	.half	.L388-.L817
	.byte	3,244,118,1,4,2,5,12,9
	.half	.L392-.L388
	.byte	3,155,9,1,5,31,9
	.half	.L455-.L392
	.byte	1,5,36,9
	.half	.L818-.L455
	.byte	1,4,1,5,1,9
	.half	.L393-.L818
	.byte	3,247,118,1,7,9
	.half	.L164-.L393
	.byte	0,1,1
.L808:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_loadInput')
	.sect	'.debug_ranges'
.L163:
	.word	-1,.L75,0,.L164-.L75,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_calcCounters')
	.sect	'.debug_info'
.L165:
	.word	357
	.half	3
	.word	.L166
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L168,.L167
	.byte	2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_calcCounters',0,1,187,4,17,1,1
	.word	.L81,.L396,.L80
	.byte	4
	.byte	'job',0,1,187,4,57
	.word	.L202,.L397
	.byte	4
	.byte	'jobConfig',0,1,187,4,90
	.word	.L214,.L398
	.byte	5
	.word	.L81,.L396
	.byte	6
	.byte	'shift',0,1,189,4,12
	.word	.L193,.L399
	.byte	5
	.word	.L37,.L396
	.byte	6
	.byte	'fftLength',0,1,205,4,12
	.word	.L193,.L400
	.byte	7
	.word	.L401,.L402,.L40
	.byte	8
	.word	.L403,.L404
	.byte	9
	.word	.L405,.L402,.L40
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_calcCounters')
	.sect	'.debug_abbrev'
.L166:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0
	.byte	0
	.sdecl	'.debug_line',debug,cluster('IfxFft_Fft_calcCounters')
	.sect	'.debug_line'
.L167:
	.word	.L820-.L819
.L819:
	.half	3
	.word	.L822-.L821
.L821:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0,0,0,0
	.byte	'IfxFft.h',0,1,0,0,0
.L822:
	.byte	5,18,7,0,5,2
	.word	.L81
	.byte	3,191,4,1,5,5,9
	.half	.L823-.L81
	.byte	1,5,15,7,9
	.half	.L824-.L823
	.byte	3,2,1,5,18,9
	.half	.L459-.L824
	.byte	1,5,23,9
	.half	.L36-.L459
	.byte	3,2,1,5,10,9
	.half	.L825-.L36
	.byte	1,5,15,7,9
	.half	.L826-.L825
	.byte	3,2,1,5,18,9
	.half	.L460-.L826
	.byte	1,5,15,9
	.half	.L38-.L460
	.byte	3,4,1,5,58,9
	.half	.L37-.L38
	.byte	3,3,1,4,2,5,12,9
	.half	.L402-.L37
	.byte	3,198,125,1,5,14,9
	.half	.L827-.L402
	.byte	1,5,5,9
	.half	.L828-.L827
	.byte	1,4,1,5,37,9
	.half	.L40-.L828
	.byte	3,188,2,1,5,51,9
	.half	.L829-.L40
	.byte	1,5,61,9
	.half	.L830-.L829
	.byte	1,5,25,9
	.half	.L831-.L830
	.byte	1,5,38,9
	.half	.L464-.L831
	.byte	3,1,1,5,48,9
	.half	.L465-.L464
	.byte	1,5,25,9
	.half	.L832-.L465
	.byte	1,5,37,9
	.half	.L833-.L832
	.byte	3,6,1,5,27,9
	.half	.L834-.L833
	.byte	1,5,84,7,9
	.half	.L835-.L834
	.byte	1,5,88,9
	.half	.L466-.L835
	.byte	1,5,84,9
	.half	.L41-.L466
	.byte	1,5,38,9
	.half	.L42-.L41
	.byte	3,2,1,5,48,9
	.half	.L836-.L42
	.byte	1,5,25,9
	.half	.L837-.L836
	.byte	1,5,37,9
	.half	.L838-.L837
	.byte	3,1,1,5,52,9
	.half	.L839-.L838
	.byte	1,5,62,9
	.half	.L840-.L839
	.byte	1,5,25,9
	.half	.L841-.L840
	.byte	1,5,1,9
	.half	.L842-.L841
	.byte	3,5,1,7,9
	.half	.L169-.L842
	.byte	0,1,1
.L820:
	.sdecl	'.debug_ranges',debug,cluster('IfxFft_Fft_calcCounters')
	.sect	'.debug_ranges'
.L168:
	.word	-1,.L81,0,.L169-.L81,0,0
	.sdecl	'.debug_info',debug,cluster('IfxFft_Fft_dummy256')
	.sect	'.debug_info'
.L170:
	.word	202
	.half	3
	.word	.L171
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft\\IfxFft_Fft.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1,2
	.word	.L86
	.byte	3
	.byte	'IfxFft_Fft_dummy256',0,20,130,1,19
	.word	.L406
	.byte	5,3
	.word	IfxFft_Fft_dummy256
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('IfxFft_Fft_dummy256')
	.sect	'.debug_abbrev'
.L171:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_calcCSR')
	.sect	'.debug_loc'
.L54:
	.word	-1,.L55,0,.L326-.L55
	.half	2
	.byte	138,0
	.word	0,0
.L327:
	.word	-1,.L55,0,.L326-.L55
	.half	1
	.byte	100
	.word	0,0
.L328:
	.word	-1,.L55,.L407-.L55,.L326-.L55
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_calcCounters')
	.sect	'.debug_loc'
.L80:
	.word	-1,.L81,0,.L396-.L81
	.half	2
	.byte	138,0
	.word	0,0
.L400:
	.word	0,0
.L397:
	.word	-1,.L81,0,.L396-.L81
	.half	1
	.byte	100
	.word	0,0
.L398:
	.word	-1,.L81,0,.L396-.L81
	.half	1
	.byte	101
	.word	0,0
.L404:
	.word	0,0
.L399:
	.word	-1,.L81,.L459-.L81,.L36-.L81
	.half	1
	.byte	81
	.word	.L460-.L81,.L38-.L81
	.half	1
	.byte	81
	.word	.L37-.L81,.L461-.L81
	.half	1
	.byte	81
	.word	.L462-.L81,.L463-.L81
	.half	1
	.byte	95
	.word	.L464-.L81,.L465-.L81
	.half	1
	.byte	81
	.word	.L466-.L81,.L41-.L81
	.half	1
	.byte	81
	.word	.L42-.L81,.L396-.L81
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_cloneAndLinkJobs')
	.sect	'.debug_loc'
.L56:
	.word	-1,.L57,0,.L209-.L57
	.half	2
	.byte	138,0
	.word	0,0
.L211:
	.word	-1,.L57,0,.L209-.L57
	.half	1
	.byte	101
	.word	0,0
.L210:
	.word	-1,.L57,0,.L209-.L57
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_initDma')
	.sect	'.debug_loc'
.L84:
	.word	-1,.L85,0,.L470-.L85
	.half	2
	.byte	138,0
	.word	.L470-.L85,.L256-.L85
	.half	3
	.byte	138,200,0
	.word	.L256-.L85,.L256-.L85
	.half	2
	.byte	138,0
	.word	0,0
.L287:
	.word	0,0
.L258:
	.word	-1,.L85,0,.L471-.L85
	.half	1
	.byte	101
	.word	.L474-.L85,.L256-.L85
	.half	2
	.byte	145,116
	.word	.L478-.L85,.L271-.L85
	.half	1
	.byte	111
	.word	.L488-.L85,.L487-.L85
	.half	1
	.byte	98
	.word	.L487-.L85,.L273-.L85
	.half	1
	.byte	111
	.word	.L492-.L85,.L493-.L85
	.half	1
	.byte	98
	.word	.L491-.L85,.L275-.L85
	.half	1
	.byte	111
	.word	.L53-.L85,.L321-.L85
	.half	1
	.byte	98
	.word	0,0
.L264:
	.word	-1,.L85,.L476-.L85,.L256-.L85
	.half	1
	.byte	110
	.word	.L482-.L85,.L483-.L85
	.half	1
	.byte	100
	.word	0,0
.L267:
	.word	-1,.L85,0,.L256-.L85
	.half	3
	.byte	145,184,127
	.word	0,0
.L285:
	.word	0,0
.L277:
	.word	-1,.L85,0,.L256-.L85
	.half	3
	.byte	145,188,127
	.word	0,0
.L260:
	.word	-1,.L85,.L471-.L85,.L269-.L85
	.half	1
	.byte	101
	.word	.L271-.L85,.L485-.L85
	.half	1
	.byte	111
	.word	.L273-.L85,.L489-.L85
	.half	1
	.byte	111
	.word	.L275-.L85,.L494-.L85
	.half	1
	.byte	111
	.word	0,0
.L311:
	.word	0,0
.L257:
	.word	-1,.L85,0,.L472-.L85
	.half	1
	.byte	100
	.word	.L473-.L85,.L256-.L85
	.half	1
	.byte	108
	.word	0,0
.L261:
	.word	0,0
.L263:
	.word	-1,.L85,.L475-.L85,.L256-.L85
	.half	1
	.byte	109
	.word	.L484-.L85,.L279-.L85
	.half	1
	.byte	100
	.word	0,0
.L265:
	.word	-1,.L85,.L477-.L85,.L478-.L85
	.half	1
	.byte	111
	.word	.L479-.L85,.L256-.L85
	.half	2
	.byte	145,120
	.word	.L480-.L85,.L481-.L85
	.half	1
	.byte	100
	.word	0,0
.L297:
	.word	0,0
.L302:
	.word	0,0
.L307:
	.word	0,0
.L293:
	.word	0,0
.L282:
	.word	-1,.L85,.L486-.L85,.L487-.L85
	.half	1
	.byte	111
	.word	.L490-.L85,.L491-.L85
	.half	1
	.byte	111
	.word	.L495-.L85,.L256-.L85
	.half	1
	.byte	111
	.word	0,0
.L295:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_initJob')
	.sect	'.debug_loc'
.L60:
	.word	-1,.L61,0,.L212-.L61
	.half	2
	.byte	138,0
	.word	0,0
.L213:
	.word	-1,.L61,0,.L418-.L61
	.half	1
	.byte	100
	.word	.L419-.L61,.L212-.L61
	.half	1
	.byte	108
	.word	.L422-.L61,.L423-.L61
	.half	1
	.byte	100
	.word	0,0
.L215:
	.word	-1,.L61,0,.L418-.L61
	.half	1
	.byte	101
	.word	.L420-.L61,.L212-.L61
	.half	1
	.byte	109
	.word	.L418-.L61,.L421-.L61
	.half	1
	.byte	100
	.word	.L424-.L61,.L423-.L61
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_initJobConfig')
	.sect	'.debug_loc'
.L62:
	.word	-1,.L63,0,.L216-.L63
	.half	2
	.byte	138,0
	.word	0,0
.L218:
	.word	-1,.L63,0,.L216-.L63
	.half	1
	.byte	100
	.word	0,0
.L219:
	.word	-1,.L63,0,.L216-.L63
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_initModule')
	.sect	'.debug_loc'
.L64:
	.word	-1,.L65,0,.L172-.L65
	.half	2
	.byte	138,0
	.word	0,0
.L176:
	.word	-1,.L65,0,.L425-.L65
	.half	1
	.byte	101
	.word	.L427-.L65,.L172-.L65
	.half	1
	.byte	108
	.word	.L437-.L65,.L436-.L65
	.half	1
	.byte	101
	.word	0,0
.L189:
	.word	0,0
.L174:
	.word	-1,.L65,0,.L425-.L65
	.half	1
	.byte	100
	.word	.L426-.L65,.L172-.L65
	.half	1
	.byte	111
	.word	.L435-.L65,.L436-.L65
	.half	1
	.byte	100
	.word	0,0
.L184:
	.word	0,0
.L178:
	.word	-1,.L65,.L428-.L65,.L172-.L65
	.half	1
	.byte	109
	.word	0,0
.L191:
	.word	0,0
.L180:
	.word	-1,.L65,.L429-.L65,.L430-.L65
	.half	1
	.byte	98
	.word	0,0
.L194:
	.word	-1,.L65,.L425-.L65,.L431-.L65
	.half	1
	.byte	82
	.word	.L432-.L65,.L13-.L65
	.half	1
	.byte	95
	.word	.L431-.L65,.L433-.L65
	.half	1
	.byte	84
	.word	.L434-.L65,.L13-.L65
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_initModuleConfig')
	.sect	'.debug_loc'
.L66:
	.word	-1,.L67,0,.L195-.L67
	.half	2
	.byte	138,0
	.word	0,0
.L197:
	.word	-1,.L67,0,.L195-.L67
	.half	1
	.byte	100
	.word	0,0
.L198:
	.word	-1,.L67,0,.L195-.L67
	.half	1
	.byte	101
	.word	0,0
.L199:
	.word	-1,.L67,0,.L195-.L67
	.half	1
	.byte	102
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_initWindow')
	.sect	'.debug_loc'
.L68:
	.word	-1,.L69,0,.L220-.L69
	.half	2
	.byte	138,0
	.word	0,0
.L221:
	.word	-1,.L69,0,.L220-.L69
	.half	1
	.byte	100
	.word	0,0
.L225:
	.word	-1,.L69,.L439-.L69,.L220-.L69
	.half	1
	.byte	95
	.word	0,0
.L226:
	.word	-1,.L69,0,.L220-.L69
	.half	1
	.byte	101
	.word	0,0
.L223:
	.word	-1,.L69,0,.L220-.L69
	.half	1
	.byte	101
	.word	0,0
.L228:
	.word	-1,.L69,.L438-.L69,.L220-.L69
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_isrInput')
	.sect	'.debug_loc'
.L70:
	.word	-1,.L71,0,.L200-.L71
	.half	2
	.byte	138,0
	.word	0,0
.L201:
	.word	-1,.L71,0,.L440-.L71
	.half	1
	.byte	100
	.word	.L441-.L71,.L200-.L71
	.half	1
	.byte	111
	.word	0,0
.L203:
	.word	-1,.L71,.L440-.L71,.L17-.L71
	.half	1
	.byte	100
	.word	.L16-.L71,.L442-.L71
	.half	1
	.byte	100
	.word	.L19-.L71,.L18-.L71
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_isrIntra')
	.sect	'.debug_loc'
.L82:
	.word	-1,.L83,0,.L254-.L83
	.half	2
	.byte	138,0
	.word	0,0
.L255:
	.word	-1,.L83,0,.L467-.L83
	.half	1
	.byte	100
	.word	.L468-.L83,.L254-.L83
	.half	1
	.byte	111
	.word	.L43-.L83,.L469-.L83
	.half	1
	.byte	100
	.word	.L45-.L83,.L44-.L83
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_isrOutput')
	.sect	'.debug_loc'
.L72:
	.word	-1,.L73,0,.L204-.L73
	.half	2
	.byte	138,0
	.word	0,0
.L205:
	.word	-1,.L73,0,.L443-.L73
	.half	1
	.byte	100
	.word	.L444-.L73,.L204-.L73
	.half	1
	.byte	111
	.word	.L24-.L73,.L449-.L73
	.half	1
	.byte	100
	.word	.L30-.L73,.L23-.L73
	.half	1
	.byte	100
	.word	0,0
.L208:
	.word	-1,.L73,.L443-.L73,.L446-.L73
	.half	1
	.byte	100
	.word	.L25-.L73,.L447-.L73
	.half	1
	.byte	100
	.word	.L27-.L73,.L26-.L73
	.half	1
	.byte	100
	.word	0,0
.L206:
	.word	-1,.L73,.L445-.L73,.L204-.L73
	.half	1
	.byte	108
	.word	.L447-.L73,.L448-.L73
	.half	1
	.byte	100
	.word	.L449-.L73,.L450-.L73
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_loadInput')
	.sect	'.debug_loc'
.L74:
	.word	-1,.L75,0,.L373-.L75
	.half	2
	.byte	138,0
	.word	0,0
.L385:
	.word	0,0
.L383:
	.word	0,0
.L390:
	.word	0,0
.L395:
	.word	0,0
.L381:
	.word	0,0
.L389:
	.word	0,0
.L394:
	.word	0,0
.L375:
	.word	-1,.L75,.L452-.L75,.L453-.L75
	.half	1
	.byte	111
	.word	0,0
.L376:
	.word	-1,.L75,.L454-.L75,.L455-.L75
	.half	1
	.byte	98
	.word	0,0
.L374:
	.word	-1,.L75,0,.L451-.L75
	.half	1
	.byte	100
	.word	0,0
.L391:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_modifyDataPointers')
	.sect	'.debug_loc'
.L76:
	.word	-1,.L77,0,.L229-.L77
	.half	2
	.byte	138,0
	.word	0,0
.L232:
	.word	-1,.L77,0,.L229-.L77
	.half	1
	.byte	101
	.word	0,0
.L230:
	.word	-1,.L77,0,.L229-.L77
	.half	1
	.byte	100
	.word	0,0
.L234:
	.word	-1,.L77,0,.L229-.L77
	.half	1
	.byte	102
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_startJob')
	.sect	'.debug_loc'
.L78:
	.word	-1,.L79,0,.L236-.L79
	.half	2
	.byte	138,0
	.word	0,0
.L252:
	.word	0,0
.L244:
	.word	0,0
.L250:
	.word	0,0
.L238:
	.word	-1,.L79,.L458-.L79,.L236-.L79
	.half	1
	.byte	111
	.word	0,0
.L239:
	.word	-1,.L79,.L242-.L79,.L456-.L79
	.half	1
	.byte	98
	.word	0,0
.L237:
	.word	-1,.L79,0,.L456-.L79
	.half	1
	.byte	100
	.word	.L457-.L79,.L236-.L79
	.half	1
	.byte	108
	.word	0,0
.L240:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxFft_Fft_unloadOutput')
	.sect	'.debug_loc'
.L58:
	.word	-1,.L59,0,.L329-.L59
	.half	2
	.byte	138,0
	.word	0,0
.L345:
	.word	0,0
.L363:
	.word	0,0
.L343:
	.word	0,0
.L353:
	.word	0,0
.L371:
	.word	0,0
.L333:
	.word	-1,.L59,.L414-.L59,.L415-.L59
	.half	5
	.byte	144,32,157,32,0
	.word	.L6-.L59,.L9-.L59
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L362:
	.word	0,0
.L341:
	.word	0,0
.L351:
	.word	0,0
.L369:
	.word	0,0
.L335:
	.word	-1,.L59,.L411-.L59,.L412-.L59
	.half	1
	.byte	98
	.word	.L6-.L59,.L416-.L59
	.half	1
	.byte	98
	.word	0,0
.L334:
	.word	-1,.L59,.L410-.L59,.L329-.L59
	.half	1
	.byte	102
	.word	0,0
.L336:
	.word	-1,.L59,.L413-.L59,.L329-.L59
	.half	1
	.byte	103
	.word	0,0
.L330:
	.word	-1,.L59,0,.L338-.L59
	.half	1
	.byte	100
	.word	.L408-.L59,.L409-.L59
	.half	1
	.byte	111
	.word	.L6-.L59,.L417-.L59
	.half	1
	.byte	111
	.word	0,0
.L331:
	.word	0,0
.L355:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L843:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_calcCSR')
	.sect	'.debug_frame'
	.word	24
	.word	.L843,.L55,.L326-.L55
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_cloneAndLinkJobs')
	.sect	'.debug_frame'
	.word	16
	.word	.L843,.L57,.L209-.L57
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_unloadOutput')
	.sect	'.debug_frame'
	.word	16
	.word	.L843,.L59,.L329-.L59
	.byte	8,19,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_initJob')
	.sect	'.debug_frame'
	.word	12
	.word	.L843,.L61,.L212-.L61
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_initJobConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L843,.L63,.L216-.L63
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_initModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L843,.L65,.L172-.L65
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_initModuleConfig')
	.sect	'.debug_frame'
	.word	20
	.word	.L843,.L67,.L195-.L67
	.byte	8,18,8,19,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_initWindow')
	.sect	'.debug_frame'
	.word	24
	.word	.L843,.L69,.L220-.L69
	.byte	8,18,8,19,8,20,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_isrInput')
	.sect	'.debug_frame'
	.word	12
	.word	.L843,.L71,.L200-.L71
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_isrOutput')
	.sect	'.debug_frame'
	.word	12
	.word	.L843,.L73,.L204-.L73
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_loadInput')
	.sect	'.debug_frame'
	.word	16
	.word	.L843,.L75,.L373-.L75
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_modifyDataPointers')
	.sect	'.debug_frame'
	.word	20
	.word	.L843,.L77,.L229-.L77
	.byte	8,18,8,19,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_startJob')
	.sect	'.debug_frame'
	.word	12
	.word	.L843,.L79,.L236-.L79
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_calcCounters')
	.sect	'.debug_frame'
	.word	20
	.word	.L843,.L81,.L396-.L81
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_isrIntra')
	.sect	'.debug_frame'
	.word	12
	.word	.L843,.L83,.L254-.L83
	.sdecl	'.debug_frame',debug,cluster('IfxFft_Fft_initDma')
	.sect	'.debug_frame'
	.word	36
	.word	.L843,.L85,.L256-.L85
	.byte	4
	.word	(.L470-.L85)/2
	.byte	19,200,0,22,26,4,19,138,200,0,4
	.word	(.L256-.L470)/2
	.byte	19,0,8,26


	; Module end
