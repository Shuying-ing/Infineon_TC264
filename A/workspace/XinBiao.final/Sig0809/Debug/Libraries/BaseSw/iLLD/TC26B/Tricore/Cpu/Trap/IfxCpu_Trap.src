	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 99277908"
	.compiler_invocation	"ctc --dep-file=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\.IfxCpu_Trap.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc26x -D__CPU_TC26X__ --core=tc1.6.x --iso=99 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\CODE -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Asc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Lin -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Spi -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Icu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmBc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmHl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TimerWithTrigger -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TPwm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Cam -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Dsadc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Rdc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Dts -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Eray -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Phy_Pef7071 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Crc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\IncrEnc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Pwm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\PwmHl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim\\In -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Pwm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\PwmHl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Trig -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Hssl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\I2c -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Driver -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Msc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Can -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Io -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Psi5 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Psi5s -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiMaster -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiSlave -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Sent -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Adc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Platform -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Platform\\Tricore -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Service -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Service\\CpuGeneric -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\seekfree_libraries -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\seekfree_libraries\\common -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\seekfree_peripheral -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\USER -g2 -wW557 --make-target=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.o -t0 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O0 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.src ..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c"
	.compiler_name		"ctc"
	;source	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c'

	
$TC16X
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_memoryManagementError',code,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_memoryManagementError'
	.align	2
	
	.global	IfxCpu_Trap_memoryManagementError

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	     2   * \file IfxCpu_Trap.c
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	     3   * \brief This file contains the APIs for Trap related functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	     4   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	     7   * \copyright Copyright (c) 2012 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    45   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    46  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    47  /*******************************************************************************
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    48  **                      Includes                                              **
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    49  *******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    50  #include "IfxCpu_Trap.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    51  #include "Cpu/Std/IfxCpu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    52  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    53  #include "IfxCpu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    54  #include "Ifx_Cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    55  #ifdef IFX_CFG_EXTEND_TRAP_HOOKS
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    56  #include "Ifx_Cfg_Trap.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    57  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    59  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    60  /*                           Macros                                           */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    61  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    62  /** \brief Configuration for CpuX enable.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    63   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    64   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    65  #ifndef IFX_CFG_CPU_TRAP_TSR_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    66  #   define IFX_CFG_CPU_TRAP_TSR_HOOK(trapWatch)          /**< By default macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    67  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    68  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    69  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    70  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    71  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    72  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    73  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    74  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    75  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    76  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    77  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    78  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    79  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    80  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU4_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    81  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU4_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    82  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    83  #ifndef IFX_CFG_CPU_TRAP_SYSCALL_CPU5_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    84  #   define IFX_CFG_CPU_TRAP_SYSCALL_CPU5_HOOK(trapWatch) ((void)trapWatch) /**< By default macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    85  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    86  #ifndef IFX_CFG_CPU_TRAP_NMI_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    87  #   define IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch)          ((void)trapWatch) /**< By default NMI macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    88  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    89  #ifndef IFX_CFG_CPU_TRAP_MME_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    90  #   define IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch)    ((void)trapWatch)      /**< By default memory Management Error macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    91  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    92  #ifndef IFX_CFG_CPU_TRAP_IPE_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    93  #   define IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch)    ((void)trapWatch)      /**< By default internal Protection Error macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    94  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    95  #ifndef IFX_CFG_CPU_TRAP_IE_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    96  #   define IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch)     ((void)trapWatch)      /**< By default instruction Error macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    97  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    98  #ifndef IFX_CFG_CPU_TRAP_CME_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	    99  #   define IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch)    ((void)trapWatch)      /**< By default context Management Error macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   100  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   101  #ifndef IFX_CFG_CPU_TRAP_BE_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   102  #   define IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch)     ((void)trapWatch)      /**< By default bus Error macro is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   103  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   104  #ifndef IFX_CFG_CPU_TRAP_ASSERT_HOOK
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   105  #   define IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch) ((void)trapWatch)     /**< By default assertion is empty*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   106  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   107  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   108  #ifndef IFX_CFG_CPU_TRAP_DEBUG
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   109   #define IFX_CFG_CPU_TRAP_DEBUG __debug()
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   110  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   111  /*******************************************************************************
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   112  **                      variables                                     **
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   113  *******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   114  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   115  /*******************************************************************************
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   116  **                      Function definitions                          **
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   117  *******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   118  IFX_INLINE IfxCpu_Trap IfxCpu_Trap_extractTrapInfo(uint8 trapClass, uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   119  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   120      IfxCpu_Trap trapInfo;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   121      trapInfo.tAddr  = (unsigned int)__getA11();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   122      trapInfo.tClass = trapClass;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   123      trapInfo.tId    = tin;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   124      trapInfo.tCpu   = IfxCpu_getCoreId();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125      return trapInfo;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   127  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   128  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   129  void IfxCpu_Trap_memoryManagementError(uint32 tin)
; Function IfxCpu_Trap_memoryManagementError
.L30:
IfxCpu_Trap_memoryManagementError:	.type	func
	sub.a	a10,#8
.L116:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   351      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L241:
	
.L294:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   352      return res;      (inlined)
	j	.L2

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   353  }      (inlined)
.L2:
	mov.d	d2,a15
.L126:
	extr.u	d15,d3,#8,#8
.L242:
	insert	d15,d15,#0,#0,#8
.L243:
	insert	d3,d3,d15,#8,#8
.L295:
	extr.u	d15,d4,#0,#8
.L296:
	insert	d3,d3,d15,#0,#8
.L131:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L244:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d15,#7
.L245:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;      (inlined)
	j	.L3

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }      (inlined)
.L3:
	extr.u	d0,d3,#16,#8
.L297:
	insert	d15,d0,d15,#0,#3
	insert	d3,d3,d15,#16,#8
.L298:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125      return trapInfo;      (inlined)
	j	.L4

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  }      (inlined)
.L4:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   130    trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_memoryManagement, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   131      IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   132      IFX_CFG_CPU_TRAP_DEBUG;
	st.d	[a10]0,e2
.L117:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   133      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	ld.d	e0,[a10]0
.L299:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   134      __asm("rfe");
	debug
.L300:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   135  }
	rslcx
.L301:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   136  
	rfe
.L302:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   137  
	ret
.L110:
	
__IfxCpu_Trap_memoryManagementError_function_end:
	.size	IfxCpu_Trap_memoryManagementError,__IfxCpu_Trap_memoryManagementError_function_end-IfxCpu_Trap_memoryManagementError
.L59:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_internalProtectionError',code,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_internalProtectionError'
	.align	2
	
	.global	IfxCpu_Trap_internalProtectionError

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   138  void IfxCpu_Trap_internalProtectionError(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   139  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   140      volatile IfxCpu_Trap trapWatch;
; Function IfxCpu_Trap_internalProtectionError
.L32:
IfxCpu_Trap_internalProtectionError:	.type	func
	sub.a	a10,#8
.L139:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   351      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L246:
	
.L307:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   352      return res;      (inlined)
	j	.L5

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   353  }      (inlined)
.L5:
	mov.d	d2,a15
.L144:
	extr.u	d15,d3,#8,#8
.L247:
	insert	d15,d15,#1,#0,#8
.L248:
	insert	d3,d3,d15,#8,#8
.L308:
	extr.u	d15,d4,#0,#8
.L309:
	insert	d3,d3,d15,#0,#8
.L146:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L249:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d15,#7
.L250:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;      (inlined)
	j	.L6

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }      (inlined)
.L6:
	extr.u	d0,d3,#16,#8
.L310:
	insert	d15,d0,d15,#0,#3
	insert	d3,d3,d15,#16,#8
.L311:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125      return trapInfo;      (inlined)
	j	.L7

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  }      (inlined)
.L7:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   141  ch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_internalProtection, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   142      IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   143      IFX_CFG_CPU_TRAP_DEBUG;
	st.d	[a10]0,e2
.L140:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   144      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	ld.d	e0,[a10]0
.L312:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   145      __asm("rfe");
	debug
.L313:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   146  }
	rslcx
.L314:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   147  
	rfe
.L315:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   148  
	ret
.L135:
	
__IfxCpu_Trap_internalProtectionError_function_end:
	.size	IfxCpu_Trap_internalProtectionError,__IfxCpu_Trap_internalProtectionError_function_end-IfxCpu_Trap_internalProtectionError
.L64:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_instructionError',code,cluster('IfxCpu_Trap_instructionError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_instructionError'
	.align	2
	
	.global	IfxCpu_Trap_instructionError

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   149  void IfxCpu_Trap_instructionError(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   150  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   151      volatile IfxCpu_Trap trapWatch;
; Function IfxCpu_Trap_instructionError
.L34:
IfxCpu_Trap_instructionError:	.type	func
	sub.a	a10,#8
.L152:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   351      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L251:
	
.L320:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   352      return res;      (inlined)
	j	.L8

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   353  }      (inlined)
.L8:
	mov.d	d2,a15
.L157:
	extr.u	d15,d3,#8,#8
.L252:
	insert	d15,d15,#2,#0,#8
.L253:
	insert	d3,d3,d15,#8,#8
.L321:
	extr.u	d15,d4,#0,#8
.L322:
	insert	d3,d3,d15,#0,#8
.L159:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L254:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d15,#7
.L255:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;      (inlined)
	j	.L9

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }      (inlined)
.L9:
	extr.u	d0,d3,#16,#8
.L323:
	insert	d15,d0,d15,#0,#3
	insert	d3,d3,d15,#16,#8
.L324:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125      return trapInfo;      (inlined)
	j	.L10

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  }      (inlined)
.L10:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   152  ch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_instructionErrors, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   153      IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   154      IFX_CFG_CPU_TRAP_DEBUG;
	st.d	[a10]0,e2
.L153:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   155      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	ld.d	e0,[a10]0
.L325:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   156      __asm("rfe");
	debug
.L326:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   157  }
	rslcx
.L327:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   158  
	rfe
.L328:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   159  
	ret
.L148:
	
__IfxCpu_Trap_instructionError_function_end:
	.size	IfxCpu_Trap_instructionError,__IfxCpu_Trap_instructionError_function_end-IfxCpu_Trap_instructionError
.L69:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_contextManagementError',code,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_contextManagementError'
	.align	2
	
	.global	IfxCpu_Trap_contextManagementError

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   160  void IfxCpu_Trap_contextManagementError(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   161  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   162      volatile IfxCpu_Trap trapWatch;
; Function IfxCpu_Trap_contextManagementError
.L36:
IfxCpu_Trap_contextManagementError:	.type	func
	sub.a	a10,#8
.L165:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   351      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L256:
	
.L333:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   352      return res;      (inlined)
	j	.L11

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   353  }      (inlined)
.L11:
	mov.d	d2,a15
.L170:
	extr.u	d15,d3,#8,#8
.L257:
	insert	d15,d15,#3,#0,#8
.L258:
	insert	d3,d3,d15,#8,#8
.L334:
	extr.u	d15,d4,#0,#8
.L335:
	insert	d3,d3,d15,#0,#8
.L172:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L259:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d15,#7
.L260:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;      (inlined)
	j	.L12

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }      (inlined)
.L12:
	extr.u	d0,d3,#16,#8
.L336:
	insert	d15,d0,d15,#0,#3
	insert	d3,d3,d15,#16,#8
.L337:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125      return trapInfo;      (inlined)
	j	.L13

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  }      (inlined)
.L13:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   163  ch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_contextManagement, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   164      IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   165      IFX_CFG_CPU_TRAP_DEBUG;
	st.d	[a10]0,e2
.L166:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   166      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	ld.d	e0,[a10]0
.L338:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   167      __asm("rfe");
	debug
.L339:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   168  }
	rslcx
.L340:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   169  
	rfe
.L341:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   170  
	ret
.L161:
	
__IfxCpu_Trap_contextManagementError_function_end:
	.size	IfxCpu_Trap_contextManagementError,__IfxCpu_Trap_contextManagementError_function_end-IfxCpu_Trap_contextManagementError
.L74:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_busError',code,cluster('IfxCpu_Trap_busError')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_busError'
	.align	2
	
	.global	IfxCpu_Trap_busError

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   171  void IfxCpu_Trap_busError(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   172  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   173      volatile IfxCpu_Trap trapWatch;
; Function IfxCpu_Trap_busError
.L38:
IfxCpu_Trap_busError:	.type	func
	sub.a	a10,#8
.L178:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   351      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L261:
	
.L346:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   352      return res;      (inlined)
	j	.L14

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   353  }      (inlined)
.L14:
	mov.d	d2,a15
.L183:
	extr.u	d15,d3,#8,#8
.L262:
	insert	d15,d15,#4,#0,#8
.L263:
	insert	d3,d3,d15,#8,#8
.L347:
	extr.u	d15,d4,#0,#8
.L348:
	insert	d3,d3,d15,#0,#8
.L185:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L264:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d15,#7
.L265:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;      (inlined)
	j	.L15

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }      (inlined)
.L15:
	extr.u	d0,d3,#16,#8
.L349:
	insert	d15,d0,d15,#0,#3
	insert	d3,d3,d15,#16,#8
.L350:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125      return trapInfo;      (inlined)
	j	.L16

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  }      (inlined)
.L16:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   174  ch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_bus, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   175      IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   176      IFX_CFG_CPU_TRAP_DEBUG;
	st.d	[a10]0,e2
.L179:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   177      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	ld.d	e0,[a10]0
.L351:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   178      __asm("rfe");
	debug
.L352:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   179  }
	rslcx
.L353:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   180  
	rfe
.L354:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   181  
	ret
.L174:
	
__IfxCpu_Trap_busError_function_end:
	.size	IfxCpu_Trap_busError,__IfxCpu_Trap_busError_function_end-IfxCpu_Trap_busError
.L79:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_assertion',code,cluster('IfxCpu_Trap_assertion')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_assertion'
	.align	2
	
	.global	IfxCpu_Trap_assertion

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   182  void IfxCpu_Trap_assertion(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   183  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   184      volatile IfxCpu_Trap trapWatch;
; Function IfxCpu_Trap_assertion
.L40:
IfxCpu_Trap_assertion:	.type	func
	sub.a	a10,#8
.L191:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   351      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L266:
	
.L359:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   352      return res;      (inlined)
	j	.L17

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   353  }      (inlined)
.L17:
	mov.d	d2,a15
.L196:
	extr.u	d15,d3,#8,#8
.L267:
	insert	d15,d15,#5,#0,#8
.L268:
	insert	d3,d3,d15,#8,#8
.L360:
	extr.u	d15,d4,#0,#8
.L361:
	insert	d3,d3,d15,#0,#8
.L198:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L269:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d15,#7
.L270:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;      (inlined)
	j	.L18

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }      (inlined)
.L18:
	extr.u	d0,d3,#16,#8
.L362:
	insert	d15,d0,d15,#0,#3
	insert	d3,d3,d15,#16,#8
.L363:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125      return trapInfo;      (inlined)
	j	.L19

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  }      (inlined)
.L19:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   185  ch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_assertion, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   186      IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   187      IFX_CFG_CPU_TRAP_DEBUG;
	st.d	[a10]0,e2
.L192:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   188      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	ld.d	e0,[a10]0
.L364:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   189      __asm("rfe");
	debug
.L365:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   190  }
	rslcx
.L366:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   191  
	rfe
.L367:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   192  
	ret
.L187:
	
__IfxCpu_Trap_assertion_function_end:
	.size	IfxCpu_Trap_assertion,__IfxCpu_Trap_assertion_function_end-IfxCpu_Trap_assertion
.L84:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu0',code,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu0'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu0

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   193  void IfxCpu_Trap_systemCall_Cpu0(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   194  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   195      volatile IfxCpu_Trap trapWatch;
; Function IfxCpu_Trap_systemCall_Cpu0
.L42:
IfxCpu_Trap_systemCall_Cpu0:	.type	func
	sub.a	a10,#8
.L204:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   351      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L271:
	
.L372:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   352      return res;      (inlined)
	j	.L20

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   353  }      (inlined)
.L20:
	mov.d	d2,a15
.L209:
	extr.u	d15,d3,#8,#8
.L272:
	insert	d15,d15,#6,#0,#8
.L273:
	insert	d3,d3,d15,#8,#8
.L373:
	extr.u	d15,d4,#0,#8
.L374:
	insert	d3,d3,d15,#0,#8
.L211:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L274:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d15,#7
.L275:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;      (inlined)
	j	.L21

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }      (inlined)
.L21:
	extr.u	d0,d3,#16,#8
.L375:
	insert	d15,d0,d15,#0,#3
	insert	d3,d3,d15,#16,#8
.L376:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125      return trapInfo;      (inlined)
	j	.L22

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  }      (inlined)
.L22:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   196  ch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   197      IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   198      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	st.d	[a10]0,e2
.L205:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   199      __asm("rfe");
	ld.d	e0,[a10]0
.L377:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   200  }
	rslcx
.L378:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   201  
	rfe
.L379:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   202  #if IFXCPU_NUM_MODULES >= 2
	ret
.L200:
	
__IfxCpu_Trap_systemCall_Cpu0_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu0,__IfxCpu_Trap_systemCall_Cpu0_function_end-IfxCpu_Trap_systemCall_Cpu0
.L89:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu1',code,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_systemCall_Cpu1'
	.align	2
	
	.global	IfxCpu_Trap_systemCall_Cpu1

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   203  void IfxCpu_Trap_systemCall_Cpu1(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   204  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   205      volatile IfxCpu_Trap trapWatch;
; Function IfxCpu_Trap_systemCall_Cpu1
.L44:
IfxCpu_Trap_systemCall_Cpu1:	.type	func
	sub.a	a10,#8
.L217:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   351      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L276:
	
.L384:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   352      return res;      (inlined)
	j	.L23

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   353  }      (inlined)
.L23:
	mov.d	d2,a15
.L222:
	extr.u	d15,d3,#8,#8
.L277:
	insert	d15,d15,#6,#0,#8
.L278:
	insert	d3,d3,d15,#8,#8
.L385:
	extr.u	d15,d4,#0,#8
.L386:
	insert	d3,d3,d15,#0,#8
.L224:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L279:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d15,#7
.L280:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;      (inlined)
	j	.L24

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }      (inlined)
.L24:
	extr.u	d0,d3,#16,#8
.L387:
	insert	d15,d0,d15,#0,#3
	insert	d3,d3,d15,#16,#8
.L388:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125      return trapInfo;      (inlined)
	j	.L25

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  }      (inlined)
.L25:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   206  tch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   207      IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   208      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	st.d	[a10]0,e2
.L218:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   209      __asm("rfe");
	ld.d	e0,[a10]0
.L389:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   210  }
	rslcx
.L390:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   211  #endif
	rfe
.L391:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   212  
	ret
.L213:
	
__IfxCpu_Trap_systemCall_Cpu1_function_end:
	.size	IfxCpu_Trap_systemCall_Cpu1,__IfxCpu_Trap_systemCall_Cpu1_function_end-IfxCpu_Trap_systemCall_Cpu1
.L94:
	; End of function
	
	.sdecl	'.text.IfxCpu_Trap.IfxCpu_Trap_nonMaskableInterrupt',code,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.text.IfxCpu_Trap.IfxCpu_Trap_nonMaskableInterrupt'
	.align	2
	
	.global	IfxCpu_Trap_nonMaskableInterrupt

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   213  #if IFXCPU_NUM_MODULES >= 3
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   214  void IfxCpu_Trap_systemCall_Cpu2(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   215  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   216      volatile IfxCpu_Trap trapWatch;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   217      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   218      IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   219      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   220      __asm("rfe");
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   221  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   222  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   223  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   224  #if IFXCPU_NUM_MODULES >= 4
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   225  void IfxCpu_Trap_systemCall_Cpu3(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   226  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   227      volatile IfxCpu_Trap trapWatch;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   228      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   229      IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   230      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   231      __asm("rfe");
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   232  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   233  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   235  #if IFXCPU_NUM_MODULES >= 5
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   236  void IfxCpu_Trap_systemCall_Cpu4(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   237  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   238      volatile IfxCpu_Trap trapWatch;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   239      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   240      IFX_CFG_CPU_TRAP_SYSCALL_CPU4_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   241      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   242      __asm("rfe");
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   243  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   244  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   245  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   246  #if IFXCPU_NUM_MODULES >= 6
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   247  void IfxCpu_Trap_systemCall_Cpu5(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   248  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   249      volatile IfxCpu_Trap trapWatch;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   250      trapWatch = IfxCpu_Trap_extractTrapInfo(IfxCpu_Trap_Class_systemCall, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   251      IFX_CFG_CPU_TRAP_SYSCALL_CPU5_HOOK(trapWatch);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   252      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   253      __asm("rfe");
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   254  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   255  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   256  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   257  void IfxCpu_Trap_nonMaskableInterrupt(uint32 tin)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   258  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   259      volatile IfxCpu_Trap trapWatch;
; Function IfxCpu_Trap_nonMaskableInterrupt
.L46:
IfxCpu_Trap_nonMaskableInterrupt:	.type	func
	sub.a	a10,#8
.L230:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   351      __asm("mov.aa %0, a11": "=a" (res) : :"a11");      (inlined)
	
	mov.aa a15, a11
.L281:
	
.L396:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   352      return res;      (inlined)
	j	.L26

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu_IntrinsicsTasking.h	   353  }      (inlined)
.L26:
	mov.d	d2,a15
.L235:
	extr.u	d15,d3,#8,#8
.L282:
	insert	d15,d15,#7,#0,#8
.L283:
	insert	d3,d3,d15,#8,#8
.L397:
	extr.u	d15,d4,#0,#8
.L398:
	insert	d3,d3,d15,#0,#8
.L237:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    45   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    46   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    47   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    48   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    49   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    50   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    51   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    52   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    53   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    54   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    55   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    56   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    57   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    58   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    59   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    60   * \ingroup IfxLld_Cpu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    61   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    62  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    63  #ifndef IFXCPU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    64  #define IFXCPU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    66  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    67  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    68  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    69  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    70  #include "_Impl/IfxCpu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    71  #include "IfxSrc_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    72  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    73  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    74  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    75  #include "_Utilities/Ifx_Assert.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    76  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    77  #include "Scu/Std/IfxScuCcu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    78  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    79  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    80  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    82  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    83  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    84   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    85   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    86   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    87   * Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    88   *  \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    89   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    90   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    91   *  \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    92   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    93  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    94  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    95  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    96   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    97   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    98   * the CPU number.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	    99   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   100   *   Example usage:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   101   *   \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   102   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   103   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   104   *   \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   105   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   106  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   107  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   108  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   109  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   110  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   111  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   112  /** \brief Lock type Spin lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   113   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   114  typedef unsigned int IfxCpu_spinLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   115  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   116  /** \brief Lock type Mutex lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   117   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   118  typedef unsigned int IfxCpu_mutexLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   119  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   120  /** \brief Event used for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   121   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   122  typedef unsigned int IfxCpu_syncEvent;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   123  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   124  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   125  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   126  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   127  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   128  /** \addtogroup IfxLld_Cpu_Std_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   129   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   130  /** \brief Enumeration for the Cpu mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   131   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   132  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   133  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_halt,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_run,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_idle,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   137      IfxCpu_CoreMode_sleep,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   138      IfxCpu_CoreMode_stby,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   139      IfxCpu_CoreMode_unknown
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   140  } IfxCpu_CoreMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   141  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   142  /** \brief Performance conunter modes
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   143   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   144  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   145  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   146      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   147      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   148  } IfxCpu_CounterMode;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   150  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   151  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   153  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   154  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   155  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   156  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   157   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   158  /** \brief counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   159   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   160  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   161  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   162      uint32  counter;        /**< \brief Counter value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   163      boolean overlfow;       /**< \brief sticky overlfow */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_Counter;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   165  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   166  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   167  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   168  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   169   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   170  /** \brief Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   171   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   172  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   173  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_Perf;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   180  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   181  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   182  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   183  /** \addtogroup IfxLld_Cpu_Std_Core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   184   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   185  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   186  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   187  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   188  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   189  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   190  /** \brief API to get the address for CPU HW module register memory map
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   191   * \param cpu Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   192   * \return CPU module register address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   193   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   194  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   195  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief API to get core id of the CPU of the caller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   197   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   198   * Use IfxCpu_getCoreIndex() to get cpu no.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   199   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   201  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   203  /** \brief API to get cpu index of the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   204   * Note: This api can be used whereever cpu no/index is needed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   205   * \return Resource index of the CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   206   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   207  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   208  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   209  /** \brief API to initialize the context save area of the CPU where this is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   210   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   211   * This API can initialize the CSA of the host CPU where this API is called. This API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   212   * shall not be used to initialize the CSA of another CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   213   * \param csaBegin Pointer to start of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   214   * \param csaEnd Pointer to end of context save area
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   217  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   219  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   220   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   221   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   222  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   223  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   224  /** \brief Triggers Software Reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   225   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   226   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   227  IFX_INLINE void IfxCpu_triggerSwReset(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   228  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   229  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   230  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   231  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   232  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   233  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   234   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   235   * \return Current mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   236   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   237  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   238  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   239  /** \brief API to get current mode of CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   240   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   241   * \return Resource index of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   242   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   243  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   244  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   245  /** \brief API to set mode of the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   246   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   247   * \param mode CPU mode to be set by this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   248   * \return Success status of the activity (setting the core mode).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   249   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   250   * \retval FALSE: If the activity can't be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   251   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   252  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   253  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   254  /** \brief API to set the program counter for the CPU specified.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   255   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   256   * \param programCounter Program counter value to be set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   257   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   258   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   259   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   260   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   261  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   262  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   263  /** \brief API to set the program counter for the CPU specified and start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   264   * \param cpu Pointer to the CPU HW module (register memory map)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   265   * \param programCounter Program counter value to start the CPU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   266   * \return success status of the activity (setting program counter value).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   267   * \retval TRUE: If the activity successfully be performed.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   268   * \retval FALSE: If the activity can't be performed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   269   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   270  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   271  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   272  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   273  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   274  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   275   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   277  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   278  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   279  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   280  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   281  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   282   * This API provides the status of CPU where this API is called
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   283   * \return Status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   284   * \retval TRUE: Global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   285   * \retval FALSE: Global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   286   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   287  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   288  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   289  /** \brief API to disable global interrupt and return the previous status.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   290   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   291   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   292   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   293   * \return Previous status of global interrupt enable bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   294   * \retval TRUE: Previously, global interrupts enabled.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   295   * \retval FALSE: Previously, global interrupts disabled
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   296   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   297  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   298  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   299  /** \brief API to enable global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   300   * This API simply enables the global interrupt.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   301   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   302   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   303  IFX_INLINE void IfxCpu_enableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   304  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   305  /** \brief Disable the Global Interrupt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   306   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   307   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   309  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief API to restore global interrupt with that of the passed parameter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   311   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   312   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   313   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   314   * \param enabled Previous status of the global interrupt enable bit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   315   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   316   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   318  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   320  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   323  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   327  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to enable/ disable the data cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   329   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   330   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   331   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   332   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   333   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   334   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   335  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   336  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   337  /** \brief API to enable/ disable the instruction cacheability for selected segments
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   338   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   339   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   340   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   341   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   342   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   343   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   345  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to invalidate the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   347   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   348   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   349  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   350  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   351  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   352   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   353   * \return Status TRUE/FALSE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   354   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   356  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   358   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enable Command to enable or bypass the data cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   362   * TRUE: Enable the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   363   * FALSE: Bypass the data cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   366  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   368  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   370   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   371   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   372   * \param enable Command to enable or bypass the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   373   * TRUE: Enable the program cache.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   374   * FALSE: Bypass the program cache
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   375   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   376   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   377  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   378  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   379  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   380  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   381  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   382   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   383  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   384  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   385  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   386  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   387  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   388  /** \brief API to read the clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   389   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   390   * This API can be used to read clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   391   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   392   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   393   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   394  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   395  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   396  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   397   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   398   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   399   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   400   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   401   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   402   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   403   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   404   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   405   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   406   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   407  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   408  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   409  /** \brief API to read the instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   410   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   411   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   412   * used for this activity towards other CPUs
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   413   * \return Counter value. 0 to 0x7FFFFFFF.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   414   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   415  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   416  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   417  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   418   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   419   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   420   * It cannot be used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   421   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   422   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   423   * reading the counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   424   * \return Status of sticky overflow bit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   425   * \retval TRUE: Sticky overflow bit is set.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   426   * \retval FALSE: Sticky overflow bit is reset
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   427   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   428  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   429  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   430  /** \brief API to read the performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   431   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   432   * \return counter value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   433   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   434  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   435  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   436  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   437   * This is generic function to get sticky overflow bit of any performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   438   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Status
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   440   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   442  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief Reset and start instruction, clock and multi counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   444   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   445   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   446   * \param mode Counter mode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   447   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   448   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   449  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   450  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   451  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   452   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   453   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   454   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   455   * \param enable enable Command to enable or disable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   456   * TRUE: Enable the performance counter.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   457   * FALSE: Disable the performance counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   458   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   459   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   460  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   461  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   462  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   463  /** \brief Stop instruction and clock counters, return their values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   464   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   465   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   466   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   467   * \return Performance counter result
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   468   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   469  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   470  #endif
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   471  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   472  /** \brief API to update clock counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   473   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   474   * This API can be used to update clock counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   475   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   476   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   477   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   478   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   479  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   480  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   481  /** \brief API to update Instruction counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   482   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   483   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   484   * used for this activity towards other CPUs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   485   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   486   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   487   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   489  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief API to update performance counter for the CPU which calls this API.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   491   * This is generic function to update any of the performance counters
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   492   * \param address Address
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   493   * \param count Count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   495   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   497  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   498  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   499  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   500  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   501   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   503  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   504  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   505  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   506  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   507  /** \brief API to acquire the mutex (binary semaphore).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   508   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   509   * This API can be used to acquire/get the mutex.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   510   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   511   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   512   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   513   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   514   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   515   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   516   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   517   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   518   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   519   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   520   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   521   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   522   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   523  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   524  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   525  /** \brief API to unlock the mutex .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   526   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   527   * This API can be used to unlock the previously acquired mutex
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   528   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   529   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   530   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   531   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   532   *    IfxCpu_mutexLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   533   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   534   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   535   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   536   *      IfxCpu_releaseMutex(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   537   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   538   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   539   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   540   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   541  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   542  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   543  /** \brief API to unlock the resource .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   544   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   545   * This API can be used to unlock the previously acquired lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   546   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   547   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   548   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   549  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   550  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   551  /** \brief API to lock the resource in spin mode with the given timeout.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   552   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   553   * This API can be used to spin lock for the lock for the given timeout period.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   554   * \param lock lock pointer
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   555   * \param timeoutCount loop counter value used for timeout to acquire lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   556   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   557   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   558   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   559   *    IfxCpu_spinLock resourceLock;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   560   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   561   *    if (flag){
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   562   *      // critical section
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   563   *      IfxCpu_resetSpinLock(&resourceLock);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   564   *    }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   565   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   566   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   567   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   568  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   569  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   570  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   571  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   572  /** \addtogroup IfxLld_Cpu_Std_Utility
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   573   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   574  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   575  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   576  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   577  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   578  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   579  /** \brief API to get random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   580   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   581   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   582   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   583  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   584  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   585  /** \brief API to get random value with in the range
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   586   * \param seed Pointer to seed value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   587   * \param min minimum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   588   * \param max maximum range value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   589   * \return random value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   590   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   591  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   592  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   593  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   594   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   595   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   596   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   597   * CORE_ID register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   598   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   599   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   600   * e.g:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   601   * 1. Check for synchronisation between core 0 and core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   602   * # define 0x41U
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   603   * 2. Check for synchronisation between core 0 to core 5
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   604   * # define 0x5FU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   605   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   606   * Note:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   607   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   608   * Core 0: 0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   609   * Core 1: 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   610   * Core 2: 2
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   611   * Core 3: 3
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   612   * Core 4: 4
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   613   * Core 5: 6
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   614   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   615   * \param timeoutMilliSec timeout in millisec
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   616   * \return Error condition
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   617   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   618   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   619   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   620   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   621   * // Global variable. preferably located in  shared memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   622   * IfxCpu_syncEvent event;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   623   * boolean errorVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   624   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   625   * // Below code should be repeated in Each core
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   626   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   627   * // Upon reaching Synchonisation point
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   628   * IfxCpu_emitEvent(&event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   629   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   630   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   631   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   632   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   633   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   634  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   635  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   636  /** \brief This function sets a bit corresponding to the core in the event.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   637   * \param event Synchronous Event
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   638   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   639   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   640   * A coding example can be found in \ref IfxCpu_waitEvent
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   641   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   642   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   643  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   644  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   645  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   646  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   647  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   648  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   649  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   650  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   651  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   652  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   653      Ifx_CPU_ICR reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   654      reg.U = __mfcr(CPU_ICR);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   655      return reg.B.IE != 0;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   656  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   657  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   658  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   659  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   660  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   661      boolean enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   662      enabled = IfxCpu_areInterruptsEnabled();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   663      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   664      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   665      return enabled;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   666  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   667  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   668  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_INLINE void IfxCpu_enableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   670  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   671      __enable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   672  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   673  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   674  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   675  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   676  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   677      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   678      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   679      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   680      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   681  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   682      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   683      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   684      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   685  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   686      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   687      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   688          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   689      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   690  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   691      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   692  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   693      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   694  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   695      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   696      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   697      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   698      /*Write to PMA0 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   699      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   700      __mtcr(CPU_PMA0, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   701      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   702      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   703  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   704  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   705  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   706  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   707  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   708      uint32 cpu_pmaVal;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   709      uint16 checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   710      uint32 coreIndex   = IfxCpu_getCoreIndex();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   711      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   712  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   713      /*resolve the restrictions*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   714      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   715      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   716  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   717      if ((segmentNumberMask & checkRestrictionMask) != 0)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   718      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   719          segmentNumberMask |= checkRestrictionMask;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   720      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   721  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   722      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   723  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   724      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   725  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   726      /*The CPU_PMA registers are ENDINIT protected*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   727      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   728      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   729      /*Write to PMA1 register for selecting the cacheability for data cache*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   730      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   731      __mtcr(CPU_PMA1, cpu_pmaVal);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   732      __isync();      /* ISYNC instruction executed immediately following MTCR */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   733      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   734  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   735  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   736  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   737  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   738  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   739      __disable();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   740      __nop();
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   741  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   742  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   743  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   744  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   745  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   746      Ifx_CPU *module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   747  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   748      if (cpu < IfxCpu_ResourceCpu_none)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   749      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   750          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   751      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   752      else
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   753      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   754          module = NULL_PTR;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   755      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   756  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   757      return module;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   758  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   759  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   760  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   761  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   762  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   763      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   764  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   766  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   767  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   768  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   769      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   770  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   771  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   772  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   773  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   774  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   775      Ifx_CPU_CORE_ID reg;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   776      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L284:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d15,#7
.L285:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   777      return (IfxCpu_Id)reg.B.CORE_ID;      (inlined)
	j	.L27

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Std\IfxCpu.h	   778  }      (inlined)
.L27:
	extr.u	d0,d3,#16,#8
.L399:
	insert	d15,d0,d15,#0,#3
	insert	d3,d3,d15,#16,#8
.L400:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   125      return trapInfo;      (inlined)
	j	.L28

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   126  }      (inlined)
.L28:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   260  p_Class_nonMaskableInterrupt, tin);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   261      IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   262      __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
	st.d	[a10]0,e2
.L231:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   263      __asm("rfe");
	ld.d	e0,[a10]0
.L401:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   264  }
	rslcx
.L402:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   265  
	rfe
.L403:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   266  
	ret
.L226:
	
__IfxCpu_Trap_nonMaskableInterrupt_function_end:
	.size	IfxCpu_Trap_nonMaskableInterrupt,__IfxCpu_Trap_nonMaskableInterrupt_function_end-IfxCpu_Trap_nonMaskableInterrupt
.L99:
	; End of function
	
	.sdecl	'.text.traptab_cpu0',code,cluster('IfxCpu_Trap_vectorTable0'),protect
	.sect	'.text.traptab_cpu0'
	.align	2
	
	.global	IfxCpu_Trap_vectorTable0

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   267  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   268  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   269  #pragma section ".traptab_cpu0" awx
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   270  #pragma GCC optimize ("O2")
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   271  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   272  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   273  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   274  #pragma section CODE ".traptab_cpu0" X
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   275  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   276  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   277  #pragma protect on
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   278  #pragma section code "traptab_cpu0"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   279  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   280  #if defined(__ghs__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   281  #pragma ghs section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   282  #pragma ghs section text=".traptab_cpu0"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   283  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   284  void IfxCpu_Trap_vectorTable0(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   285  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   286      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; Function IfxCpu_Trap_vectorTable0
.L48:
IfxCpu_Trap_vectorTable0:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   287      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   288      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_memoryManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_memoryManagementError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L408:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   289      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_internalProtectionError)
	lea	a15,[a15]@los(IfxCpu_Trap_internalProtectionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L409:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   290      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_instructionError)
	lea	a15,[a15]@los(IfxCpu_Trap_instructionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L410:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   291      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_contextManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_contextManagementError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L411:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   292      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_busError)
	lea	a15,[a15]@los(IfxCpu_Trap_busError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L412:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   293      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_assertion)
	lea	a15,[a15]@los(IfxCpu_Trap_assertion)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L413:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   294  }
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_systemCall_Cpu0)
	lea	a15,[a15]@los(IfxCpu_Trap_systemCall_Cpu0)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L414:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   295  
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_nonMaskableInterrupt)
	lea	a15,[a15]@los(IfxCpu_Trap_nonMaskableInterrupt)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L415:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   296  
	ret
.L239:
	
__IfxCpu_Trap_vectorTable0_function_end:
	.size	IfxCpu_Trap_vectorTable0,__IfxCpu_Trap_vectorTable0_function_end-IfxCpu_Trap_vectorTable0
.L104:
	; End of function
	
	.sdecl	'.text.traptab_cpu1',code,cluster('IfxCpu_Trap_vectorTable1'),protect
	.sect	'.text.traptab_cpu1'
	.align	2
	
	.global	IfxCpu_Trap_vectorTable1

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   297  #if IFXCPU_NUM_MODULES >= 2
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   298  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   299  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   300  #pragma section ".traptab_cpu1" awx
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   301  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   302  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   303  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   304  #pragma section CODE ".traptab_cpu1" X
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   305  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   306  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   307  #pragma section code "traptab_cpu1"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   308  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   309  #if defined(__ghs__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   310  #pragma ghs section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   311  #pragma ghs section text=".traptab_cpu1"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   312  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   313  void IfxCpu_Trap_vectorTable1(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   314  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   315      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; Function IfxCpu_Trap_vectorTable1
.L50:
IfxCpu_Trap_vectorTable1:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   316      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   317      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_memoryManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_memoryManagementError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L420:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   318      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_internalProtectionError)
	lea	a15,[a15]@los(IfxCpu_Trap_internalProtectionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L421:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   319      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_instructionError)
	lea	a15,[a15]@los(IfxCpu_Trap_instructionError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L422:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   320      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_contextManagementError)
	lea	a15,[a15]@los(IfxCpu_Trap_contextManagementError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L423:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   321      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_busError)
	lea	a15,[a15]@los(IfxCpu_Trap_busError)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L424:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   322      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_assertion)
	lea	a15,[a15]@los(IfxCpu_Trap_assertion)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L425:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   323  }
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_systemCall_Cpu1)
	lea	a15,[a15]@los(IfxCpu_Trap_systemCall_Cpu1)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L426:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   324  
	 .align 32
	movh.a	a15,#@his(IfxCpu_Trap_nonMaskableInterrupt)
	lea	a15,[a15]@los(IfxCpu_Trap_nonMaskableInterrupt)
	
	svlcx
	mov	d4,d15
	ji	a15

	
.L427:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   325  
	ret
.L240:
	
__IfxCpu_Trap_vectorTable1_function_end:
	.size	IfxCpu_Trap_vectorTable1,__IfxCpu_Trap_vectorTable1_function_end-IfxCpu_Trap_vectorTable1
.L109:
	; End of function
	
	.calls	'__INDIRECT__','IfxCpu_Trap_memoryManagementError'
	.calls	'__INDIRECT__','IfxCpu_Trap_internalProtectionError'
	.calls	'__INDIRECT__','IfxCpu_Trap_instructionError'
	.calls	'__INDIRECT__','IfxCpu_Trap_contextManagementError'
	.calls	'__INDIRECT__','IfxCpu_Trap_busError'
	.calls	'__INDIRECT__','IfxCpu_Trap_assertion'
	.calls	'__INDIRECT__','IfxCpu_Trap_systemCall_Cpu0'
	.calls	'__INDIRECT__','IfxCpu_Trap_systemCall_Cpu1'
	.calls	'__INDIRECT__','IfxCpu_Trap_nonMaskableInterrupt'
	.calls	'IfxCpu_Trap_memoryManagementError','',8
	.calls	'IfxCpu_Trap_internalProtectionError','',8
	.calls	'IfxCpu_Trap_instructionError','',8
	.calls	'IfxCpu_Trap_contextManagementError','',8
	.calls	'IfxCpu_Trap_busError','',8
	.calls	'IfxCpu_Trap_assertion','',8
	.calls	'IfxCpu_Trap_systemCall_Cpu0','',8
	.calls	'IfxCpu_Trap_systemCall_Cpu1','',8
	.calls	'IfxCpu_Trap_nonMaskableInterrupt','',8
	.calls	'IfxCpu_Trap_vectorTable0','',0
	.extern	__INDIRECT__
	.calls	'IfxCpu_Trap_vectorTable1','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L52:
	.word	79750
	.half	3
	.word	.L53
	.byte	4
.L51:
	.byte	1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L54
	.byte	2,1,1,3
	.word	171
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,61,17,1,1,5
	.byte	'fun',0,1,61,43
	.word	174
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,152,2,18
	.word	219
	.byte	1,1,5
	.byte	'a',0,1,152,2,44
	.word	231
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,172,2,17,1,1,6,0,9
	.byte	'void',0,3
	.word	317
.L125:
	.byte	8
	.byte	'Ifx__getA11',0,3,1,220,2,18
	.word	323
	.byte	1,1
.L127:
	.byte	6,0,7
	.byte	'unsigned long long int',0,8,7,8
	.byte	'__ld64',0,3,2,135,1,19
	.word	354
	.byte	1,1,5
	.byte	'addr',0,2,135,1,32
	.word	323
	.byte	6,0,4
	.byte	'__st64',0,3,2,143,1,17,1,1,5
	.byte	'addr',0,2,143,1,30
	.word	323
	.byte	5
	.byte	'value',0,2,143,1,43
	.word	354
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,241,8,16,4,11
	.byte	'ENDINIT',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	484
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	484
	.byte	16,0,2,35,0,0,12,4,247,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	500
	.byte	4,2,35,0,0,7
	.byte	'unsigned char',0,1,8,7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,250,8,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	2,6,2,35,0,11
	.byte	'IR0',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	636
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,12,4,255,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	675
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,137,9,16,4,11
	.byte	'AE',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	636
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	653
	.byte	16,0,2,35,2,0,12,4,135,15,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	919
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,175,15,25,12,13
	.byte	'CON0',0
	.word	596
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	879
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1110
	.byte	4,2,35,8,0,14
	.word	1150
	.byte	3
	.word	1213
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,181,3,17,1,1,5
	.byte	'watchdog',0,3,181,3,65
	.word	1218
	.byte	5
	.byte	'password',0,3,181,3,82
	.word	653
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,140,4,17,1,1,5
	.byte	'watchdog',0,3,140,4,63
	.word	1218
	.byte	5
	.byte	'password',0,3,140,4,80
	.word	653
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,227,3,19
	.word	653
	.byte	1,1,5
	.byte	'watchdog',0,3,227,3,74
	.word	1218
	.byte	6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,6,143,3,16,4,11
	.byte	'P0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,12,6,181,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1448
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,6,169,2,16,4,11
	.byte	'PS0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	636
	.byte	1,0,2,35,3,0,12,6,133,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1764
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,6,110,16,4,11
	.byte	'MODREV',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	653
	.byte	16,0,2,35,2,0,12,6,148,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2335
	.byte	4,2,35,0,0,15,4
	.word	636
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,6,140,1,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	636
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	636
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	636
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	636
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	636
	.byte	5,0,2,35,3,0,12,6,164,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2463
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,6,166,1,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	636
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	636
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	636
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	636
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	636
	.byte	5,0,2,35,3,0,12,6,180,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2678
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,6,179,1,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	636
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	636
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	636
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	636
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	636
	.byte	5,0,2,35,3,0,12,6,188,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2893
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,6,153,1,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	636
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	636
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	636
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	636
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	636
	.byte	5,0,2,35,3,0,12,6,172,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3110
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,6,118,16,4,11
	.byte	'P0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,12,6,156,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3330
	.byte	4,2,35,0,0,15,24
	.word	636
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,6,205,3,16,4,11
	.byte	'PD0',0,1
	.word	636
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	636
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'PD2',0,1
	.word	636
	.byte	3,5,2,35,1,11
	.byte	'PL2',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'PD3',0,1
	.word	636
	.byte	3,1,2,35,1,11
	.byte	'PL3',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'PD4',0,1
	.word	636
	.byte	3,5,2,35,2,11
	.byte	'PL4',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'PD5',0,1
	.word	636
	.byte	3,1,2,35,2,11
	.byte	'PL5',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'PD6',0,1
	.word	636
	.byte	3,5,2,35,3,11
	.byte	'PL6',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'PD7',0,1
	.word	636
	.byte	3,1,2,35,3,11
	.byte	'PL7',0,1
	.word	636
	.byte	1,0,2,35,3,0,12,6,205,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3653
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,6,226,3,16,4,11
	.byte	'PD8',0,1
	.word	636
	.byte	3,5,2,35,0,11
	.byte	'PL8',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'PD9',0,1
	.word	636
	.byte	3,1,2,35,0,11
	.byte	'PL9',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'PD10',0,1
	.word	636
	.byte	3,5,2,35,1,11
	.byte	'PL10',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'PD11',0,1
	.word	636
	.byte	3,1,2,35,1,11
	.byte	'PL11',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'PD12',0,1
	.word	636
	.byte	3,5,2,35,2,11
	.byte	'PL12',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'PD13',0,1
	.word	636
	.byte	3,1,2,35,2,11
	.byte	'PL13',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'PD14',0,1
	.word	636
	.byte	3,5,2,35,3,11
	.byte	'PL14',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'PD15',0,1
	.word	636
	.byte	3,1,2,35,3,11
	.byte	'PL15',0,1
	.word	636
	.byte	1,0,2,35,3,0,12,6,213,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3957
	.byte	4,2,35,0,0,15,8
	.word	636
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,6,88,16,4,11
	.byte	'EN0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,12,6,140,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4282
	.byte	4,2,35,0,0,15,12
	.word	636
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,6,183,3,16,4,11
	.byte	'PDIS0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,12,6,197,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4622
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,6,165,3,16,4,11
	.byte	'SEL0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	2,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	19,1,2,35,0,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,12,6,189,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4988
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,6,206,2,16,4,11
	.byte	'PS0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,12,6,149,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5274
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,6,227,2,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,12,6,165,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5421
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,6,238,2,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	20,0,2,35,0,0,12,6,173,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5590
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,6,216,2,16,4,11
	.byte	'reserved_0',0,2
	.word	653
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,12,6,157,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5762
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,6,232,1,16,4,11
	.byte	'reserved_0',0,2
	.word	653
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	653
	.byte	12,0,2,35,2,0,12,6,229,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5937
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,6,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	8,0,2,35,3,0,12,6,245,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6111
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,6,136,2,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	636
	.byte	4,0,2,35,3,0,12,6,253,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6285
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,6,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	636
	.byte	1,0,2,35,3,0,12,6,237,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6461
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,6,249,2,16,4,11
	.byte	'PS0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,12,6,141,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6617
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,6,147,2,16,4,11
	.byte	'reserved_0',0,2
	.word	653
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	636
	.byte	1,0,2,35,3,0,12,6,221,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6950
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR0_Bits',0,6,192,1,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,12,6,196,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7298
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_Bits',0,6,200,1,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,6,208,1,16,4,11
	.byte	'RDIS_CTRL',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	636
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,12,6,204,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7422
	.byte	4,2,35,0,13
	.byte	'B_P21',0
	.word	7506
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR2_Bits',0,6,218,1,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'LVDSR',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'LVDSRL',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	636
	.byte	2,4,2,35,1,11
	.byte	'TDIS_CTRL',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'TX_DIS',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,12,6,213,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7686
	.byte	4,2,35,0,0,15,76
	.word	636
	.byte	16,75,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,6,82,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	32,0,2,35,0,0,12,6,132,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7939
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,6,45,16,4,11
	.byte	'EN0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	636
	.byte	1,0,2,35,3,0,12,6,252,3,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8026
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,6,229,5,25,128,2,13
	.byte	'OUT',0
	.word	1724
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2295
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2414
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2454
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2638
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	2853
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3070
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3290
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2454
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3604
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3644
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	3917
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4233
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4273
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4573
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4613
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	4948
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5234
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4273
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5381
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5550
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5722
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	5897
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6071
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6245
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6421
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6577
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	6910
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7258
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4273
	.byte	8,3,35,152,1,13
	.byte	'LPCR0',0
	.word	7382
	.byte	4,3,35,160,1,13
	.byte	'LPCR1',0
	.word	7631
	.byte	4,3,35,164,1,13
	.byte	'LPCR2',0
	.word	7890
	.byte	4,3,35,168,1,13
	.byte	'reserved_A4',0
	.word	7930
	.byte	76,3,35,172,1,13
	.byte	'ACCEN1',0
	.word	7986
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8553
	.byte	4,3,35,252,1,0,14
	.word	8593
	.byte	3
	.word	9196
	.byte	17,5,172,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,5,208,4,17,1,1,5
	.byte	'port',0,5,208,4,44
	.word	9201
	.byte	5
	.byte	'pinIndex',0,5,208,4,56
	.word	636
	.byte	5
	.byte	'action',0,5,208,4,80
	.word	9206
	.byte	6,0,17,8,127,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_none',0,2,0
.L130:
	.byte	8
	.byte	'IfxCpu_getCoreId',0,3,7,133,6,22
	.word	9387
	.byte	1,1
.L132:
	.byte	6,0,17,8,156,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_none',0,2,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,7,141,6,31
	.word	9469
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,7,139,5,20
	.word	636
	.byte	1,1,6,0
.L111:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,7,161,6,19
	.word	9624
	.byte	1,1,5
	.byte	'address',0,7,161,6,55
	.word	653
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,7,190,6,20
	.word	636
	.byte	1,1,5
	.byte	'address',0,7,190,6,70
	.word	653
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,7,172,8,17,1,1,5
	.byte	'address',0,7,172,8,56
	.word	9624
	.byte	5
	.byte	'count',0,7,172,8,72
	.word	9624
	.byte	19,6,0,0
.L123:
	.byte	20,10,186,1,9,8,13
	.byte	'tAddr',0
	.word	461
	.byte	4,2,35,0,11
	.byte	'tId',0,1
	.word	636
	.byte	8,0,2,35,4,11
	.byte	'tClass',0,1
	.word	636
	.byte	8,0,2,35,5,11
	.byte	'tCpu',0,1
	.word	636
	.byte	3,5,2,35,6,0
.L115:
	.byte	8
	.byte	'IfxCpu_Trap_extractTrapInfo',0,3,9,118,24
	.word	9855
	.byte	1,1
.L118:
	.byte	5
	.byte	'trapClass',0,9,118,58
	.word	636
.L120:
	.byte	5
	.byte	'tin',0,9,118,76
	.word	9624
.L122:
	.byte	19,6,6,0,0,21
	.word	477
	.byte	22
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,23
	.word	10000
	.byte	0,14
	.word	461
.L128:
	.byte	3
	.word	461
	.byte	24
	.byte	'__cmpswapw',0
	.word	10042
	.byte	1,1,1,1,25
	.byte	'p',0
	.word	10047
	.byte	25
	.byte	'value',0
	.word	461
	.byte	25
	.byte	'compare',0
	.word	461
	.byte	0,14
	.word	477
	.byte	24
	.byte	'__mfcr',0
	.word	10104
	.byte	1,1,1,1,23
	.word	477
	.byte	0,26
	.byte	'__debug',0,1,1,1,1,27
	.word	179
	.byte	28
	.word	205
	.byte	6,0,27
	.word	240
	.byte	28
	.word	272
	.byte	6,0,27
	.word	285
	.byte	6,0,27
	.word	328
	.byte	6,0,27
	.word	380
	.byte	28
	.word	399
	.byte	6,0,27
	.word	415
	.byte	28
	.word	430
	.byte	28
	.word	444
	.byte	6,0,27
	.word	1223
	.byte	28
	.word	1263
	.byte	28
	.word	1281
	.byte	6,0,27
	.word	1301
	.byte	28
	.word	1339
	.byte	28
	.word	1357
	.byte	6,0,27
	.word	1377
	.byte	28
	.word	1428
	.byte	6,0,27
	.word	9309
	.byte	28
	.word	9337
	.byte	28
	.word	9351
	.byte	28
	.word	9369
	.byte	6,0,27
	.word	9438
	.byte	6,0,27
	.word	9548
	.byte	6,0,27
	.word	9582
	.byte	6,0,27
	.word	9645
	.byte	28
	.word	9686
	.byte	6,0,27
	.word	9705
	.byte	28
	.word	9760
	.byte	6,0,27
	.word	9779
	.byte	28
	.word	9819
	.byte	28
	.word	9836
	.byte	19,6,0,0,27
	.word	9926
	.byte	28
	.word	9965
	.byte	28
	.word	9983
	.byte	19,29
	.word	328
	.byte	30
	.word	352
	.byte	0,6,29
	.word	9438
	.byte	30
	.word	9467
	.byte	0,6,0,0
.L113:
	.byte	14
	.word	9855
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,11,92,16,4,11
	.byte	'CORE_ID',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	484
	.byte	29,0,2,35,0,0
.L133:
	.byte	12,11,223,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10390
	.byte	4,2,35,0,0
.L137:
	.byte	14
	.word	9855
.L150:
	.byte	14
	.word	9855
.L163:
	.byte	14
	.word	9855
.L176:
	.byte	14
	.word	9855
.L189:
	.byte	14
	.word	9855
.L202:
	.byte	14
	.word	9855
.L215:
	.byte	14
	.word	9855
.L228:
	.byte	14
	.word	9855
	.byte	31
	.byte	'__INDIRECT__',0,9,1,1,1,1,1,7
	.byte	'short int',0,2,5,32
	.byte	'__wchar_t',0,9,1,1
	.word	10559
	.byte	32
	.byte	'__size_t',0,9,1,1
	.word	461
	.byte	32
	.byte	'__ptrdiff_t',0,9,1,1
	.word	477
	.byte	33,1,3
	.word	10627
	.byte	32
	.byte	'__codeptr',0,9,1,1
	.word	10629
	.byte	32
	.byte	'boolean',0,12,101,29
	.word	636
	.byte	32
	.byte	'uint8',0,12,105,29
	.word	636
	.byte	32
	.byte	'uint16',0,12,109,29
	.word	653
	.byte	32
	.byte	'uint32',0,12,113,29
	.word	9624
	.byte	32
	.byte	'uint64',0,12,118,29
	.word	354
	.byte	32
	.byte	'sint16',0,12,126,29
	.word	10559
	.byte	7
	.byte	'long int',0,4,5,32
	.byte	'sint32',0,12,131,1,29
	.word	10742
	.byte	7
	.byte	'long long int',0,8,5,32
	.byte	'sint64',0,12,138,1,29
	.word	10770
	.byte	32
	.byte	'float32',0,12,167,1,29
	.word	231
	.byte	32
	.byte	'pvoid',0,13,57,28
	.word	323
	.byte	32
	.byte	'Ifx_TickTime',0,13,79,28
	.word	10770
	.byte	17,13,130,1,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,32
	.byte	'Ifx_RxSel',0,13,140,1,3
	.word	10855
	.byte	17,10,89,9,1,18
	.byte	'IfxCpu_Trap_MemoryManagement_Id_virtualAddressFill',0,0,18
	.byte	'IfxCpu_Trap_MemoryManagement_Id_virtualAddressProtection',0,1,0,32
	.byte	'IfxCpu_Trap_MemoryManagement_Id',0,10,93,3
	.word	10993
	.byte	17,10,98,9,1,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_privilegeViolation',0,1,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionRead',0,2,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionWrite',0,3,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionExecute',0,4,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionPeripheralAccess',0,5,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionNullAddress',0,6,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_globalRegisterWriteProtection',0,7,0,32
	.byte	'IfxCpu_Trap_InternalProtection_Id',0,10,107,3
	.word	11151
	.byte	17,10,112,9,1,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_illegalOpcode',0,1,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_unimplementedOpcode',0,2,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_invalidOperand',0,3,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_dataAddressAlignment',0,4,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_invalidMemoryAddress',0,5,0,32
	.byte	'IfxCpu_Trap_InstructionErrors_Id',0,10,119,3
	.word	11628
	.byte	17,10,124,9,1,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_freeContextListDepletion',0,1,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callDepthOverflow',0,2,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callDepthUnderflow',0,3,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_freeContextListUnderflow',0,4,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callStackUnderflow',0,5,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_contextType',0,6,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_nestingError',0,7,0,32
	.byte	'IfxCpu_Trap_ContextManagement_Id',0,10,133,1,3
	.word	11941
	.byte	17,10,138,1,9,1,18
	.byte	'IfxCpu_Trap_Bus_Id_programFetchSynchronousError',0,1,18
	.byte	'IfxCpu_Trap_Bus_Id_dataAccessSynchronousError',0,2,18
	.byte	'IfxCpu_Trap_Bus_Id_dataAccessAsynchronousError',0,3,18
	.byte	'IfxCpu_Trap_Bus_Id_CoprocessorTrapAsynchronousError',0,4,18
	.byte	'IfxCpu_Trap_Bus_Id_programMemoryIntegrityError',0,5,18
	.byte	'IfxCpu_Trap_Bus_Id_dataMemoryIntegrityError',0,6,18
	.byte	'IfxCpu_Trap_Bus_Id_temporalAsynchronousError',0,7,0,32
	.byte	'IfxCpu_Trap_Bus_Id',0,10,147,1,3
	.word	12365
	.byte	17,10,152,1,9,1,18
	.byte	'IfxCpu_Trap_Assertion_Id_arithmeticOverflow',0,1,18
	.byte	'IfxCpu_Trap_Assertion_Id_stickyArithmeticOverflow',0,2,0,32
	.byte	'IfxCpu_Trap_Assertion_Id',0,10,156,1,3
	.word	12743
	.byte	32
	.byte	'IfxCpu_Trap_SystemCall_Id',0,10,161,1,16
	.word	10742
	.byte	32
	.byte	'IfxCpu_Trap_NonMaskableInterrupt_Id',0,10,166,1,16
	.word	10742
	.byte	32
	.byte	'IfxCpu_Trap',0,10,192,1,3
	.word	9855
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,11,45,16,4,11
	.byte	'ADDR',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_A_Bits',0,11,48,3
	.word	12983
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,11,51,16,4,11
	.byte	'VSS',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	484
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BIV_Bits',0,11,55,3
	.word	13044
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,11,58,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	484
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_BTV_Bits',0,11,62,3
	.word	13123
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,11,65,16,4,11
	.byte	'CountValue',0,4
	.word	484
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	484
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT_Bits',0,11,69,3
	.word	13209
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,11,72,16,4,11
	.byte	'CM',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	484
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	484
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	484
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	484
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL_Bits',0,11,80,3
	.word	13298
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,11,83,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	484
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	484
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT_Bits',0,11,89,3
	.word	13444
	.byte	32
	.byte	'Ifx_CPU_CORE_ID_Bits',0,11,96,3
	.word	10390
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,11,99,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	484
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L_Bits',0,11,103,3
	.word	13600
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,11,106,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	484
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U_Bits',0,11,110,3
	.word	13693
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,11,113,16,4,11
	.byte	'MODREV',0,4
	.word	484
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	484
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	484
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID_Bits',0,11,118,3
	.word	13786
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,11,121,16,4,11
	.byte	'XE',0,4
	.word	484
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	484
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE_Bits',0,11,125,3
	.word	13893
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,11,128,1,16,4,11
	.byte	'EVTA',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	484
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	484
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	484
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	484
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT_Bits',0,11,136,1,3
	.word	13980
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,11,139,1,16,4,11
	.byte	'CID',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	484
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID_Bits',0,11,143,1,3
	.word	14134
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,11,146,1,16,4,11
	.byte	'DATA',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_D_Bits',0,11,149,1,3
	.word	14228
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,11,152,1,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	484
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	484
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	484
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	484
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	484
	.byte	1,17,2,35,0,11
	.byte	'SME',0,4
	.word	484
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	484
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DATR_Bits',0,11,163,1,3
	.word	14291
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,11,166,1,16,4,11
	.byte	'DE',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	484
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	484
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	484
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	484
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	484
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	484
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	484
	.byte	19,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR_Bits',0,11,177,1,3
	.word	14509
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,11,180,1,16,4,11
	.byte	'DTA',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	484
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR_Bits',0,11,184,1,3
	.word	14724
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,11,187,1,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	484
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0_Bits',0,11,192,1,3
	.word	14818
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,11,195,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	484
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	484
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2_Bits',0,11,199,1,3
	.word	14934
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,11,202,1,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	6,26,2,35,0,11
	.byte	'DCXValue',0,4
	.word	484
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_CPU_DCX_Bits',0,11,206,1,3
	.word	15035
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,11,209,1,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD_Bits',0,11,212,1,3
	.word	15128
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,11,215,1,16,4,11
	.byte	'TA',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR_Bits',0,11,218,1,3
	.word	15208
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,11,221,1,16,4,11
	.byte	'IED',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	484
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	484
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	484
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	484
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	484
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	484
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	484
	.byte	18,0,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR_Bits',0,11,233,1,3
	.word	15277
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,11,236,1,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'DMSValue',0,4
	.word	484
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_DMS_Bits',0,11,240,1,3
	.word	15506
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,11,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	484
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L_Bits',0,11,247,1,3
	.word	15599
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,11,250,1,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	484
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U_Bits',0,11,254,1,3
	.word	15694
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,11,129,2,16,4,11
	.byte	'RE',0,4
	.word	484
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	484
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE_Bits',0,11,133,2,3
	.word	15789
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,11,136,2,16,4,11
	.byte	'WE',0,4
	.word	484
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	484
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE_Bits',0,11,140,2,3
	.word	15879
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,11,143,2,16,4,11
	.byte	'SRE',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	484
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	484
	.byte	3,26,2,35,0,11
	.byte	'CRE',0,4
	.word	484
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	484
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	484
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	484
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	484
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	484
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	484
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	484
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	484
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	484
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	484
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	484
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR_Bits',0,11,161,2,3
	.word	15969
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,11,164,2,16,4,11
	.byte	'EVTA',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	484
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	484
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	484
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	484
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT_Bits',0,11,172,2,3
	.word	16293
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,11,175,2,16,4,11
	.byte	'FCXO',0,4
	.word	484
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	484
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	484
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FCX_Bits',0,11,180,2,3
	.word	16447
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,11,183,2,16,4,11
	.byte	'TST',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	484
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	484
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	484
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	484
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	484
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	484
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	484
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	484
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	484
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	484
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	484
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	484
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	484
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	484
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	484
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,11,202,2,3
	.word	16553
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,11,205,2,16,4,11
	.byte	'OPC',0,4
	.word	484
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	484
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	484
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	484
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	484
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,11,212,2,3
	.word	16902
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,11,215,2,16,4,11
	.byte	'PC',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,11,218,2,3
	.word	17062
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,11,221,2,16,4,11
	.byte	'SRC1',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,11,224,2,3
	.word	17143
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,11,227,2,16,4,11
	.byte	'SRC2',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,11,230,2,3
	.word	17230
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,11,233,2,16,4,11
	.byte	'SRC3',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,11,236,2,3
	.word	17317
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,11,239,2,16,4,11
	.byte	'CountValue',0,4
	.word	484
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	484
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT_Bits',0,11,243,2,3
	.word	17404
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,11,246,2,16,4,11
	.byte	'CCPN',0,4
	.word	484
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	484
	.byte	5,17,2,35,0,11
	.byte	'IE',0,4
	.word	484
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	484
	.byte	10,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	484
	.byte	6,0,2,35,0,0,32
	.byte	'Ifx_CPU_ICR_Bits',0,11,253,2,3
	.word	17495
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,11,128,3,16,4,11
	.byte	'ISP',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_ISP_Bits',0,11,131,3,3
	.word	17638
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,11,134,3,16,4,11
	.byte	'LCXO',0,4
	.word	484
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	484
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	484
	.byte	12,0,2,35,0,0,32
	.byte	'Ifx_CPU_LCX_Bits',0,11,139,3,3
	.word	17704
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,11,142,3,16,4,11
	.byte	'CountValue',0,4
	.word	484
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	484
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT_Bits',0,11,146,3,3
	.word	17810
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,11,149,3,16,4,11
	.byte	'CountValue',0,4
	.word	484
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	484
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT_Bits',0,11,153,3,3
	.word	17903
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,11,156,3,16,4,11
	.byte	'CountValue',0,4
	.word	484
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	484
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT_Bits',0,11,160,3,3
	.word	17996
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,11,163,3,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	484
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_CPU_PC_Bits',0,11,167,3,3
	.word	18089
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,11,170,3,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	484
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0_Bits',0,11,175,3,3
	.word	18174
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,11,178,3,16,4,11
	.byte	'PCINV',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	484
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1_Bits',0,11,183,3,3
	.word	18290
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,11,186,3,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	484
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	484
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2_Bits',0,11,190,3,3
	.word	18401
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,11,193,3,16,4,11
	.byte	'PCXO',0,4
	.word	484
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	484
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	484
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	484
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	484
	.byte	10,0,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI_Bits',0,11,200,3,3
	.word	18502
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,11,203,3,16,4,11
	.byte	'TA',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR_Bits',0,11,206,3,3
	.word	18632
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,11,209,3,16,4,11
	.byte	'IED',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	484
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	484
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	484
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	484
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	484
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	484
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	484
	.byte	18,0,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR_Bits',0,11,221,3,3
	.word	18701
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,11,224,3,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	13,19,2,35,0,11
	.byte	'DAC',0,4
	.word	484
	.byte	3,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	484
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0_Bits',0,11,229,3,3
	.word	18930
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,11,232,3,16,4,11
	.byte	'reserved_0',0,4
	.word	484
	.byte	14,18,2,35,0,11
	.byte	'CAC',0,4
	.word	484
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	484
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1_Bits',0,11,237,3,3
	.word	19043
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,11,240,3,16,4,11
	.byte	'PSI',0,4
	.word	484
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	484
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2_Bits',0,11,244,3,3
	.word	19156
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,11,247,3,16,4,11
	.byte	'FRE',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	484
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	484
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	484
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	484
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	484
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	484
	.byte	17,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR_Bits',0,11,129,4,3
	.word	19247
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,11,132,4,16,4,11
	.byte	'CDC',0,4
	.word	484
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	484
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	484
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	484
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	484
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	484
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	484
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	484
	.byte	12,5,2,35,0,11
	.byte	'SAV',0,4
	.word	484
	.byte	1,4,2,35,0,11
	.byte	'AV',0,4
	.word	484
	.byte	1,3,2,35,0,11
	.byte	'SV',0,4
	.word	484
	.byte	1,2,2,35,0,11
	.byte	'V',0,4
	.word	484
	.byte	1,1,2,35,0,11
	.byte	'C',0,4
	.word	484
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_PSW_Bits',0,11,147,4,3
	.word	19450
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,11,150,4,16,4,11
	.byte	'ADFLIP',0,4
	.word	484
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	484
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	484
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	484
	.byte	1,0,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN_Bits',0,11,156,4,3
	.word	19693
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,11,159,4,16,4,11
	.byte	'PC',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'PT',0,4
	.word	484
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	484
	.byte	5,24,2,35,0,11
	.byte	'DC',0,4
	.word	484
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	484
	.byte	1,22,2,35,0,11
	.byte	'DT',0,4
	.word	484
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	484
	.byte	13,8,2,35,0,11
	.byte	'IODT',0,4
	.word	484
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	484
	.byte	7,0,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON_Bits',0,11,171,4,3
	.word	19821
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,11,174,4,16,4,11
	.byte	'EN',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,11,177,4,3
	.word	20062
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,11,180,4,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,11,183,4,3
	.word	20145
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,11,186,4,16,4,11
	.byte	'EN',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,11,189,4,3
	.word	20236
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,11,192,4,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,11,195,4,3
	.word	20327
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,11,198,4,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,11,202,4,3
	.word	20426
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,11,205,4,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,11,209,4,3
	.word	20533
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,11,212,4,16,4,11
	.byte	'EVTA',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	484
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	484
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	484
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	484
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT_Bits',0,11,220,4,3
	.word	20640
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,11,223,4,16,4,11
	.byte	'FCDSF',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	484
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'IT',0,4
	.word	484
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	484
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON_Bits',0,11,231,4,3
	.word	20794
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,11,234,4,16,4,11
	.byte	'ASI',0,4
	.word	484
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	484
	.byte	27,0,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,11,238,4,3
	.word	20955
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,11,241,4,16,4,11
	.byte	'TEXP0',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	484
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	484
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	484
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	484
	.byte	15,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON_Bits',0,11,249,4,3
	.word	21053
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,11,252,4,16,4,11
	.byte	'Timer',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,11,255,4,3
	.word	21225
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,11,130,5,16,4,11
	.byte	'ADDR',0,4
	.word	484
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR_Bits',0,11,133,5,3
	.word	21305
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,11,136,5,16,4,11
	.byte	'EVTA',0,4
	.word	484
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	484
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	484
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	484
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	484
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	484
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	484
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	484
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	484
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	484
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	484
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	484
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	484
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	484
	.byte	3,0,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT_Bits',0,11,153,5,3
	.word	21378
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,11,156,5,16,4,11
	.byte	'T0',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	484
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	484
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	484
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	484
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	484
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	484
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	484
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,11,167,5,3
	.word	21696
	.byte	12,11,175,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12983
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_A',0,11,180,5,3
	.word	21891
	.byte	12,11,183,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13044
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BIV',0,11,188,5,3
	.word	21950
	.byte	12,11,191,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13123
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_BTV',0,11,196,5,3
	.word	22011
	.byte	12,11,199,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13209
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCNT',0,11,204,5,3
	.word	22072
	.byte	12,11,207,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13298
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CCTRL',0,11,212,5,3
	.word	22134
	.byte	12,11,215,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13444
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_COMPAT',0,11,220,5,3
	.word	22197
	.byte	32
	.byte	'Ifx_CPU_CORE_ID',0,11,228,5,3
	.word	10459
	.byte	12,11,231,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13600
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_L',0,11,236,5,3
	.word	22286
	.byte	12,11,239,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13693
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPR_U',0,11,244,5,3
	.word	22349
	.byte	12,11,247,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13786
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPU_ID',0,11,252,5,3
	.word	22412
	.byte	12,11,255,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13893
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CPXE',0,11,132,6,3
	.word	22476
	.byte	12,11,135,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13980
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CREVT',0,11,140,6,3
	.word	22538
	.byte	12,11,143,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14134
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_CUS_ID',0,11,148,6,3
	.word	22601
	.byte	12,11,151,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14228
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_D',0,11,156,6,3
	.word	22665
	.byte	12,11,159,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14291
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DATR',0,11,164,6,3
	.word	22724
	.byte	12,11,167,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14509
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGSR',0,11,172,6,3
	.word	22786
	.byte	12,11,175,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14724
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DBGTCR',0,11,180,6,3
	.word	22849
	.byte	12,11,183,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14818
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON0',0,11,188,6,3
	.word	22913
	.byte	12,11,191,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14934
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCON2',0,11,196,6,3
	.word	22976
	.byte	12,11,199,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15035
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DCX',0,11,204,6,3
	.word	23039
	.byte	12,11,207,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15128
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DEADD',0,11,212,6,3
	.word	23100
	.byte	12,11,215,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15208
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIEAR',0,11,220,6,3
	.word	23163
	.byte	12,11,223,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15277
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DIETR',0,11,228,6,3
	.word	23226
	.byte	12,11,231,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15506
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DMS',0,11,236,6,3
	.word	23289
	.byte	12,11,239,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15599
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_L',0,11,244,6,3
	.word	23350
	.byte	12,11,247,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15694
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPR_U',0,11,252,6,3
	.word	23413
	.byte	12,11,255,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15789
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPRE',0,11,132,7,3
	.word	23476
	.byte	12,11,135,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15879
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DPWE',0,11,140,7,3
	.word	23538
	.byte	12,11,143,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15969
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_DSTR',0,11,148,7,3
	.word	23600
	.byte	12,11,151,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16293
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_EXEVT',0,11,156,7,3
	.word	23662
	.byte	12,11,159,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16447
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FCX',0,11,164,7,3
	.word	23725
	.byte	12,11,167,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16553
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,11,172,7,3
	.word	23786
	.byte	12,11,175,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16902
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,11,180,7,3
	.word	23856
	.byte	12,11,183,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17062
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,11,188,7,3
	.word	23926
	.byte	12,11,191,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17143
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,11,196,7,3
	.word	23995
	.byte	12,11,199,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17230
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,11,204,7,3
	.word	24066
	.byte	12,11,207,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17317
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,11,212,7,3
	.word	24137
	.byte	12,11,215,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17404
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICNT',0,11,220,7,3
	.word	24208
	.byte	12,11,223,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17495
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ICR',0,11,228,7,3
	.word	24270
	.byte	12,11,231,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17638
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_ISP',0,11,236,7,3
	.word	24331
	.byte	12,11,239,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17704
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_LCX',0,11,244,7,3
	.word	24392
	.byte	12,11,247,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17810
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M1CNT',0,11,252,7,3
	.word	24453
	.byte	12,11,255,7,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17903
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M2CNT',0,11,132,8,3
	.word	24516
	.byte	12,11,135,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17996
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_M3CNT',0,11,140,8,3
	.word	24579
	.byte	12,11,143,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18089
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PC',0,11,148,8,3
	.word	24642
	.byte	12,11,151,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18174
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON0',0,11,156,8,3
	.word	24702
	.byte	12,11,159,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18290
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON1',0,11,164,8,3
	.word	24765
	.byte	12,11,167,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18401
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCON2',0,11,172,8,3
	.word	24828
	.byte	12,11,175,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18502
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PCXI',0,11,180,8,3
	.word	24891
	.byte	12,11,183,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18632
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIEAR',0,11,188,8,3
	.word	24953
	.byte	12,11,191,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18701
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PIETR',0,11,196,8,3
	.word	25016
	.byte	12,11,199,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18930
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA0',0,11,204,8,3
	.word	25079
	.byte	12,11,207,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19043
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA1',0,11,212,8,3
	.word	25141
	.byte	12,11,215,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19156
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PMA2',0,11,220,8,3
	.word	25203
	.byte	12,11,223,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19247
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSTR',0,11,228,8,3
	.word	25265
	.byte	12,11,231,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19450
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_PSW',0,11,236,8,3
	.word	25327
	.byte	12,11,239,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19693
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SEGEN',0,11,244,8,3
	.word	25388
	.byte	12,11,247,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19821
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SMACON',0,11,252,8,3
	.word	25451
	.byte	12,11,255,8,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20062
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_ACCENA',0,11,132,9,3
	.word	25515
	.byte	12,11,135,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20145
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_ACCENB',0,11,140,9,3
	.word	25585
	.byte	12,11,143,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20236
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,11,148,9,3
	.word	25655
	.byte	12,11,151,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20327
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,11,156,9,3
	.word	25729
	.byte	12,11,159,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20426
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,11,164,9,3
	.word	25803
	.byte	12,11,167,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20533
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,11,172,9,3
	.word	25873
	.byte	12,11,175,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20640
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SWEVT',0,11,180,9,3
	.word	25943
	.byte	12,11,183,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20794
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_SYSCON',0,11,188,9,3
	.word	26006
	.byte	12,11,191,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20955
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TASK_ASI',0,11,196,9,3
	.word	26070
	.byte	12,11,199,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21053
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_CON',0,11,204,9,3
	.word	26136
	.byte	12,11,207,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21225
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TPS_TIMER',0,11,212,9,3
	.word	26201
	.byte	12,11,215,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21305
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_ADR',0,11,220,9,3
	.word	26268
	.byte	12,11,223,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21378
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TR_EVT',0,11,228,9,3
	.word	26332
	.byte	12,11,231,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21696
	.byte	4,2,35,0,0,32
	.byte	'Ifx_CPU_TRIG_ACC',0,11,236,9,3
	.word	26396
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,11,247,9,25,8,13
	.byte	'L',0
	.word	22286
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	22349
	.byte	4,2,35,4,0,14
	.word	26462
	.byte	32
	.byte	'Ifx_CPU_CPR',0,11,251,9,3
	.word	26504
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,11,254,9,25,8,13
	.byte	'L',0
	.word	23350
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	23413
	.byte	4,2,35,4,0,14
	.word	26530
	.byte	32
	.byte	'Ifx_CPU_DPR',0,11,130,10,3
	.word	26572
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN',0,11,133,10,25,16,13
	.byte	'LA',0
	.word	25803
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	25873
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	25655
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	25729
	.byte	4,2,35,12,0,14
	.word	26598
	.byte	32
	.byte	'Ifx_CPU_SPROT_RGN',0,11,139,10,3
	.word	26680
	.byte	15,12
	.word	26201
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,11,142,10,25,16,13
	.byte	'CON',0
	.word	26136
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	26712
	.byte	12,2,35,4,0,14
	.word	26721
	.byte	32
	.byte	'Ifx_CPU_TPS',0,11,146,10,3
	.word	26769
	.byte	10
	.byte	'_Ifx_CPU_TR',0,11,149,10,25,8,13
	.byte	'EVT',0
	.word	26332
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	26268
	.byte	4,2,35,4,0,14
	.word	26795
	.byte	32
	.byte	'Ifx_CPU_TR',0,11,153,10,3
	.word	26840
	.byte	15,176,32
	.word	636
	.byte	16,175,32,0,15,208,223,1
	.word	636
	.byte	16,207,223,1,0,15,248,1
	.word	636
	.byte	16,247,1,0,15,244,29
	.word	636
	.byte	16,243,29,0,15,188,3
	.word	636
	.byte	16,187,3,0,15,232,3
	.word	636
	.byte	16,231,3,0,15,252,23
	.word	636
	.byte	16,251,23,0,15,228,63
	.word	636
	.byte	16,227,63,0,15,128,1
	.word	26530
	.byte	16,15,0,14
	.word	26955
	.byte	15,128,31
	.word	636
	.byte	16,255,30,0,15,64
	.word	26462
	.byte	16,7,0,14
	.word	26981
	.byte	15,192,31
	.word	636
	.byte	16,191,31,0,15,16
	.word	22476
	.byte	16,3,0,15,16
	.word	23476
	.byte	16,3,0,15,16
	.word	23538
	.byte	16,3,0,15,208,7
	.word	636
	.byte	16,207,7,0,14
	.word	26721
	.byte	15,240,23
	.word	636
	.byte	16,239,23,0,15,64
	.word	26795
	.byte	16,7,0,14
	.word	27060
	.byte	15,192,23
	.word	636
	.byte	16,191,23,0,15,232,1
	.word	636
	.byte	16,231,1,0,15,28
	.word	636
	.byte	16,27,0,15,180,1
	.word	636
	.byte	16,179,1,0,15,16
	.word	636
	.byte	16,15,0,15,172,1
	.word	636
	.byte	16,171,1,0,15,64
	.word	22665
	.byte	16,15,0,15,64
	.word	636
	.byte	16,63,0,15,64
	.word	21891
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,11,166,10,25,128,128,4,13
	.byte	'reserved_0',0
	.word	26865
	.byte	176,32,2,35,0,13
	.byte	'SEGEN',0
	.word	25388
	.byte	4,3,35,176,32,13
	.byte	'reserved_1034',0
	.word	26876
	.byte	208,223,1,3,35,180,32,13
	.byte	'TASK_ASI',0
	.word	26070
	.byte	4,4,35,132,128,2,13
	.byte	'reserved_8008',0
	.word	26889
	.byte	248,1,4,35,136,128,2,13
	.byte	'PMA0',0
	.word	25079
	.byte	4,4,35,128,130,2,13
	.byte	'PMA1',0
	.word	25141
	.byte	4,4,35,132,130,2,13
	.byte	'PMA2',0
	.word	25203
	.byte	4,4,35,136,130,2,13
	.byte	'reserved_810C',0
	.word	26900
	.byte	244,29,4,35,140,130,2,13
	.byte	'DCON2',0
	.word	22976
	.byte	4,4,35,128,160,2,13
	.byte	'reserved_9004',0
	.word	4273
	.byte	8,4,35,132,160,2,13
	.byte	'SMACON',0
	.word	25451
	.byte	4,4,35,140,160,2,13
	.byte	'DSTR',0
	.word	23600
	.byte	4,4,35,144,160,2,13
	.byte	'reserved_9014',0
	.word	2454
	.byte	4,4,35,148,160,2,13
	.byte	'DATR',0
	.word	22724
	.byte	4,4,35,152,160,2,13
	.byte	'DEADD',0
	.word	23100
	.byte	4,4,35,156,160,2,13
	.byte	'DIEAR',0
	.word	23163
	.byte	4,4,35,160,160,2,13
	.byte	'DIETR',0
	.word	23226
	.byte	4,4,35,164,160,2,13
	.byte	'reserved_9028',0
	.word	3644
	.byte	24,4,35,168,160,2,13
	.byte	'DCON0',0
	.word	22913
	.byte	4,4,35,192,160,2,13
	.byte	'reserved_9044',0
	.word	26911
	.byte	188,3,4,35,196,160,2,13
	.byte	'PSTR',0
	.word	25265
	.byte	4,4,35,128,164,2,13
	.byte	'PCON1',0
	.word	24765
	.byte	4,4,35,132,164,2,13
	.byte	'PCON2',0
	.word	24828
	.byte	4,4,35,136,164,2,13
	.byte	'PCON0',0
	.word	24702
	.byte	4,4,35,140,164,2,13
	.byte	'PIEAR',0
	.word	24953
	.byte	4,4,35,144,164,2,13
	.byte	'PIETR',0
	.word	25016
	.byte	4,4,35,148,164,2,13
	.byte	'reserved_9218',0
	.word	26922
	.byte	232,3,4,35,152,164,2,13
	.byte	'COMPAT',0
	.word	22197
	.byte	4,4,35,128,168,2,13
	.byte	'reserved_9404',0
	.word	26933
	.byte	252,23,4,35,132,168,2,13
	.byte	'FPU_TRAP_CON',0
	.word	23786
	.byte	4,4,35,128,192,2,13
	.byte	'FPU_TRAP_PC',0
	.word	23926
	.byte	4,4,35,132,192,2,13
	.byte	'FPU_TRAP_OPC',0
	.word	23856
	.byte	4,4,35,136,192,2,13
	.byte	'reserved_A00C',0
	.word	2454
	.byte	4,4,35,140,192,2,13
	.byte	'FPU_TRAP_SRC1',0
	.word	23995
	.byte	4,4,35,144,192,2,13
	.byte	'FPU_TRAP_SRC2',0
	.word	24066
	.byte	4,4,35,148,192,2,13
	.byte	'FPU_TRAP_SRC3',0
	.word	24137
	.byte	4,4,35,152,192,2,13
	.byte	'reserved_A01C',0
	.word	26944
	.byte	228,63,4,35,156,192,2,13
	.byte	'DPR',0
	.word	26965
	.byte	128,1,4,35,128,128,3,13
	.byte	'reserved_C080',0
	.word	26970
	.byte	128,31,4,35,128,129,3,13
	.byte	'CPR',0
	.word	26990
	.byte	64,4,35,128,160,3,13
	.byte	'reserved_D040',0
	.word	26995
	.byte	192,31,4,35,192,160,3,13
	.byte	'CPXE',0
	.word	27006
	.byte	16,4,35,128,192,3,13
	.byte	'DPRE',0
	.word	27015
	.byte	16,4,35,144,192,3,13
	.byte	'DPWE',0
	.word	27024
	.byte	16,4,35,160,192,3,13
	.byte	'reserved_E030',0
	.word	27033
	.byte	208,7,4,35,176,192,3,13
	.byte	'TPS',0
	.word	27044
	.byte	16,4,35,128,200,3,13
	.byte	'reserved_E410',0
	.word	27049
	.byte	240,23,4,35,144,200,3,13
	.byte	'TR',0
	.word	27069
	.byte	64,4,35,128,224,3,13
	.byte	'reserved_F040',0
	.word	27074
	.byte	192,23,4,35,192,224,3,13
	.byte	'CCTRL',0
	.word	22134
	.byte	4,4,35,128,248,3,13
	.byte	'CCNT',0
	.word	22072
	.byte	4,4,35,132,248,3,13
	.byte	'ICNT',0
	.word	24208
	.byte	4,4,35,136,248,3,13
	.byte	'M1CNT',0
	.word	24453
	.byte	4,4,35,140,248,3,13
	.byte	'M2CNT',0
	.word	24516
	.byte	4,4,35,144,248,3,13
	.byte	'M3CNT',0
	.word	24579
	.byte	4,4,35,148,248,3,13
	.byte	'reserved_FC18',0
	.word	27085
	.byte	232,1,4,35,152,248,3,13
	.byte	'DBGSR',0
	.word	22786
	.byte	4,4,35,128,250,3,13
	.byte	'reserved_FD04',0
	.word	2454
	.byte	4,4,35,132,250,3,13
	.byte	'EXEVT',0
	.word	23662
	.byte	4,4,35,136,250,3,13
	.byte	'CREVT',0
	.word	22538
	.byte	4,4,35,140,250,3,13
	.byte	'SWEVT',0
	.word	25943
	.byte	4,4,35,144,250,3,13
	.byte	'reserved_FD14',0
	.word	27096
	.byte	28,4,35,148,250,3,13
	.byte	'TRIG_ACC',0
	.word	26396
	.byte	4,4,35,176,250,3,13
	.byte	'reserved_FD34',0
	.word	4613
	.byte	12,4,35,180,250,3,13
	.byte	'DMS',0
	.word	23289
	.byte	4,4,35,192,250,3,13
	.byte	'DCX',0
	.word	23039
	.byte	4,4,35,196,250,3,13
	.byte	'DBGTCR',0
	.word	22849
	.byte	4,4,35,200,250,3,13
	.byte	'reserved_FD4C',0
	.word	27105
	.byte	180,1,4,35,204,250,3,13
	.byte	'PCXI',0
	.word	24891
	.byte	4,4,35,128,252,3,13
	.byte	'PSW',0
	.word	25327
	.byte	4,4,35,132,252,3,13
	.byte	'PC',0
	.word	24642
	.byte	4,4,35,136,252,3,13
	.byte	'reserved_FE0C',0
	.word	4273
	.byte	8,4,35,140,252,3,13
	.byte	'SYSCON',0
	.word	26006
	.byte	4,4,35,148,252,3,13
	.byte	'CPU_ID',0
	.word	22412
	.byte	4,4,35,152,252,3,13
	.byte	'CORE_ID',0
	.word	10459
	.byte	4,4,35,156,252,3,13
	.byte	'BIV',0
	.word	21950
	.byte	4,4,35,160,252,3,13
	.byte	'BTV',0
	.word	22011
	.byte	4,4,35,164,252,3,13
	.byte	'ISP',0
	.word	24331
	.byte	4,4,35,168,252,3,13
	.byte	'ICR',0
	.word	24270
	.byte	4,4,35,172,252,3,13
	.byte	'reserved_FE30',0
	.word	4273
	.byte	8,4,35,176,252,3,13
	.byte	'FCX',0
	.word	23725
	.byte	4,4,35,184,252,3,13
	.byte	'LCX',0
	.word	24392
	.byte	4,4,35,188,252,3,13
	.byte	'reserved_FE40',0
	.word	27116
	.byte	16,4,35,192,252,3,13
	.byte	'CUS_ID',0
	.word	22601
	.byte	4,4,35,208,252,3,13
	.byte	'reserved_FE54',0
	.word	27125
	.byte	172,1,4,35,212,252,3,13
	.byte	'D',0
	.word	27136
	.byte	64,4,35,128,254,3,13
	.byte	'reserved_FF40',0
	.word	27145
	.byte	64,4,35,192,254,3,13
	.byte	'A',0
	.word	27154
	.byte	64,4,35,128,255,3,13
	.byte	'reserved_FFC0',0
	.word	27145
	.byte	64,4,35,192,255,3,0,14
	.word	27163
	.byte	32
	.byte	'Ifx_CPU',0,11,130,11,3
	.word	28954
	.byte	32
	.byte	'IfxCpu_Id',0,8,132,1,3
	.word	9387
	.byte	32
	.byte	'IfxCpu_ResourceCpu',0,8,161,1,3
	.word	9469
	.byte	10
	.byte	'_Ifx_SRC_SRCR_Bits',0,14,45,16,4,11
	.byte	'SRPN',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	636
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	636
	.byte	3,0,2,35,1,11
	.byte	'ECC',0,1
	.word	636
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	636
	.byte	2,0,2,35,2,11
	.byte	'SRR',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SRC_SRCR_Bits',0,14,62,3
	.word	29023
	.byte	12,14,70,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29023
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SRC_SRCR',0,14,75,3
	.word	29339
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,14,86,25,4,13
	.byte	'SR',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	29399
	.byte	32
	.byte	'Ifx_SRC_AGBT',0,14,89,3
	.word	29431
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,14,92,25,12,13
	.byte	'TX',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	29339
	.byte	4,2,35,8,0,14
	.word	29457
	.byte	32
	.byte	'Ifx_SRC_ASCLIN',0,14,97,3
	.word	29516
	.byte	10
	.byte	'_Ifx_SRC_BCUSPB',0,14,100,25,4,13
	.byte	'SBSRC',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	29544
	.byte	32
	.byte	'Ifx_SRC_BCUSPB',0,14,103,3
	.word	29581
	.byte	15,64
	.word	29339
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN',0,14,106,25,64,13
	.byte	'INT',0
	.word	29609
	.byte	64,2,35,0,0,14
	.word	29618
	.byte	32
	.byte	'Ifx_SRC_CAN',0,14,109,3
	.word	29650
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,14,112,25,16,13
	.byte	'SR0',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	29339
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	29339
	.byte	4,2,35,12,0,14
	.word	29675
	.byte	32
	.byte	'Ifx_SRC_CCU6',0,14,118,3
	.word	29747
	.byte	15,8
	.word	29339
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS',0,14,121,25,8,13
	.byte	'SR',0
	.word	29773
	.byte	8,2,35,0,0,14
	.word	29782
	.byte	32
	.byte	'Ifx_SRC_CERBERUS',0,14,124,3
	.word	29818
	.byte	10
	.byte	'_Ifx_SRC_CIF',0,14,127,25,16,13
	.byte	'MI',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'MIEP',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'ISP',0
	.word	29339
	.byte	4,2,35,8,13
	.byte	'MJPEG',0
	.word	29339
	.byte	4,2,35,12,0,14
	.word	29848
	.byte	32
	.byte	'Ifx_SRC_CIF',0,14,133,1,3
	.word	29921
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,14,136,1,25,4,13
	.byte	'SBSRC',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	29947
	.byte	32
	.byte	'Ifx_SRC_CPU',0,14,139,1,3
	.word	29982
	.byte	15,192,1
	.word	29339
	.byte	16,47,0,10
	.byte	'_Ifx_SRC_DMA',0,14,142,1,25,208,1,13
	.byte	'ERR',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	4613
	.byte	12,2,35,4,13
	.byte	'CH',0
	.word	30008
	.byte	192,1,2,35,16,0,14
	.word	30018
	.byte	32
	.byte	'Ifx_SRC_DMA',0,14,147,1,3
	.word	30085
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,14,150,1,25,8,13
	.byte	'SRM',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	29339
	.byte	4,2,35,4,0,14
	.word	30111
	.byte	32
	.byte	'Ifx_SRC_DSADC',0,14,154,1,3
	.word	30159
	.byte	10
	.byte	'_Ifx_SRC_EMEM',0,14,157,1,25,4,13
	.byte	'SR',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	30187
	.byte	32
	.byte	'Ifx_SRC_EMEM',0,14,160,1,3
	.word	30220
	.byte	15,40
	.word	636
	.byte	16,39,0,10
	.byte	'_Ifx_SRC_ERAY',0,14,163,1,25,80,13
	.byte	'INT',0
	.word	29773
	.byte	8,2,35,0,13
	.byte	'TINT',0
	.word	29773
	.byte	8,2,35,8,13
	.byte	'NDAT',0
	.word	29773
	.byte	8,2,35,16,13
	.byte	'MBSC',0
	.word	29773
	.byte	8,2,35,24,13
	.byte	'OBUSY',0
	.word	29339
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	29339
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	30247
	.byte	40,2,35,40,0,14
	.word	30256
	.byte	32
	.byte	'Ifx_SRC_ERAY',0,14,172,1,3
	.word	30383
	.byte	10
	.byte	'_Ifx_SRC_ETH',0,14,175,1,25,4,13
	.byte	'SR',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	30410
	.byte	32
	.byte	'Ifx_SRC_ETH',0,14,178,1,3
	.word	30442
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,14,181,1,25,4,13
	.byte	'SR',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	30468
	.byte	32
	.byte	'Ifx_SRC_FCE',0,14,184,1,3
	.word	30500
	.byte	10
	.byte	'_Ifx_SRC_FFT',0,14,187,1,25,12,13
	.byte	'DONE',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'RFS',0
	.word	29339
	.byte	4,2,35,8,0,14
	.word	30526
	.byte	32
	.byte	'Ifx_SRC_FFT',0,14,192,1,3
	.word	30586
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,14,195,1,25,32,13
	.byte	'SR0',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	29339
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	29339
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	27116
	.byte	16,2,35,16,0,14
	.word	30612
	.byte	32
	.byte	'Ifx_SRC_GPSR',0,14,202,1,3
	.word	30706
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,14,205,1,25,48,13
	.byte	'CIRQ',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	29339
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	29339
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	29339
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	29339
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	3644
	.byte	24,2,35,24,0,14
	.word	30733
	.byte	32
	.byte	'Ifx_SRC_GPT12',0,14,214,1,3
	.word	30850
	.byte	15,12
	.word	29339
	.byte	16,2,0,15,32
	.word	29339
	.byte	16,7,0,15,32
	.word	30887
	.byte	16,0,0,15,88
	.word	636
	.byte	16,87,0,15,108
	.word	29339
	.byte	16,26,0,15,96
	.word	636
	.byte	16,95,0,15,96
	.word	30887
	.byte	16,2,0,15,160,3
	.word	636
	.byte	16,159,3,0,15,64
	.word	30887
	.byte	16,1,0,15,192,3
	.word	636
	.byte	16,191,3,0,15,16
	.word	29339
	.byte	16,3,0,15,64
	.word	30972
	.byte	16,3,0,15,192,2
	.word	636
	.byte	16,191,2,0,15,52
	.word	636
	.byte	16,51,0,10
	.byte	'_Ifx_SRC_GTM',0,14,217,1,25,204,18,13
	.byte	'AEIIRQ',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'ARUIRQ',0
	.word	30878
	.byte	12,2,35,4,13
	.byte	'reserved_10',0
	.word	2454
	.byte	4,2,35,16,13
	.byte	'BRCIRQ',0
	.word	29339
	.byte	4,2,35,20,13
	.byte	'CMPIRQ',0
	.word	29339
	.byte	4,2,35,24,13
	.byte	'SPEIRQ',0
	.word	29773
	.byte	8,2,35,28,13
	.byte	'reserved_24',0
	.word	4273
	.byte	8,2,35,36,13
	.byte	'PSM',0
	.word	30896
	.byte	32,2,35,44,13
	.byte	'reserved_4C',0
	.word	30905
	.byte	88,2,35,76,13
	.byte	'DPLL',0
	.word	30914
	.byte	108,3,35,164,1,13
	.byte	'reserved_110',0
	.word	30923
	.byte	96,3,35,144,2,13
	.byte	'ERR',0
	.word	29339
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	4613
	.byte	12,3,35,244,2,13
	.byte	'TIM',0
	.word	30932
	.byte	96,3,35,128,3,13
	.byte	'reserved_1E0',0
	.word	30941
	.byte	160,3,3,35,224,3,13
	.byte	'MCS',0
	.word	30932
	.byte	96,3,35,128,7,13
	.byte	'reserved_3E0',0
	.word	30941
	.byte	160,3,3,35,224,7,13
	.byte	'TOM',0
	.word	30952
	.byte	64,3,35,128,11,13
	.byte	'reserved_5C0',0
	.word	30961
	.byte	192,3,3,35,192,11,13
	.byte	'ATOM',0
	.word	30981
	.byte	64,3,35,128,15,13
	.byte	'reserved_7C0',0
	.word	30990
	.byte	192,2,3,35,192,15,13
	.byte	'MCSW0',0
	.word	30878
	.byte	12,3,35,128,18,13
	.byte	'reserved_90C',0
	.word	31001
	.byte	52,3,35,140,18,13
	.byte	'MCSW1',0
	.word	30878
	.byte	12,3,35,192,18,0,14
	.word	31010
	.byte	32
	.byte	'Ifx_SRC_GTM',0,14,243,1,3
	.word	31470
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,14,246,1,25,4,13
	.byte	'SR',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	31496
	.byte	32
	.byte	'Ifx_SRC_HSCT',0,14,249,1,3
	.word	31529
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,14,252,1,25,16,13
	.byte	'COK',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	29339
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	29339
	.byte	4,2,35,12,0,14
	.word	31556
	.byte	32
	.byte	'Ifx_SRC_HSSL',0,14,130,2,3
	.word	31629
	.byte	15,56
	.word	636
	.byte	16,55,0,10
	.byte	'_Ifx_SRC_I2C',0,14,133,2,25,80,13
	.byte	'BREQ',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'LBREQ',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'SREQ',0
	.word	29339
	.byte	4,2,35,8,13
	.byte	'LSREQ',0
	.word	29339
	.byte	4,2,35,12,13
	.byte	'ERR',0
	.word	29339
	.byte	4,2,35,16,13
	.byte	'P',0
	.word	29339
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	31656
	.byte	56,2,35,24,0,14
	.word	31665
	.byte	32
	.byte	'Ifx_SRC_I2C',0,14,142,2,3
	.word	31788
	.byte	10
	.byte	'_Ifx_SRC_LMU',0,14,145,2,25,4,13
	.byte	'SR',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	31814
	.byte	32
	.byte	'Ifx_SRC_LMU',0,14,148,2,3
	.word	31846
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,14,151,2,25,20,13
	.byte	'SR0',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	29339
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	29339
	.byte	4,2,35,12,13
	.byte	'SR4',0
	.word	29339
	.byte	4,2,35,16,0,14
	.word	31872
	.byte	32
	.byte	'Ifx_SRC_MSC',0,14,158,2,3
	.word	31957
	.byte	10
	.byte	'_Ifx_SRC_PMU',0,14,161,2,25,4,13
	.byte	'SR',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	31983
	.byte	32
	.byte	'Ifx_SRC_PMU',0,14,164,2,3
	.word	32015
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,14,167,2,25,32,13
	.byte	'SR',0
	.word	30887
	.byte	32,2,35,0,0,14
	.word	32041
	.byte	32
	.byte	'Ifx_SRC_PSI5',0,14,170,2,3
	.word	32074
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,14,173,2,25,32,13
	.byte	'SR',0
	.word	30887
	.byte	32,2,35,0,0,14
	.word	32101
	.byte	32
	.byte	'Ifx_SRC_PSI5S',0,14,176,2,3
	.word	32135
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,14,179,2,25,24,13
	.byte	'TX',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	29339
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	29339
	.byte	4,2,35,12,13
	.byte	'HC',0
	.word	29339
	.byte	4,2,35,16,13
	.byte	'U',0
	.word	29339
	.byte	4,2,35,20,0,14
	.word	32163
	.byte	32
	.byte	'Ifx_SRC_QSPI',0,14,187,2,3
	.word	32256
	.byte	10
	.byte	'_Ifx_SRC_SCR',0,14,190,2,25,4,13
	.byte	'SR',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	32283
	.byte	32
	.byte	'Ifx_SRC_SCR',0,14,193,2,3
	.word	32315
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,14,196,2,25,20,13
	.byte	'DTS',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'ERU',0
	.word	30972
	.byte	16,2,35,4,0,14
	.word	32341
	.byte	32
	.byte	'Ifx_SRC_SCU',0,14,200,2,3
	.word	32387
	.byte	15,24
	.word	29339
	.byte	16,5,0,10
	.byte	'_Ifx_SRC_SENT',0,14,203,2,25,24,13
	.byte	'SR',0
	.word	32413
	.byte	24,2,35,0,0,14
	.word	32422
	.byte	32
	.byte	'Ifx_SRC_SENT',0,14,206,2,3
	.word	32455
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,14,209,2,25,12,13
	.byte	'SR',0
	.word	30878
	.byte	12,2,35,0,0,14
	.word	32482
	.byte	32
	.byte	'Ifx_SRC_SMU',0,14,212,2,3
	.word	32514
	.byte	10
	.byte	'_Ifx_SRC_STM',0,14,215,2,25,8,13
	.byte	'SR0',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	29339
	.byte	4,2,35,4,0,14
	.word	32540
	.byte	32
	.byte	'Ifx_SRC_STM',0,14,219,2,3
	.word	32586
	.byte	10
	.byte	'_Ifx_SRC_VADCCG',0,14,222,2,25,16,13
	.byte	'SR0',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	29339
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	29339
	.byte	4,2,35,12,0,14
	.word	32612
	.byte	32
	.byte	'Ifx_SRC_VADCCG',0,14,228,2,3
	.word	32687
	.byte	10
	.byte	'_Ifx_SRC_VADCG',0,14,231,2,25,16,13
	.byte	'SR0',0
	.word	29339
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	29339
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	29339
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	29339
	.byte	4,2,35,12,0,14
	.word	32716
	.byte	32
	.byte	'Ifx_SRC_VADCG',0,14,237,2,3
	.word	32790
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,14,240,2,25,4,13
	.byte	'SRC',0
	.word	29339
	.byte	4,2,35,0,0,14
	.word	32818
	.byte	32
	.byte	'Ifx_SRC_XBAR',0,14,243,2,3
	.word	32852
	.byte	15,4
	.word	29399
	.byte	16,0,0,14
	.word	32879
	.byte	10
	.byte	'_Ifx_SRC_GAGBT',0,14,128,3,25,4,13
	.byte	'AGBT',0
	.word	32888
	.byte	4,2,35,0,0,14
	.word	32893
	.byte	32
	.byte	'Ifx_SRC_GAGBT',0,14,131,3,3
	.word	32929
	.byte	15,48
	.word	29457
	.byte	16,3,0,14
	.word	32957
	.byte	10
	.byte	'_Ifx_SRC_GASCLIN',0,14,134,3,25,48,13
	.byte	'ASCLIN',0
	.word	32966
	.byte	48,2,35,0,0,14
	.word	32971
	.byte	32
	.byte	'Ifx_SRC_GASCLIN',0,14,137,3,3
	.word	33011
	.byte	14
	.word	29544
	.byte	10
	.byte	'_Ifx_SRC_GBCU',0,14,140,3,25,4,13
	.byte	'SPB',0
	.word	33041
	.byte	4,2,35,0,0,14
	.word	33046
	.byte	32
	.byte	'Ifx_SRC_GBCU',0,14,143,3,3
	.word	33080
	.byte	15,64
	.word	29618
	.byte	16,0,0,14
	.word	33107
	.byte	10
	.byte	'_Ifx_SRC_GCAN',0,14,146,3,25,64,13
	.byte	'CAN',0
	.word	33116
	.byte	64,2,35,0,0,14
	.word	33121
	.byte	32
	.byte	'Ifx_SRC_GCAN',0,14,149,3,3
	.word	33155
	.byte	15,32
	.word	29675
	.byte	16,1,0,14
	.word	33182
	.byte	10
	.byte	'_Ifx_SRC_GCCU6',0,14,152,3,25,32,13
	.byte	'CCU6',0
	.word	33191
	.byte	32,2,35,0,0,14
	.word	33196
	.byte	32
	.byte	'Ifx_SRC_GCCU6',0,14,155,3,3
	.word	33232
	.byte	14
	.word	29782
	.byte	10
	.byte	'_Ifx_SRC_GCERBERUS',0,14,158,3,25,8,13
	.byte	'CERBERUS',0
	.word	33260
	.byte	8,2,35,0,0,14
	.word	33265
	.byte	32
	.byte	'Ifx_SRC_GCERBERUS',0,14,161,3,3
	.word	33309
	.byte	15,16
	.word	29848
	.byte	16,0,0,14
	.word	33341
	.byte	10
	.byte	'_Ifx_SRC_GCIF',0,14,164,3,25,16,13
	.byte	'CIF',0
	.word	33350
	.byte	16,2,35,0,0,14
	.word	33355
	.byte	32
	.byte	'Ifx_SRC_GCIF',0,14,167,3,3
	.word	33389
	.byte	15,8
	.word	29947
	.byte	16,1,0,14
	.word	33416
	.byte	10
	.byte	'_Ifx_SRC_GCPU',0,14,170,3,25,8,13
	.byte	'CPU',0
	.word	33425
	.byte	8,2,35,0,0,14
	.word	33430
	.byte	32
	.byte	'Ifx_SRC_GCPU',0,14,173,3,3
	.word	33464
	.byte	15,208,1
	.word	30018
	.byte	16,0,0,14
	.word	33491
	.byte	10
	.byte	'_Ifx_SRC_GDMA',0,14,176,3,25,208,1,13
	.byte	'DMA',0
	.word	33501
	.byte	208,1,2,35,0,0,14
	.word	33506
	.byte	32
	.byte	'Ifx_SRC_GDMA',0,14,179,3,3
	.word	33542
	.byte	14
	.word	30111
	.byte	14
	.word	30111
	.byte	14
	.word	30111
	.byte	10
	.byte	'_Ifx_SRC_GDSADC',0,14,182,3,25,32,13
	.byte	'DSADC0',0
	.word	33569
	.byte	8,2,35,0,13
	.byte	'reserved_8',0
	.word	4273
	.byte	8,2,35,8,13
	.byte	'DSADC2',0
	.word	33574
	.byte	8,2,35,16,13
	.byte	'DSADC3',0
	.word	33579
	.byte	8,2,35,24,0,14
	.word	33584
	.byte	32
	.byte	'Ifx_SRC_GDSADC',0,14,188,3,3
	.word	33675
	.byte	15,4
	.word	30187
	.byte	16,0,0,14
	.word	33704
	.byte	10
	.byte	'_Ifx_SRC_GEMEM',0,14,191,3,25,4,13
	.byte	'EMEM',0
	.word	33713
	.byte	4,2,35,0,0,14
	.word	33718
	.byte	32
	.byte	'Ifx_SRC_GEMEM',0,14,194,3,3
	.word	33754
	.byte	15,80
	.word	30256
	.byte	16,0,0,14
	.word	33782
	.byte	10
	.byte	'_Ifx_SRC_GERAY',0,14,197,3,25,80,13
	.byte	'ERAY',0
	.word	33791
	.byte	80,2,35,0,0,14
	.word	33796
	.byte	32
	.byte	'Ifx_SRC_GERAY',0,14,200,3,3
	.word	33832
	.byte	15,4
	.word	30410
	.byte	16,0,0,14
	.word	33860
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,14,203,3,25,4,13
	.byte	'ETH',0
	.word	33869
	.byte	4,2,35,0,0,14
	.word	33874
	.byte	32
	.byte	'Ifx_SRC_GETH',0,14,206,3,3
	.word	33908
	.byte	15,4
	.word	30468
	.byte	16,0,0,14
	.word	33935
	.byte	10
	.byte	'_Ifx_SRC_GFCE',0,14,209,3,25,4,13
	.byte	'FCE',0
	.word	33944
	.byte	4,2,35,0,0,14
	.word	33949
	.byte	32
	.byte	'Ifx_SRC_GFCE',0,14,212,3,3
	.word	33983
	.byte	15,12
	.word	30526
	.byte	16,0,0,14
	.word	34010
	.byte	10
	.byte	'_Ifx_SRC_GFFT',0,14,215,3,25,12,13
	.byte	'FFT',0
	.word	34019
	.byte	12,2,35,0,0,14
	.word	34024
	.byte	32
	.byte	'Ifx_SRC_GFFT',0,14,218,3,3
	.word	34058
	.byte	15,64
	.word	30612
	.byte	16,1,0,14
	.word	34085
	.byte	10
	.byte	'_Ifx_SRC_GGPSR',0,14,221,3,25,64,13
	.byte	'GPSR',0
	.word	34094
	.byte	64,2,35,0,0,14
	.word	34099
	.byte	32
	.byte	'Ifx_SRC_GGPSR',0,14,224,3,3
	.word	34135
	.byte	15,48
	.word	30733
	.byte	16,0,0,14
	.word	34163
	.byte	10
	.byte	'_Ifx_SRC_GGPT12',0,14,227,3,25,48,13
	.byte	'GPT12',0
	.word	34172
	.byte	48,2,35,0,0,14
	.word	34177
	.byte	32
	.byte	'Ifx_SRC_GGPT12',0,14,230,3,3
	.word	34215
	.byte	15,204,18
	.word	31010
	.byte	16,0,0,14
	.word	34244
	.byte	10
	.byte	'_Ifx_SRC_GGTM',0,14,233,3,25,204,18,13
	.byte	'GTM',0
	.word	34254
	.byte	204,18,2,35,0,0,14
	.word	34259
	.byte	32
	.byte	'Ifx_SRC_GGTM',0,14,236,3,3
	.word	34295
	.byte	15,4
	.word	31496
	.byte	16,0,0,14
	.word	34322
	.byte	10
	.byte	'_Ifx_SRC_GHSCT',0,14,239,3,25,4,13
	.byte	'HSCT',0
	.word	34331
	.byte	4,2,35,0,0,14
	.word	34336
	.byte	32
	.byte	'Ifx_SRC_GHSCT',0,14,242,3,3
	.word	34372
	.byte	15,64
	.word	31556
	.byte	16,3,0,14
	.word	34400
	.byte	10
	.byte	'_Ifx_SRC_GHSSL',0,14,245,3,25,68,13
	.byte	'HSSL',0
	.word	34409
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	29339
	.byte	4,2,35,64,0,14
	.word	34414
	.byte	32
	.byte	'Ifx_SRC_GHSSL',0,14,249,3,3
	.word	34463
	.byte	15,80
	.word	31665
	.byte	16,0,0,14
	.word	34491
	.byte	10
	.byte	'_Ifx_SRC_GI2C',0,14,252,3,25,80,13
	.byte	'I2C',0
	.word	34500
	.byte	80,2,35,0,0,14
	.word	34505
	.byte	32
	.byte	'Ifx_SRC_GI2C',0,14,255,3,3
	.word	34539
	.byte	15,4
	.word	31814
	.byte	16,0,0,14
	.word	34566
	.byte	10
	.byte	'_Ifx_SRC_GLMU',0,14,130,4,25,4,13
	.byte	'LMU',0
	.word	34575
	.byte	4,2,35,0,0,14
	.word	34580
	.byte	32
	.byte	'Ifx_SRC_GLMU',0,14,133,4,3
	.word	34614
	.byte	15,40
	.word	31872
	.byte	16,1,0,14
	.word	34641
	.byte	10
	.byte	'_Ifx_SRC_GMSC',0,14,136,4,25,40,13
	.byte	'MSC',0
	.word	34650
	.byte	40,2,35,0,0,14
	.word	34655
	.byte	32
	.byte	'Ifx_SRC_GMSC',0,14,139,4,3
	.word	34689
	.byte	15,8
	.word	31983
	.byte	16,1,0,14
	.word	34716
	.byte	10
	.byte	'_Ifx_SRC_GPMU',0,14,142,4,25,8,13
	.byte	'PMU',0
	.word	34725
	.byte	8,2,35,0,0,14
	.word	34730
	.byte	32
	.byte	'Ifx_SRC_GPMU',0,14,145,4,3
	.word	34764
	.byte	15,32
	.word	32041
	.byte	16,0,0,14
	.word	34791
	.byte	10
	.byte	'_Ifx_SRC_GPSI5',0,14,148,4,25,32,13
	.byte	'PSI5',0
	.word	34800
	.byte	32,2,35,0,0,14
	.word	34805
	.byte	32
	.byte	'Ifx_SRC_GPSI5',0,14,151,4,3
	.word	34841
	.byte	15,32
	.word	32101
	.byte	16,0,0,14
	.word	34869
	.byte	10
	.byte	'_Ifx_SRC_GPSI5S',0,14,154,4,25,32,13
	.byte	'PSI5S',0
	.word	34878
	.byte	32,2,35,0,0,14
	.word	34883
	.byte	32
	.byte	'Ifx_SRC_GPSI5S',0,14,157,4,3
	.word	34921
	.byte	15,96
	.word	32163
	.byte	16,3,0,14
	.word	34950
	.byte	10
	.byte	'_Ifx_SRC_GQSPI',0,14,160,4,25,96,13
	.byte	'QSPI',0
	.word	34959
	.byte	96,2,35,0,0,14
	.word	34964
	.byte	32
	.byte	'Ifx_SRC_GQSPI',0,14,163,4,3
	.word	35000
	.byte	15,4
	.word	32283
	.byte	16,0,0,14
	.word	35028
	.byte	10
	.byte	'_Ifx_SRC_GSCR',0,14,166,4,25,4,13
	.byte	'SCR',0
	.word	35037
	.byte	4,2,35,0,0,14
	.word	35042
	.byte	32
	.byte	'Ifx_SRC_GSCR',0,14,169,4,3
	.word	35076
	.byte	14
	.word	32341
	.byte	10
	.byte	'_Ifx_SRC_GSCU',0,14,172,4,25,20,13
	.byte	'SCU',0
	.word	35103
	.byte	20,2,35,0,0,14
	.word	35108
	.byte	32
	.byte	'Ifx_SRC_GSCU',0,14,175,4,3
	.word	35142
	.byte	15,24
	.word	32422
	.byte	16,0,0,14
	.word	35169
	.byte	10
	.byte	'_Ifx_SRC_GSENT',0,14,178,4,25,24,13
	.byte	'SENT',0
	.word	35178
	.byte	24,2,35,0,0,14
	.word	35183
	.byte	32
	.byte	'Ifx_SRC_GSENT',0,14,181,4,3
	.word	35219
	.byte	15,12
	.word	32482
	.byte	16,0,0,14
	.word	35247
	.byte	10
	.byte	'_Ifx_SRC_GSMU',0,14,184,4,25,12,13
	.byte	'SMU',0
	.word	35256
	.byte	12,2,35,0,0,14
	.word	35261
	.byte	32
	.byte	'Ifx_SRC_GSMU',0,14,187,4,3
	.word	35295
	.byte	15,16
	.word	32540
	.byte	16,1,0,14
	.word	35322
	.byte	10
	.byte	'_Ifx_SRC_GSTM',0,14,190,4,25,16,13
	.byte	'STM',0
	.word	35331
	.byte	16,2,35,0,0,14
	.word	35336
	.byte	32
	.byte	'Ifx_SRC_GSTM',0,14,193,4,3
	.word	35370
	.byte	15,64
	.word	32716
	.byte	16,3,0,14
	.word	35397
	.byte	15,224,1
	.word	636
	.byte	16,223,1,0,15,32
	.word	32612
	.byte	16,1,0,14
	.word	35422
	.byte	10
	.byte	'_Ifx_SRC_GVADC',0,14,196,4,25,192,2,13
	.byte	'G',0
	.word	35406
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	35411
	.byte	224,1,2,35,64,13
	.byte	'CG',0
	.word	35431
	.byte	32,3,35,160,2,0,14
	.word	35436
	.byte	32
	.byte	'Ifx_SRC_GVADC',0,14,201,4,3
	.word	35505
	.byte	14
	.word	32818
	.byte	10
	.byte	'_Ifx_SRC_GXBAR',0,14,204,4,25,4,13
	.byte	'XBAR',0
	.word	35533
	.byte	4,2,35,0,0,14
	.word	35538
	.byte	32
	.byte	'Ifx_SRC_GXBAR',0,14,207,4,3
	.word	35574
	.byte	10
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,11
	.byte	'EN0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	35602
	.byte	10
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	36159
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,11
	.byte	'STM0DIS',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	36236
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,11
	.byte	'BAUD1DIV',0,1
	.word	636
	.byte	4,4,2,35,0,11
	.byte	'BAUD2DIV',0,1
	.word	636
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	636
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	636
	.byte	4,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	636
	.byte	4,4,2,35,2,11
	.byte	'FSI2DIV',0,1
	.word	636
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	636
	.byte	2,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	636
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	636
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	636
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	36372
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,11
	.byte	'CANDIV',0,1
	.word	636
	.byte	4,4,2,35,0,11
	.byte	'ERAYDIV',0,1
	.word	636
	.byte	4,0,2,35,0,11
	.byte	'STMDIV',0,1
	.word	636
	.byte	4,4,2,35,1,11
	.byte	'GTMDIV',0,1
	.word	636
	.byte	4,0,2,35,1,11
	.byte	'ETHDIV',0,1
	.word	636
	.byte	4,4,2,35,2,11
	.byte	'ASCLINFDIV',0,1
	.word	636
	.byte	4,0,2,35,2,11
	.byte	'ASCLINSDIV',0,1
	.word	636
	.byte	4,4,2,35,3,11
	.byte	'INSEL',0,1
	.word	636
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	36652
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,11
	.byte	'BBBDIV',0,1
	.word	636
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	36890
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,11
	.byte	'PLLDIV',0,1
	.word	636
	.byte	6,2,2,35,0,11
	.byte	'PLLSEL',0,1
	.word	636
	.byte	2,0,2,35,0,11
	.byte	'PLLERAYDIV',0,1
	.word	636
	.byte	6,2,2,35,1,11
	.byte	'PLLERAYSEL',0,1
	.word	636
	.byte	2,0,2,35,1,11
	.byte	'SRIDIV',0,1
	.word	636
	.byte	6,2,2,35,2,11
	.byte	'SRISEL',0,1
	.word	636
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,150,1,3
	.word	37018
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,153,1,16,4,11
	.byte	'SPBDIV',0,1
	.word	636
	.byte	6,2,2,35,0,11
	.byte	'SPBSEL',0,1
	.word	636
	.byte	2,0,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	636
	.byte	6,2,2,35,1,11
	.byte	'GTMSEL',0,1
	.word	636
	.byte	2,0,2,35,1,11
	.byte	'STMDIV',0,1
	.word	636
	.byte	6,2,2,35,2,11
	.byte	'STMSEL',0,1
	.word	636
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,165,1,3
	.word	37261
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,168,1,16,4,11
	.byte	'MAXDIV',0,1
	.word	636
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,174,1,3
	.word	37496
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,177,1,16,4,11
	.byte	'CPU0DIV',0,1
	.word	636
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,181,1,3
	.word	37624
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,184,1,16,4,11
	.byte	'CPU1DIV',0,1
	.word	636
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,188,1,3
	.word	37724
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,191,1,16,4,11
	.byte	'CHREV',0,1
	.word	636
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	636
	.byte	2,0,2,35,0,11
	.byte	'CHID',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'EEA',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	636
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	636
	.byte	4,4,2,35,3,11
	.byte	'SP',0,1
	.word	636
	.byte	2,2,2,35,3,11
	.byte	'SEC',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,202,1,3
	.word	37824
	.byte	10
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,205,1,16,4,11
	.byte	'PWD',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'START',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	2,4,2,35,0,11
	.byte	'CAL',0,4
	.word	461
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,213,1,3
	.word	38032
	.byte	10
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,216,1,16,4,11
	.byte	'LOWER',0,2
	.word	653
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	636
	.byte	5,1,2,35,1,11
	.byte	'LLU',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	653
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	636
	.byte	4,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,225,1,3
	.word	38197
	.byte	10
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,228,1,16,4,11
	.byte	'RESULT',0,2
	.word	653
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	636
	.byte	4,2,2,35,1,11
	.byte	'RDY',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'BUSY',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,235,1,3
	.word	38380
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,238,1,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	636
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	636
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	636
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	636
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EICR_Bits',0,4,129,2,3
	.word	38534
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,132,2,16,4,11
	.byte	'INTF0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR_Bits',0,4,143,2,3
	.word	38898
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,146,2,16,4,11
	.byte	'POL',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	653
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	636
	.byte	6,0,2,35,2,11
	.byte	'EMSFM',0,1
	.word	636
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	636
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	636
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_EMSR_Bits',0,4,159,2,3
	.word	39109
	.byte	10
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,162,2,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	653
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,167,2,3
	.word	39361
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,170,2,16,4,11
	.byte	'ARI',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,175,2,3
	.word	39479
	.byte	10
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,178,2,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	28,4,2,35,0,11
	.byte	'EVR13OFF',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'BPEVR13OFF',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,185,2,3
	.word	39590
	.byte	10
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,4,188,2,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	28,4,2,35,0,11
	.byte	'EVR33OFF',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'BPEVR33OFF',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVR33CON_Bits',0,4,195,2,3
	.word	39753
	.byte	10
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,198,2,16,4,11
	.byte	'ADC13V',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,205,2,3
	.word	39916
	.byte	10
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,4,208,2,16,4,11
	.byte	'DVS13TRIM',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'DVS33TRIM',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,4,215,2,3
	.word	40074
	.byte	10
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,218,2,16,4,11
	.byte	'EVR13OVMOD',0,1
	.word	636
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	2,4,2,35,0,11
	.byte	'EVR13UVMOD',0,1
	.word	636
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	636
	.byte	2,0,2,35,0,11
	.byte	'EVR33OVMOD',0,1
	.word	636
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	636
	.byte	2,4,2,35,1,11
	.byte	'EVR33UVMOD',0,1
	.word	636
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	636
	.byte	2,0,2,35,1,11
	.byte	'SWDOVMOD',0,1
	.word	636
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	636
	.byte	2,4,2,35,2,11
	.byte	'SWDUVMOD',0,1
	.word	636
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	653
	.byte	10,0,2,35,2,0,32
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,232,2,3
	.word	40239
	.byte	10
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,4,235,2,16,4,11
	.byte	'OSCTRIM',0,2
	.word	653
	.byte	10,6,2,35,0,11
	.byte	'OSCPTAT',0,1
	.word	636
	.byte	6,0,2,35,1,11
	.byte	'OSCANASEL',0,1
	.word	636
	.byte	4,4,2,35,2,11
	.byte	'HPBGTRIM',0,2
	.word	653
	.byte	7,5,2,35,2,11
	.byte	'HPBGCLKEN',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'OSC3V3',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	636
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,4,245,2,3
	.word	40568
	.byte	10
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,248,2,16,4,11
	.byte	'EVR13OVVAL',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,255,2,3
	.word	40789
	.byte	10
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,130,3,16,4,11
	.byte	'RST13TRIM',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	16,8,2,35,0,11
	.byte	'RST13OFF',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'BPRST13OFF',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'BPRST33OFF',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'BPRSTSWDOFF',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,142,3,3
	.word	40952
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,4,145,3,16,4,11
	.byte	'SD5P',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'SD5I',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'SD5D',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,4,152,3,3
	.word	41224
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,155,3,16,4,11
	.byte	'SD33P',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'SD33I',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'SD33D',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,162,3,3
	.word	41377
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,4,165,3,16,4,11
	.byte	'CT5REG0',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'CT5REG1',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'CT5REG2',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,4,172,3,3
	.word	41533
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,4,175,3,16,4,11
	.byte	'CT5REG3',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'CT5REG4',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,4,181,3,3
	.word	41695
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,4,184,3,16,4,11
	.byte	'CT33REG0',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'CT33REG1',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'CT33REG2',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,4,191,3,3
	.word	41838
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,4,194,3,16,4,11
	.byte	'CT33REG3',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'CT33REG4',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,4,200,3,3
	.word	42003
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,203,3,16,4,11
	.byte	'SDFREQSPRD',0,2
	.word	653
	.byte	16,0,2,35,0,11
	.byte	'SDFREQ',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'SDSTEP',0,1
	.word	636
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	636
	.byte	2,2,2,35,3,11
	.byte	'SDSAMPLE',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,211,3,3
	.word	42148
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,214,3,16,4,11
	.byte	'DRVP',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'SDMINMAXDC',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'DRVN',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'SDLUT',0,1
	.word	636
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,222,3,3
	.word	42329
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,225,3,16,4,11
	.byte	'SDPWMPRE',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'SDPID',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'SDVOKLVL',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,232,3,3
	.word	42503
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,4,235,3,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'SYNCDIV',0,1
	.word	636
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	20,1,2,35,0,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,4,241,3,3
	.word	42663
	.byte	10
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,244,3,16,4,11
	.byte	'EVR13',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'OV13',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'EVR33',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'OV33',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'OVSWD',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'UV13',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'UV33',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'UVSWD',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'EXTPASS13',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'EXTPASS33',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'BGPROK',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,130,4,3
	.word	42807
	.byte	10
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,4,133,4,16,4,11
	.byte	'EVR13TRIM',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,4,139,4,3
	.word	43081
	.byte	10
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,142,4,16,4,11
	.byte	'EVR13UVVAL',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,149,4,3
	.word	43220
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,152,4,16,4,11
	.byte	'EN0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	636
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	653
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	636
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	636
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	636
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,163,4,3
	.word	43383
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,166,4,16,4,11
	.byte	'STEP',0,2
	.word	653
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	636
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	636
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	653
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	636
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_FDR_Bits',0,4,174,4,3
	.word	43601
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,177,4,16,4,11
	.byte	'FS0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_SCU_FMR_Bits',0,4,197,4,3
	.word	43764
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,200,4,16,4,11
	.byte	'MODREV',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_ID_Bits',0,4,205,4,3
	.word	44100
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,208,4,16,4,11
	.byte	'IPEN00',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	636
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	636
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_SCU_IGCR_Bits',0,4,232,4,3
	.word	44207
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,235,4,16,4,11
	.byte	'P0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_IN_Bits',0,4,240,4,3
	.word	44659
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,243,4,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	636
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	636
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_IOCR_Bits',0,4,250,4,3
	.word	44758
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,253,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'LBISTREQP',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,2
	.word	653
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,131,5,3
	.word	44908
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,134,5,16,4,11
	.byte	'SEED',0,4
	.word	461
	.byte	23,9,2,35,0,11
	.byte	'reserved_23',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	636
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	636
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,141,5,3
	.word	45057
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,144,5,16,4,11
	.byte	'SIGNATURE',0,4
	.word	461
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	7,1,2,35,3,11
	.byte	'LBISTDONE',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,149,5,3
	.word	45218
	.byte	10
	.byte	'_Ifx_SCU_LCLCON_Bits',0,4,152,5,16,4,11
	.byte	'reserved_0',0,2
	.word	653
	.byte	16,0,2,35,0,11
	.byte	'LS',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	653
	.byte	14,1,2,35,2,11
	.byte	'LSEN',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_LCLCON_Bits',0,4,158,5,3
	.word	45348
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,161,5,16,4,11
	.byte	'LCLT0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,166,5,3
	.word	45480
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,169,5,16,4,11
	.byte	'DEPT',0,1
	.word	636
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	653
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_MANID_Bits',0,4,174,5,3
	.word	45595
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,177,5,16,4,11
	.byte	'PS0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	653
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	653
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_OMR_Bits',0,4,185,5,3
	.word	45706
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,188,5,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	636
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	636
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'X1D',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'X1DEN',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	636
	.byte	4,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	636
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	636
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	636
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,209,5,3
	.word	45864
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,212,5,16,4,11
	.byte	'P0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_OUT_Bits',0,4,217,5,3
	.word	46276
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,220,5,16,4,11
	.byte	'CSEL0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	653
	.byte	13,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	636
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	636
	.byte	6,0,2,35,3,0,32
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,233,5,3
	.word	46377
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,236,5,16,4,11
	.byte	'OVEN0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,242,5,3
	.word	46644
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,245,5,16,4,11
	.byte	'PDIS0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC_Bits',0,4,250,5,3
	.word	46780
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,253,5,16,4,11
	.byte	'PD0',0,1
	.word	636
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	636
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDR_Bits',0,4,132,6,3
	.word	46891
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,135,6,16,4,11
	.byte	'PDR0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR_Bits',0,4,146,6,3
	.word	47024
	.byte	10
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,149,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	653
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	636
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	636
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	636
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	636
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,166,6,3
	.word	47227
	.byte	10
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,169,6,16,4,11
	.byte	'K2DIV',0,1
	.word	636
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	636
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	636
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	653
	.byte	9,0,2,35,2,0,32
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,177,6,3
	.word	47583
	.byte	10
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,180,6,16,4,11
	.byte	'MODCFG',0,2
	.word	653
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,184,6,3
	.word	47761
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,187,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	2,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	653
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	636
	.byte	5,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	636
	.byte	2,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	636
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	636
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	636
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,204,6,3
	.word	47861
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,207,6,16,4,11
	.byte	'K2DIV',0,1
	.word	636
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	636
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	636
	.byte	4,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	636
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	653
	.byte	9,0,2,35,2,0,32
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,215,6,3
	.word	48231
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,218,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,227,6,3
	.word	48417
	.byte	10
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,230,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,241,6,3
	.word	48615
	.byte	10
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,244,6,16,4,11
	.byte	'REQSLP',0,1
	.word	636
	.byte	2,6,2,35,0,11
	.byte	'SMUSLP',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	636
	.byte	5,0,2,35,0,11
	.byte	'PMST',0,1
	.word	636
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	21,0,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,251,6,3
	.word	48848
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,254,6,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKEN',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'PINAWKEN',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'PINBWKEN',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'ESR0DFEN',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'ESR0EDCON',0,1
	.word	636
	.byte	2,1,2,35,0,11
	.byte	'ESR1DFEN',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'ESR1EDCON',0,1
	.word	636
	.byte	2,6,2,35,1,11
	.byte	'PINADFEN',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'PINAEDCON',0,1
	.word	636
	.byte	2,3,2,35,1,11
	.byte	'PINBDFEN',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'PINBEDCON',0,1
	.word	636
	.byte	2,0,2,35,1,11
	.byte	'SCREN',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'STBYRAMSEL',0,1
	.word	636
	.byte	2,5,2,35,2,11
	.byte	'SCRCLKSEL',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'TRISTEN',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'TRISTREQ',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'PORSTDF',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'DCDCSYNC',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	636
	.byte	3,3,2,35,3,11
	.byte	'ESR0TRIST',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,153,7,3
	.word	49000
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,156,7,16,4,11
	.byte	'SCRSTEN',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'SCRSTREQ',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	6,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	636
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	636
	.byte	3,0,2,35,1,11
	.byte	'SCRCFG',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'CPUSEL',0,1
	.word	636
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	636
	.byte	3,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,170,7,3
	.word	49567
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR2_Bits',0,4,173,7,16,4,11
	.byte	'SCRINT',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'BUSY',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'SCRECC',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'SCRWDT',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'SCRRST',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	636
	.byte	4,0,2,35,1,11
	.byte	'TCINT',0,1
	.word	636
	.byte	8,0,2,35,2,11
	.byte	'TCINTREQ',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'SMURST',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'RST',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	636
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWCR2_Bits',0,4,187,7,3
	.word	49861
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,190,7,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKP',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUN',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'PINAWKP',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUN',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'PINBWKP',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUN',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'PORSTDF',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'HWCFGEVR',0,1
	.word	636
	.byte	3,3,2,35,1,11
	.byte	'STBYRAM',0,1
	.word	636
	.byte	2,1,2,35,1,11
	.byte	'TRIST',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'SCRST',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'SCRWKP',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'SCR',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'ESR1WKEN',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'PINAWKEN',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'PINBWKEN',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	653
	.byte	4,5,2,35,2,11
	.byte	'ESR0TRIST',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	636
	.byte	4,0,2,35,3,0,32
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,214,7,3
	.word	50139
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,217,7,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKPCLR',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUNCLR',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'PINAWKPCLR',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUNCLR',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'PINBWKPCLR',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUNCLR',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'SCRSTCLR',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'SCRWKPCLR',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	653
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,230,7,3
	.word	50635
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,233,7,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	653
	.byte	10,4,2,35,0,11
	.byte	'CSS0',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'CSS1',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'CSS2',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,243,7,3
	.word	50948
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,246,7,16,4,11
	.byte	'ESR0',0,1
	.word	636
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	636
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	636
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	636
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	636
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	636
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	636
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	636
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,129,8,3
	.word	51157
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,132,8,16,4,11
	.byte	'ESR0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'PORST',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	636
	.byte	2,1,2,35,2,11
	.byte	'EVR13',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	636
	.byte	2,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	636
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,155,8,3
	.word	51368
	.byte	10
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,158,8,16,4,11
	.byte	'HBT',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,162,8,3
	.word	51800
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,165,8,16,4,11
	.byte	'HWCFG',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	636
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	636
	.byte	3,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	636
	.byte	7,0,2,35,3,0,32
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,178,8,3
	.word	51896
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,186,8,3
	.word	52156
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,189,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	636
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	636
	.byte	3,0,2,35,0,11
	.byte	'DATM',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	23,0,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,198,8,3
	.word	52281
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,201,8,16,4,11
	.byte	'ESR0T',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,208,8,3
	.word	52478
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,211,8,16,4,11
	.byte	'ESR0T',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,218,8,3
	.word	52631
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,221,8,16,4,11
	.byte	'ESR0T',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,228,8,3
	.word	52784
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,231,8,16,4,11
	.byte	'ESR0T',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,238,8,3
	.word	52937
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,247,8,3
	.word	500
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,134,9,3
	.word	675
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,150,9,3
	.word	919
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,153,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	484
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	484
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	484
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	484
	.byte	16,0,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,159,9,3
	.word	53192
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,162,9,16,4,11
	.byte	'CLRIRF',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	636
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,175,9,3
	.word	53318
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,178,9,16,4,11
	.byte	'AE',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	636
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,191,9,3
	.word	53570
	.byte	12,4,199,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35602
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN0',0,4,204,9,3
	.word	53789
	.byte	12,4,207,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36159
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ACCEN1',0,4,212,9,3
	.word	53853
	.byte	12,4,215,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36236
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ARSTDIS',0,4,220,9,3
	.word	53917
	.byte	12,4,223,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36372
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON0',0,4,228,9,3
	.word	53982
	.byte	12,4,231,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36652
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON1',0,4,236,9,3
	.word	54047
	.byte	12,4,239,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36890
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON2',0,4,244,9,3
	.word	54112
	.byte	12,4,247,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37018
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON3',0,4,252,9,3
	.word	54177
	.byte	12,4,255,9,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37261
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON4',0,4,132,10,3
	.word	54242
	.byte	12,4,135,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37496
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON5',0,4,140,10,3
	.word	54307
	.byte	12,4,143,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37624
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON6',0,4,148,10,3
	.word	54372
	.byte	12,4,151,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37724
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CCUCON7',0,4,156,10,3
	.word	54437
	.byte	12,4,159,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37824
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_CHIPID',0,4,164,10,3
	.word	54502
	.byte	12,4,167,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38032
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSCON',0,4,172,10,3
	.word	54566
	.byte	12,4,175,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38197
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSLIM',0,4,180,10,3
	.word	54630
	.byte	12,4,183,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38380
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_DTSSTAT',0,4,188,10,3
	.word	54694
	.byte	12,4,191,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38534
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EICR',0,4,196,10,3
	.word	54759
	.byte	12,4,199,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38898
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EIFR',0,4,204,10,3
	.word	54821
	.byte	12,4,207,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39109
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EMSR',0,4,212,10,3
	.word	54883
	.byte	12,4,215,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39361
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESRCFG',0,4,220,10,3
	.word	54945
	.byte	12,4,223,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39479
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ESROCFG',0,4,228,10,3
	.word	55009
	.byte	12,4,231,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39590
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVR13CON',0,4,236,10,3
	.word	55074
	.byte	12,4,239,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39753
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVR33CON',0,4,244,10,3
	.word	55140
	.byte	12,4,247,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39916
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,252,10,3
	.word	55206
	.byte	12,4,255,10,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40074
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRDVSTAT',0,4,132,11,3
	.word	55274
	.byte	12,4,135,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40239
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,140,11,3
	.word	55341
	.byte	12,4,143,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40568
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVROSCCTRL',0,4,148,11,3
	.word	55409
	.byte	12,4,151,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40789
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVROVMON',0,4,156,11,3
	.word	55477
	.byte	12,4,159,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40952
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRRSTCON',0,4,164,11,3
	.word	55543
	.byte	12,4,167,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41224
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,4,172,11,3
	.word	55610
	.byte	12,4,175,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41377
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,180,11,3
	.word	55679
	.byte	12,4,183,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41533
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,4,188,11,3
	.word	55748
	.byte	12,4,191,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41695
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,4,196,11,3
	.word	55817
	.byte	12,4,199,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41838
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,4,204,11,3
	.word	55886
	.byte	12,4,207,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42003
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,4,212,11,3
	.word	55955
	.byte	12,4,215,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42148
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,220,11,3
	.word	56024
	.byte	12,4,223,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42329
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,228,11,3
	.word	56092
	.byte	12,4,231,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42503
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,236,11,3
	.word	56160
	.byte	12,4,239,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42663
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSDCTRL4',0,4,244,11,3
	.word	56228
	.byte	12,4,247,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42807
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRSTAT',0,4,252,11,3
	.word	56296
	.byte	12,4,255,11,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43081
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRTRIM',0,4,132,12,3
	.word	56361
	.byte	12,4,135,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43220
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EVRUVMON',0,4,140,12,3
	.word	56426
	.byte	12,4,143,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43383
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_EXTCON',0,4,148,12,3
	.word	56492
	.byte	12,4,151,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43601
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FDR',0,4,156,12,3
	.word	56556
	.byte	12,4,159,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43764
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_FMR',0,4,164,12,3
	.word	56617
	.byte	12,4,167,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44100
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_ID',0,4,172,12,3
	.word	56678
	.byte	12,4,175,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44207
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IGCR',0,4,180,12,3
	.word	56738
	.byte	12,4,183,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44659
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IN',0,4,188,12,3
	.word	56800
	.byte	12,4,191,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44758
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_IOCR',0,4,196,12,3
	.word	56860
	.byte	12,4,199,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44908
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,204,12,3
	.word	56922
	.byte	12,4,207,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45057
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,212,12,3
	.word	56990
	.byte	12,4,215,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45218
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,220,12,3
	.word	57058
	.byte	12,4,223,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45348
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLCON',0,4,228,12,3
	.word	57126
	.byte	12,4,231,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45480
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_LCLTEST',0,4,236,12,3
	.word	57190
	.byte	12,4,239,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45595
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_MANID',0,4,244,12,3
	.word	57255
	.byte	12,4,247,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45706
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OMR',0,4,252,12,3
	.word	57318
	.byte	12,4,255,12,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45864
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OSCCON',0,4,132,13,3
	.word	57379
	.byte	12,4,135,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46276
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OUT',0,4,140,13,3
	.word	57443
	.byte	12,4,143,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46377
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCCON',0,4,148,13,3
	.word	57504
	.byte	12,4,151,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46644
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_OVCENABLE',0,4,156,13,3
	.word	57568
	.byte	12,4,159,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46780
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDISC',0,4,164,13,3
	.word	57635
	.byte	12,4,167,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46891
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDR',0,4,172,13,3
	.word	57698
	.byte	12,4,175,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47024
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PDRR',0,4,180,13,3
	.word	57759
	.byte	12,4,183,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47227
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLCON0',0,4,188,13,3
	.word	57821
	.byte	12,4,191,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47583
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLCON1',0,4,196,13,3
	.word	57886
	.byte	12,4,199,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47761
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLCON2',0,4,204,13,3
	.word	57951
	.byte	12,4,207,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47861
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,212,13,3
	.word	58016
	.byte	12,4,215,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48231
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,220,13,3
	.word	58085
	.byte	12,4,223,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48417
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,228,13,3
	.word	58154
	.byte	12,4,231,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48615
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PLLSTAT',0,4,236,13,3
	.word	58223
	.byte	12,4,239,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48848
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMCSR',0,4,244,13,3
	.word	58288
	.byte	12,4,247,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49000
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR0',0,4,252,13,3
	.word	58351
	.byte	12,4,255,13,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49567
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR1',0,4,132,14,3
	.word	58416
	.byte	12,4,135,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49861
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWCR2',0,4,140,14,3
	.word	58481
	.byte	12,4,143,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50139
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWSTAT',0,4,148,14,3
	.word	58546
	.byte	12,4,151,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50635
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,156,14,3
	.word	58612
	.byte	12,4,159,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51157
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON',0,4,164,14,3
	.word	58681
	.byte	12,4,167,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50948
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTCON2',0,4,172,14,3
	.word	58745
	.byte	12,4,175,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51368
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_RSTSTAT',0,4,180,14,3
	.word	58810
	.byte	12,4,183,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51800
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SAFECON',0,4,188,14,3
	.word	58875
	.byte	12,4,191,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51896
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_STSTAT',0,4,196,14,3
	.word	58940
	.byte	12,4,199,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52156
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SWRSTCON',0,4,204,14,3
	.word	59004
	.byte	12,4,207,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52281
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_SYSCON',0,4,212,14,3
	.word	59070
	.byte	12,4,215,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52478
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPCLR',0,4,220,14,3
	.word	59134
	.byte	12,4,223,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52631
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPDIS',0,4,228,14,3
	.word	59199
	.byte	12,4,231,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52784
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSET',0,4,236,14,3
	.word	59264
	.byte	12,4,239,14,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52937
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_TRAPSTAT',0,4,244,14,3
	.word	59329
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,252,14,3
	.word	596
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,132,15,3
	.word	879
	.byte	32
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,140,15,3
	.word	1110
	.byte	12,4,143,15,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53192
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON0',0,4,148,15,3
	.word	59480
	.byte	12,4,151,15,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53318
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_CON1',0,4,156,15,3
	.word	59547
	.byte	12,4,159,15,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53570
	.byte	4,2,35,0,0,32
	.byte	'Ifx_SCU_WDTS_SR',0,4,164,15,3
	.word	59614
	.byte	14
	.word	1150
	.byte	32
	.byte	'Ifx_SCU_WDTCPU',0,4,180,15,3
	.word	59679
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,183,15,25,12,13
	.byte	'CON0',0
	.word	59480
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	59547
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	59614
	.byte	4,2,35,8,0,14
	.word	59708
	.byte	32
	.byte	'Ifx_SCU_WDTS',0,4,188,15,3
	.word	59769
	.byte	15,8
	.word	54945
	.byte	16,1,0,15,20
	.word	636
	.byte	16,19,0,15,8
	.word	58288
	.byte	16,1,0,14
	.word	59708
	.byte	15,24
	.word	1150
	.byte	16,1,0,14
	.word	59828
	.byte	15,16
	.word	54759
	.byte	16,3,0,15,16
	.word	56738
	.byte	16,3,0,15,180,3
	.word	636
	.byte	16,179,3,0,10
	.byte	'_Ifx_SCU',0,4,201,15,25,128,8,13
	.byte	'reserved_0',0
	.word	4273
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	56678
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2454
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	57379
	.byte	4,2,35,16,13
	.byte	'PLLSTAT',0
	.word	58223
	.byte	4,2,35,20,13
	.byte	'PLLCON0',0
	.word	57821
	.byte	4,2,35,24,13
	.byte	'PLLCON1',0
	.word	57886
	.byte	4,2,35,28,13
	.byte	'PLLCON2',0
	.word	57951
	.byte	4,2,35,32,13
	.byte	'PLLERAYSTAT',0
	.word	58154
	.byte	4,2,35,36,13
	.byte	'PLLERAYCON0',0
	.word	58016
	.byte	4,2,35,40,13
	.byte	'PLLERAYCON1',0
	.word	58085
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	53982
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	54047
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	56556
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	56492
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	54112
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	54177
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	54242
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	54307
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	58810
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2454
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	58681
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	53917
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	59004
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	58745
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	2454
	.byte	4,2,35,104,13
	.byte	'EVRRSTCON',0
	.word	55543
	.byte	4,2,35,108,13
	.byte	'ESRCFG',0
	.word	59796
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	55009
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	59070
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	54372
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	54437
	.byte	4,3,35,132,1,13
	.byte	'reserved_88',0
	.word	59805
	.byte	20,3,35,136,1,13
	.byte	'PDR',0
	.word	57698
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	56860
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	57443
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	57318
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	56800
	.byte	4,3,35,172,1,13
	.byte	'EVRSTAT',0
	.word	56296
	.byte	4,3,35,176,1,13
	.byte	'EVRDVSTAT',0
	.word	55274
	.byte	4,3,35,180,1,13
	.byte	'EVR13CON',0
	.word	55074
	.byte	4,3,35,184,1,13
	.byte	'EVR33CON',0
	.word	55140
	.byte	4,3,35,188,1,13
	.byte	'STSTAT',0
	.word	58940
	.byte	4,3,35,192,1,13
	.byte	'reserved_C4',0
	.word	2454
	.byte	4,3,35,196,1,13
	.byte	'PMSWCR0',0
	.word	58351
	.byte	4,3,35,200,1,13
	.byte	'PMSWSTAT',0
	.word	58546
	.byte	4,3,35,204,1,13
	.byte	'PMSWSTATCLR',0
	.word	58612
	.byte	4,3,35,208,1,13
	.byte	'PMCSR',0
	.word	59814
	.byte	8,3,35,212,1,13
	.byte	'reserved_DC',0
	.word	2454
	.byte	4,3,35,220,1,13
	.byte	'DTSSTAT',0
	.word	54694
	.byte	4,3,35,224,1,13
	.byte	'DTSCON',0
	.word	54566
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	58416
	.byte	4,3,35,232,1,13
	.byte	'PMSWCR2',0
	.word	58481
	.byte	4,3,35,236,1,13
	.byte	'WDTS',0
	.word	59823
	.byte	12,3,35,240,1,13
	.byte	'EMSR',0
	.word	54883
	.byte	4,3,35,252,1,13
	.byte	'WDTCPU',0
	.word	59837
	.byte	24,3,35,128,2,13
	.byte	'reserved_118',0
	.word	4613
	.byte	12,3,35,152,2,13
	.byte	'TRAPSTAT',0
	.word	59329
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	59264
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	59134
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS',0
	.word	59199
	.byte	4,3,35,176,2,13
	.byte	'reserved_134',0
	.word	2454
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	57126
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	57190
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	54502
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	57255
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	4273
	.byte	8,3,35,200,2,13
	.byte	'SAFECON',0
	.word	58875
	.byte	4,3,35,208,2,13
	.byte	'reserved_154',0
	.word	27116
	.byte	16,3,35,212,2,13
	.byte	'LBISTCTRL0',0
	.word	56922
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	56990
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	57058
	.byte	4,3,35,236,2,13
	.byte	'reserved_170',0
	.word	27096
	.byte	28,3,35,240,2,13
	.byte	'PDISC',0
	.word	57635
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4273
	.byte	8,3,35,144,3,13
	.byte	'EVRTRIM',0
	.word	56361
	.byte	4,3,35,152,3,13
	.byte	'EVRADCSTAT',0
	.word	55206
	.byte	4,3,35,156,3,13
	.byte	'EVRUVMON',0
	.word	56426
	.byte	4,3,35,160,3,13
	.byte	'EVROVMON',0
	.word	55477
	.byte	4,3,35,164,3,13
	.byte	'EVRMONCTRL',0
	.word	55341
	.byte	4,3,35,168,3,13
	.byte	'reserved_1AC',0
	.word	2454
	.byte	4,3,35,172,3,13
	.byte	'EVRSDCTRL1',0
	.word	56024
	.byte	4,3,35,176,3,13
	.byte	'EVRSDCTRL2',0
	.word	56092
	.byte	4,3,35,180,3,13
	.byte	'EVRSDCTRL3',0
	.word	56160
	.byte	4,3,35,184,3,13
	.byte	'EVRSDCTRL4',0
	.word	56228
	.byte	4,3,35,188,3,13
	.byte	'EVRSDCOEFF1',0
	.word	55610
	.byte	4,3,35,192,3,13
	.byte	'EVRSDCOEFF2',0
	.word	55679
	.byte	4,3,35,196,3,13
	.byte	'EVRSDCOEFF3',0
	.word	55748
	.byte	4,3,35,200,3,13
	.byte	'EVRSDCOEFF4',0
	.word	55817
	.byte	4,3,35,204,3,13
	.byte	'EVRSDCOEFF5',0
	.word	55886
	.byte	4,3,35,208,3,13
	.byte	'EVRSDCOEFF6',0
	.word	55955
	.byte	4,3,35,212,3,13
	.byte	'EVROSCCTRL',0
	.word	55409
	.byte	4,3,35,216,3,13
	.byte	'reserved_1DC',0
	.word	2454
	.byte	4,3,35,220,3,13
	.byte	'OVCENABLE',0
	.word	57568
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	57504
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	30247
	.byte	40,3,35,232,3,13
	.byte	'EICR',0
	.word	59842
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	54821
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	56617
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	57759
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	59851
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	2454
	.byte	4,3,35,188,4,13
	.byte	'DTSLIM',0
	.word	54630
	.byte	4,3,35,192,4,13
	.byte	'reserved_244',0
	.word	59860
	.byte	180,3,3,35,196,4,13
	.byte	'ACCEN1',0
	.word	53853
	.byte	4,3,35,248,7,13
	.byte	'ACCEN0',0
	.word	53789
	.byte	4,3,35,252,7,0,14
	.word	59871
	.byte	32
	.byte	'Ifx_SCU',0,4,181,16,3
	.word	61861
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,15,45,16,4,11
	.byte	'EN0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_STM_ACCEN0_Bits',0,15,79,3
	.word	61883
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,15,82,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1_Bits',0,15,85,3
	.word	62440
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,15,88,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAP_Bits',0,15,91,3
	.word	62517
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,15,94,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV_Bits',0,15,97,3
	.word	62589
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,15,100,16,4,11
	.byte	'DISR',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_CLC_Bits',0,15,107,3
	.word	62665
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,15,110,16,4,11
	.byte	'MSIZE0',0,1
	.word	636
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	636
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	636
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	636
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	636
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	636
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	636
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	636
	.byte	3,0,2,35,3,0,32
	.byte	'Ifx_STM_CMCON_Bits',0,15,120,3
	.word	62806
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,15,123,16,4,11
	.byte	'CMPVAL',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_CMP_Bits',0,15,126,3
	.word	63024
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,15,129,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	461
	.byte	25,0,2,35,0,0,32
	.byte	'Ifx_STM_ICR_Bits',0,15,139,1,3
	.word	63091
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,15,142,1,16,4,11
	.byte	'MODREV',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_STM_ID_Bits',0,15,147,1,3
	.word	63294
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,15,150,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_STM_ISCR_Bits',0,15,157,1,3
	.word	63401
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,15,160,1,16,4,11
	.byte	'RST',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST0_Bits',0,15,165,1,3
	.word	63552
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,15,168,1,16,4,11
	.byte	'RST',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRST1_Bits',0,15,172,1,3
	.word	63663
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,15,175,1,16,4,11
	.byte	'CLR',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR_Bits',0,15,179,1,3
	.word	63755
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,15,182,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	636
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	636
	.byte	2,0,2,35,3,0,32
	.byte	'Ifx_STM_OCS_Bits',0,15,189,1,3
	.word	63851
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,15,192,1,16,4,11
	.byte	'STM31_0',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0_Bits',0,15,195,1,3
	.word	63997
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,15,198,1,16,4,11
	.byte	'STM31_0',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV_Bits',0,15,201,1,3
	.word	64069
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,15,204,1,16,4,11
	.byte	'STM35_4',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM1_Bits',0,15,207,1,3
	.word	64145
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,15,210,1,16,4,11
	.byte	'STM39_8',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM2_Bits',0,15,213,1,3
	.word	64217
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,15,216,1,16,4,11
	.byte	'STM43_12',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM3_Bits',0,15,219,1,3
	.word	64289
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,15,222,1,16,4,11
	.byte	'STM47_16',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM4_Bits',0,15,225,1,3
	.word	64362
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,15,228,1,16,4,11
	.byte	'STM51_20',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM5_Bits',0,15,231,1,3
	.word	64435
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,15,234,1,16,4,11
	.byte	'STM63_32',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_STM_TIM6_Bits',0,15,237,1,3
	.word	64508
	.byte	12,15,245,1,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61883
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN0',0,15,250,1,3
	.word	64581
	.byte	12,15,253,1,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62440
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ACCEN1',0,15,130,2,3
	.word	64645
	.byte	12,15,133,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62517
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAP',0,15,138,2,3
	.word	64709
	.byte	12,15,141,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62589
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CAPSV',0,15,146,2,3
	.word	64770
	.byte	12,15,149,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62665
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CLC',0,15,154,2,3
	.word	64833
	.byte	12,15,157,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62806
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMCON',0,15,162,2,3
	.word	64894
	.byte	12,15,165,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63024
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_CMP',0,15,170,2,3
	.word	64957
	.byte	12,15,173,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63091
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ICR',0,15,178,2,3
	.word	65018
	.byte	12,15,181,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63294
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ID',0,15,186,2,3
	.word	65079
	.byte	12,15,189,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63401
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_ISCR',0,15,194,2,3
	.word	65139
	.byte	12,15,197,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63552
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST0',0,15,202,2,3
	.word	65201
	.byte	12,15,205,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63663
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRST1',0,15,210,2,3
	.word	65264
	.byte	12,15,213,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63755
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_KRSTCLR',0,15,218,2,3
	.word	65327
	.byte	12,15,221,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63851
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_OCS',0,15,226,2,3
	.word	65392
	.byte	12,15,229,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63997
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0',0,15,234,2,3
	.word	65453
	.byte	12,15,237,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64069
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM0SV',0,15,242,2,3
	.word	65515
	.byte	12,15,245,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64145
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM1',0,15,250,2,3
	.word	65579
	.byte	12,15,253,2,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64217
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM2',0,15,130,3,3
	.word	65641
	.byte	12,15,133,3,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64289
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM3',0,15,138,3,3
	.word	65703
	.byte	12,15,141,3,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64362
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM4',0,15,146,3,3
	.word	65765
	.byte	12,15,149,3,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64435
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM5',0,15,154,3,3
	.word	65827
	.byte	12,15,157,3,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64508
	.byte	4,2,35,0,0,32
	.byte	'Ifx_STM_TIM6',0,15,162,3,3
	.word	65889
	.byte	17,16,240,10,9,1,18
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,18
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,32
	.byte	'IfxScu_CCUCON0_CLKSEL',0,16,244,10,3
	.word	65951
	.byte	17,16,254,10,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,32
	.byte	'IfxScu_WDTCON1_IR',0,16,131,11,3
	.word	66048
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,17,45,16,4,11
	.byte	'EN0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,17,79,3
	.word	66170
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,17,82,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,17,85,3
	.word	66731
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,17,88,16,4,11
	.byte	'SEL',0,1
	.word	636
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	636
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,17,95,3
	.word	66812
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,17,98,16,4,11
	.byte	'VLD0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'VLD1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'VLD2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'VLD3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'VLD4',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'VLD5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'VLD6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'VLD7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'VLD8',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'VLD9',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,17,111,3
	.word	66965
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,17,114,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	636
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,17,121,3
	.word	67213
	.byte	10
	.byte	'_Ifx_FLASH_COMM0_Bits',0,17,124,16,4,11
	.byte	'STATUS',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,32
	.byte	'Ifx_FLASH_COMM0_Bits',0,17,128,1,3
	.word	67359
	.byte	10
	.byte	'_Ifx_FLASH_COMM1_Bits',0,17,131,1,16,4,11
	.byte	'STATUS',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_COMM1_Bits',0,17,136,1,3
	.word	67457
	.byte	10
	.byte	'_Ifx_FLASH_COMM2_Bits',0,17,139,1,16,4,11
	.byte	'STATUS',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_COMM2_Bits',0,17,144,1,3
	.word	67573
	.byte	10
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,17,147,1,16,4,11
	.byte	'RCODE',0,4
	.word	461
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	653
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_ECCRD_Bits',0,17,153,1,3
	.word	67689
	.byte	10
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,17,156,1,16,4,11
	.byte	'RCODE',0,4
	.word	461
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	653
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_ECCRP_Bits',0,17,162,1,3
	.word	67829
	.byte	10
	.byte	'_Ifx_FLASH_ECCW_Bits',0,17,165,1,16,4,11
	.byte	'WCODE',0,4
	.word	461
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	653
	.byte	8,2,2,35,2,11
	.byte	'DECENCDIS',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'PECENCDIS',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_ECCW_Bits',0,17,171,1,3
	.word	67969
	.byte	10
	.byte	'_Ifx_FLASH_FCON_Bits',0,17,174,1,16,4,11
	.byte	'WSPFLASH',0,1
	.word	636
	.byte	4,4,2,35,0,11
	.byte	'WSECPF',0,1
	.word	636
	.byte	2,2,2,35,0,11
	.byte	'WSDFLASH',0,2
	.word	653
	.byte	6,4,2,35,0,11
	.byte	'WSECDF',0,1
	.word	636
	.byte	3,1,2,35,1,11
	.byte	'IDLE',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'ESLDIS',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'SLEEP',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'NSAFECC',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'STALL',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'RES21',0,1
	.word	636
	.byte	2,2,2,35,2,11
	.byte	'RES23',0,1
	.word	636
	.byte	2,0,2,35,2,11
	.byte	'VOPERM',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'SQERM',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'PROERM',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	636
	.byte	3,2,2,35,3,11
	.byte	'PR5V',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'EOBM',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_FCON_Bits',0,17,193,1,3
	.word	68108
	.byte	10
	.byte	'_Ifx_FLASH_FPRO_Bits',0,17,196,1,16,4,11
	.byte	'PROINP',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'PRODISP',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'PROIND',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'PRODISD',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'PROINHSMCOTP',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'PROINOTP',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'RES7',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'PROINDBG',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'PRODISDBG',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'PROINHSM',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	636
	.byte	5,0,2,35,1,11
	.byte	'DCFP',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'DDFP',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'DDFPX',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'DDFD',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'ENPE',0,1
	.word	636
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	636
	.byte	8,0,2,35,3,0,32
	.byte	'Ifx_FLASH_FPRO_Bits',0,17,218,1,3
	.word	68470
	.byte	10
	.byte	'_Ifx_FLASH_FSR_Bits',0,17,221,1,16,4,11
	.byte	'FABUSY',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'D0BUSY',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'RES1',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'P0BUSY',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'P1BUSY',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'RES6',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'PROG',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'ERASE',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'PFPAGE',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'DFPAGE',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'OPER',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'SQER',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'PROER',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'PFSBER',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'PFDBER',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'PFMBER',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'RES17',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'DFSBER',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'DFDBER',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'DFTBER',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'DFMBER',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'SRIADDERR',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	653
	.byte	2,7,2,35,2,11
	.byte	'PVER',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'EVER',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'SPND',0,1
	.word	636
	.byte	1,4,2,35,3,11
	.byte	'SLM',0,1
	.word	636
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	636
	.byte	1,2,2,35,3,11
	.byte	'ORIER',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_FSR_Bits',0,17,254,1,3
	.word	68911
	.byte	10
	.byte	'_Ifx_FLASH_ID_Bits',0,17,129,2,16,4,11
	.byte	'MODREV',0,1
	.word	636
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	636
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_ID_Bits',0,17,134,2,3
	.word	69517
	.byte	10
	.byte	'_Ifx_FLASH_MARD_Bits',0,17,137,2,16,4,11
	.byte	'HMARGIN',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'SELD0',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'SPND',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'SPNDERR',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	653
	.byte	10,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_MARD_Bits',0,17,147,2,3
	.word	69628
	.byte	10
	.byte	'_Ifx_FLASH_MARP_Bits',0,17,150,2,16,4,11
	.byte	'SELP0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'SELP1',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'RES2',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'RES3',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	653
	.byte	11,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_MARP_Bits',0,17,159,2,3
	.word	69842
	.byte	10
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,17,162,2,16,4,11
	.byte	'L',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'NSAFECC',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'RAMIN',0,1
	.word	636
	.byte	2,4,2,35,0,11
	.byte	'RAMINSEL',0,1
	.word	636
	.byte	4,0,2,35,0,11
	.byte	'OSCCFG',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'MODE',0,1
	.word	636
	.byte	2,5,2,35,1,11
	.byte	'APREN',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'CAP0EN',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'CAP1EN',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'CAP2EN',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'CAP3EN',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'ESR0CNT',0,2
	.word	653
	.byte	12,4,2,35,2,11
	.byte	'RES29',0,1
	.word	636
	.byte	2,2,2,35,3,11
	.byte	'RES30',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_PROCOND_Bits',0,17,179,2,3
	.word	70029
	.byte	10
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,17,182,2,16,4,11
	.byte	'OCDSDIS',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'EDM',0,1
	.word	636
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,17,188,2,3
	.word	70353
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,17,191,2,16,4,11
	.byte	'HSMDBGDIS',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'TSTIFLCK',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'HSMTSTDIS',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'RES15',0,2
	.word	653
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,17,199,2,3
	.word	70496
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,17,202,2,16,4,11
	.byte	'HSMBOOTEN',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'SSWWAIT',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'HSMDX',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'HSM6X',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'HSM16X',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'HSM17X',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'HSMENPINS',0,2
	.word	653
	.byte	2,7,2,35,0,11
	.byte	'HSMENRES',0,1
	.word	636
	.byte	2,5,2,35,1,11
	.byte	'DESTDBG',0,1
	.word	636
	.byte	2,3,2,35,1,11
	.byte	'BLKFLAN',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	636
	.byte	2,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	653
	.byte	14,0,2,35,2,0,32
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,17,219,2,3
	.word	70685
	.byte	10
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,17,222,2,16,4,11
	.byte	'S0ROM',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'S1ROM',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'S2ROM',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'S3ROM',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'S4ROM',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'S5ROM',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'S7ROM',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'S8ROM',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'S9ROM',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'S10ROM',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'S11ROM',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'S12ROM',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'S13ROM',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'S14ROM',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'S15ROM',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'S18ROM',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'S19ROM',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'S20ROM',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'S21ROM',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'S22ROM',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'S23ROM',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'S24ROM',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'S25ROM',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'S26ROM',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	636
	.byte	2,3,2,35,3,11
	.byte	'BML',0,1
	.word	636
	.byte	2,1,2,35,3,11
	.byte	'TP',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,17,254,2,3
	.word	71048
	.byte	10
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,17,129,3,16,4,11
	.byte	'S0L',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	636
	.byte	4,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_PROCONP_Bits',0,17,160,3,3
	.word	71643
	.byte	10
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,17,163,3,16,4,11
	.byte	'S0WOP',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'S1WOP',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'S2WOP',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'S3WOP',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'S4WOP',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'S5WOP',0,1
	.word	636
	.byte	1,2,2,35,0,11
	.byte	'S6WOP',0,1
	.word	636
	.byte	1,1,2,35,0,11
	.byte	'S7WOP',0,1
	.word	636
	.byte	1,0,2,35,0,11
	.byte	'S8WOP',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'S9WOP',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'S10WOP',0,1
	.word	636
	.byte	1,5,2,35,1,11
	.byte	'S11WOP',0,1
	.word	636
	.byte	1,4,2,35,1,11
	.byte	'S12WOP',0,1
	.word	636
	.byte	1,3,2,35,1,11
	.byte	'S13WOP',0,1
	.word	636
	.byte	1,2,2,35,1,11
	.byte	'S14WOP',0,1
	.word	636
	.byte	1,1,2,35,1,11
	.byte	'S15WOP',0,1
	.word	636
	.byte	1,0,2,35,1,11
	.byte	'S16WOP',0,1
	.word	636
	.byte	1,7,2,35,2,11
	.byte	'S17WOP',0,1
	.word	636
	.byte	1,6,2,35,2,11
	.byte	'S18WOP',0,1
	.word	636
	.byte	1,5,2,35,2,11
	.byte	'S19WOP',0,1
	.word	636
	.byte	1,4,2,35,2,11
	.byte	'S20WOP',0,1
	.word	636
	.byte	1,3,2,35,2,11
	.byte	'S21WOP',0,1
	.word	636
	.byte	1,2,2,35,2,11
	.byte	'S22WOP',0,1
	.word	636
	.byte	1,1,2,35,2,11
	.byte	'S23WOP',0,1
	.word	636
	.byte	1,0,2,35,2,11
	.byte	'S24WOP',0,1
	.word	636
	.byte	1,7,2,35,3,11
	.byte	'S25WOP',0,1
	.word	636
	.byte	1,6,2,35,3,11
	.byte	'S26WOP',0,1
	.word	636
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	636
	.byte	4,1,2,35,3,11
	.byte	'DATM',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,17,194,3,3
	.word	72167
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,17,197,3,16,4,11
	.byte	'TAG',0,1
	.word	636
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,17,201,3,3
	.word	72749
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,17,204,3,16,4,11
	.byte	'TAG',0,1
	.word	636
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,17,208,3,3
	.word	72851
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,17,211,3,16,4,11
	.byte	'TAG',0,1
	.word	636
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	26,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,17,215,3,3
	.word	72953
	.byte	10
	.byte	'_Ifx_FLASH_RRAD_Bits',0,17,218,3,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	3,5,2,35,0,11
	.byte	'ADD',0,4
	.word	461
	.byte	29,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RRAD_Bits',0,17,222,3,3
	.word	73055
	.byte	10
	.byte	'_Ifx_FLASH_RRCT_Bits',0,17,225,3,16,4,11
	.byte	'STRT',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'STP',0,1
	.word	636
	.byte	1,6,2,35,0,11
	.byte	'BUSY',0,1
	.word	636
	.byte	1,5,2,35,0,11
	.byte	'DONE',0,1
	.word	636
	.byte	1,4,2,35,0,11
	.byte	'ERR',0,1
	.word	636
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	636
	.byte	3,0,2,35,0,11
	.byte	'EOBM',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	636
	.byte	7,0,2,35,1,11
	.byte	'CNT',0,2
	.word	653
	.byte	16,0,2,35,2,0,32
	.byte	'Ifx_FLASH_RRCT_Bits',0,17,236,3,3
	.word	73149
	.byte	10
	.byte	'_Ifx_FLASH_RRD0_Bits',0,17,239,3,16,4,11
	.byte	'DATA',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RRD0_Bits',0,17,242,3,3
	.word	73359
	.byte	10
	.byte	'_Ifx_FLASH_RRD1_Bits',0,17,245,3,16,4,11
	.byte	'DATA',0,4
	.word	461
	.byte	32,0,2,35,0,0,32
	.byte	'Ifx_FLASH_RRD1_Bits',0,17,248,3,3
	.word	73432
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,17,251,3,16,4,11
	.byte	'SEL',0,1
	.word	636
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	636
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	636
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	636
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	22,0,2,35,0,0,32
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,17,130,4,3
	.word	73505
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,17,133,4,16,4,11
	.byte	'VLD0',0,1
	.word	636
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,32
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,17,137,4,3
	.word	73660
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,17,140,4,16,4,11
	.byte	'reserved_0',0,1
	.word	636
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	636
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	636
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	636
	.byte	1,0,2,35,3,0,32
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,17,147,4,3
	.word	73765
	.byte	12,17,155,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66170
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ACCEN0',0,17,160,4,3
	.word	73913
	.byte	12,17,163,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66731
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ACCEN1',0,17,168,4,3
	.word	73979
	.byte	12,17,171,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66812
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_CBAB_CFG',0,17,176,4,3
	.word	74045
	.byte	12,17,179,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66965
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_CBAB_STAT',0,17,184,4,3
	.word	74113
	.byte	12,17,187,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67213
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_CBAB_TOP',0,17,192,4,3
	.word	74182
	.byte	12,17,195,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67359
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_COMM0',0,17,200,4,3
	.word	74250
	.byte	12,17,203,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67457
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_COMM1',0,17,208,4,3
	.word	74315
	.byte	12,17,211,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67573
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_COMM2',0,17,216,4,3
	.word	74380
	.byte	12,17,219,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67689
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ECCRD',0,17,224,4,3
	.word	74445
	.byte	12,17,227,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67829
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ECCRP',0,17,232,4,3
	.word	74510
	.byte	12,17,235,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67969
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ECCW',0,17,240,4,3
	.word	74575
	.byte	12,17,243,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68108
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_FCON',0,17,248,4,3
	.word	74639
	.byte	12,17,251,4,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68470
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_FPRO',0,17,128,5,3
	.word	74703
	.byte	12,17,131,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68911
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_FSR',0,17,136,5,3
	.word	74767
	.byte	12,17,139,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69517
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_ID',0,17,144,5,3
	.word	74830
	.byte	12,17,147,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69628
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_MARD',0,17,152,5,3
	.word	74892
	.byte	12,17,155,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69842
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_MARP',0,17,160,5,3
	.word	74956
	.byte	12,17,163,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70029
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCOND',0,17,168,5,3
	.word	75020
	.byte	12,17,171,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70353
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONDBG',0,17,176,5,3
	.word	75087
	.byte	12,17,179,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70496
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONHSM',0,17,184,5,3
	.word	75156
	.byte	12,17,187,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70685
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,17,192,5,3
	.word	75225
	.byte	12,17,195,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71048
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONOTP',0,17,200,5,3
	.word	75298
	.byte	12,17,203,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71643
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONP',0,17,208,5,3
	.word	75367
	.byte	12,17,211,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72167
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_PROCONWOP',0,17,216,5,3
	.word	75434
	.byte	12,17,219,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72749
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG0',0,17,224,5,3
	.word	75503
	.byte	12,17,227,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72851
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG1',0,17,232,5,3
	.word	75571
	.byte	12,17,235,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72953
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RDB_CFG2',0,17,240,5,3
	.word	75639
	.byte	12,17,243,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73055
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RRAD',0,17,248,5,3
	.word	75707
	.byte	12,17,251,5,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73149
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RRCT',0,17,128,6,3
	.word	75771
	.byte	12,17,131,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73359
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RRD0',0,17,136,6,3
	.word	75835
	.byte	12,17,139,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73432
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_RRD1',0,17,144,6,3
	.word	75899
	.byte	12,17,147,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73505
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_UBAB_CFG',0,17,152,6,3
	.word	75963
	.byte	12,17,155,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73660
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_UBAB_STAT',0,17,160,6,3
	.word	76031
	.byte	12,17,163,6,9,4,13
	.byte	'U',0
	.word	461
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	477
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73765
	.byte	4,2,35,0,0,32
	.byte	'Ifx_FLASH_UBAB_TOP',0,17,168,6,3
	.word	76100
	.byte	10
	.byte	'_Ifx_FLASH_CBAB',0,17,179,6,25,12,13
	.byte	'CFG',0
	.word	74045
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	74113
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	74182
	.byte	4,2,35,8,0,14
	.word	76168
	.byte	32
	.byte	'Ifx_FLASH_CBAB',0,17,184,6,3
	.word	76231
	.byte	10
	.byte	'_Ifx_FLASH_RDB',0,17,187,6,25,12,13
	.byte	'CFG0',0
	.word	75503
	.byte	4,2,35,0,13
	.byte	'CFG1',0
	.word	75571
	.byte	4,2,35,4,13
	.byte	'CFG2',0
	.word	75639
	.byte	4,2,35,8,0,14
	.word	76260
	.byte	32
	.byte	'Ifx_FLASH_RDB',0,17,192,6,3
	.word	76324
	.byte	10
	.byte	'_Ifx_FLASH_UBAB',0,17,195,6,25,12,13
	.byte	'CFG',0
	.word	75963
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	76031
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	76100
	.byte	4,2,35,8,0,14
	.word	76352
	.byte	32
	.byte	'Ifx_FLASH_UBAB',0,17,200,6,3
	.word	76415
	.byte	32
	.byte	'Ifx_P_ACCEN0_Bits',0,6,79,3
	.word	8026
	.byte	32
	.byte	'Ifx_P_ACCEN1_Bits',0,6,85,3
	.word	7939
	.byte	32
	.byte	'Ifx_P_ESR_Bits',0,6,107,3
	.word	4282
	.byte	32
	.byte	'Ifx_P_ID_Bits',0,6,115,3
	.word	2335
	.byte	32
	.byte	'Ifx_P_IN_Bits',0,6,137,1,3
	.word	3330
	.byte	32
	.byte	'Ifx_P_IOCR0_Bits',0,6,150,1,3
	.word	2463
	.byte	32
	.byte	'Ifx_P_IOCR12_Bits',0,6,163,1,3
	.word	3110
	.byte	32
	.byte	'Ifx_P_IOCR4_Bits',0,6,176,1,3
	.word	2678
	.byte	32
	.byte	'Ifx_P_IOCR8_Bits',0,6,189,1,3
	.word	2893
	.byte	32
	.byte	'Ifx_P_LPCR0_Bits',0,6,197,1,3
	.word	7298
	.byte	32
	.byte	'Ifx_P_LPCR1_Bits',0,6,205,1,3
	.word	7422
	.byte	32
	.byte	'Ifx_P_LPCR1_P21_Bits',0,6,215,1,3
	.word	7506
	.byte	32
	.byte	'Ifx_P_LPCR2_Bits',0,6,229,1,3
	.word	7686
	.byte	32
	.byte	'Ifx_P_OMCR0_Bits',0,6,240,1,3
	.word	5937
	.byte	32
	.byte	'Ifx_P_OMCR12_Bits',0,6,250,1,3
	.word	6461
	.byte	32
	.byte	'Ifx_P_OMCR4_Bits',0,6,133,2,3
	.word	6111
	.byte	32
	.byte	'Ifx_P_OMCR8_Bits',0,6,144,2,3
	.word	6285
	.byte	32
	.byte	'Ifx_P_OMCR_Bits',0,6,166,2,3
	.word	6950
	.byte	32
	.byte	'Ifx_P_OMR_Bits',0,6,203,2,3
	.word	1764
	.byte	32
	.byte	'Ifx_P_OMSR0_Bits',0,6,213,2,3
	.word	5274
	.byte	32
	.byte	'Ifx_P_OMSR12_Bits',0,6,224,2,3
	.word	5762
	.byte	32
	.byte	'Ifx_P_OMSR4_Bits',0,6,235,2,3
	.word	5421
	.byte	32
	.byte	'Ifx_P_OMSR8_Bits',0,6,246,2,3
	.word	5590
	.byte	32
	.byte	'Ifx_P_OMSR_Bits',0,6,140,3,3
	.word	6617
	.byte	32
	.byte	'Ifx_P_OUT_Bits',0,6,162,3,3
	.word	1448
	.byte	32
	.byte	'Ifx_P_PCSR_Bits',0,6,180,3,3
	.word	4988
	.byte	32
	.byte	'Ifx_P_PDISC_Bits',0,6,202,3,3
	.word	4622
	.byte	32
	.byte	'Ifx_P_PDR0_Bits',0,6,223,3,3
	.word	3653
	.byte	32
	.byte	'Ifx_P_PDR1_Bits',0,6,244,3,3
	.word	3957
	.byte	32
	.byte	'Ifx_P_ACCEN0',0,6,129,4,3
	.word	8553
	.byte	32
	.byte	'Ifx_P_ACCEN1',0,6,137,4,3
	.word	7986
	.byte	32
	.byte	'Ifx_P_ESR',0,6,145,4,3
	.word	4573
	.byte	32
	.byte	'Ifx_P_ID',0,6,153,4,3
	.word	2414
	.byte	32
	.byte	'Ifx_P_IN',0,6,161,4,3
	.word	3604
	.byte	32
	.byte	'Ifx_P_IOCR0',0,6,169,4,3
	.word	2638
	.byte	32
	.byte	'Ifx_P_IOCR12',0,6,177,4,3
	.word	3290
	.byte	32
	.byte	'Ifx_P_IOCR4',0,6,185,4,3
	.word	2853
	.byte	32
	.byte	'Ifx_P_IOCR8',0,6,193,4,3
	.word	3070
	.byte	32
	.byte	'Ifx_P_LPCR0',0,6,201,4,3
	.word	7382
	.byte	32
	.byte	'Ifx_P_LPCR1',0,6,210,4,3
	.word	7631
	.byte	32
	.byte	'Ifx_P_LPCR2',0,6,218,4,3
	.word	7890
	.byte	32
	.byte	'Ifx_P_OMCR',0,6,226,4,3
	.word	7258
	.byte	32
	.byte	'Ifx_P_OMCR0',0,6,234,4,3
	.word	6071
	.byte	32
	.byte	'Ifx_P_OMCR12',0,6,242,4,3
	.word	6577
	.byte	32
	.byte	'Ifx_P_OMCR4',0,6,250,4,3
	.word	6245
	.byte	32
	.byte	'Ifx_P_OMCR8',0,6,130,5,3
	.word	6421
	.byte	32
	.byte	'Ifx_P_OMR',0,6,138,5,3
	.word	2295
	.byte	32
	.byte	'Ifx_P_OMSR',0,6,146,5,3
	.word	6910
	.byte	32
	.byte	'Ifx_P_OMSR0',0,6,154,5,3
	.word	5381
	.byte	32
	.byte	'Ifx_P_OMSR12',0,6,162,5,3
	.word	5897
	.byte	32
	.byte	'Ifx_P_OMSR4',0,6,170,5,3
	.word	5550
	.byte	32
	.byte	'Ifx_P_OMSR8',0,6,178,5,3
	.word	5722
	.byte	32
	.byte	'Ifx_P_OUT',0,6,186,5,3
	.word	1724
	.byte	32
	.byte	'Ifx_P_PCSR',0,6,194,5,3
	.word	5234
	.byte	32
	.byte	'Ifx_P_PDISC',0,6,202,5,3
	.word	4948
	.byte	32
	.byte	'Ifx_P_PDR0',0,6,210,5,3
	.word	3917
	.byte	32
	.byte	'Ifx_P_PDR1',0,6,218,5,3
	.word	4233
	.byte	14
	.word	8593
	.byte	32
	.byte	'Ifx_P',0,6,139,6,3
	.word	77762
	.byte	17,5,83,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,32
	.byte	'IfxPort_InputMode',0,5,89,3
	.word	77782
	.byte	17,5,120,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,32
	.byte	'IfxPort_OutputIdx',0,5,130,1,3
	.word	77933
	.byte	17,5,134,1,9,1,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,32
	.byte	'IfxPort_OutputMode',0,5,138,1,3
	.word	78177
	.byte	17,5,144,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,18
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,18
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,18
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,32
	.byte	'IfxPort_PadDriver',0,5,158,1,3
	.word	78275
	.byte	32
	.byte	'IfxPort_State',0,5,178,1,3
	.word	9206
	.byte	20,5,190,1,9,8,13
	.byte	'port',0
	.word	9201
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	636
	.byte	1,2,35,4,0,32
	.byte	'IfxPort_Pin',0,5,194,1,3
	.word	78740
	.byte	32
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,18,148,1,16
	.word	174
	.byte	20,18,212,5,9,8,13
	.byte	'value',0
	.word	9624
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9624
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_CcuconRegConfig',0,18,216,5,3
	.word	78840
	.byte	20,18,221,5,9,8,13
	.byte	'pDivider',0
	.word	636
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	636
	.byte	1,2,35,1,13
	.byte	'k2Initial',0
	.word	636
	.byte	1,2,35,2,13
	.byte	'waitTime',0
	.word	231
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_InitialStepConfig',0,18,227,5,3
	.word	78911
	.byte	20,18,231,5,9,12,13
	.byte	'k2Step',0
	.word	636
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	231
	.byte	4,2,35,2,13
	.byte	'hookFunction',0
	.word	78800
	.byte	4,2,35,8,0,32
	.byte	'IfxScuCcu_PllStepsConfig',0,18,236,5,3
	.word	79028
	.byte	3
	.word	171
	.byte	20,18,244,5,9,48,13
	.byte	'ccucon0',0
	.word	78840
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	78840
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	78840
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	78840
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	78840
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	78840
	.byte	8,2,35,40,0,32
	.byte	'IfxScuCcu_ClockDistributionConfig',0,18,252,5,3
	.word	79130
	.byte	20,18,128,6,9,8,13
	.byte	'value',0
	.word	9624
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9624
	.byte	4,2,35,4,0,32
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,18,132,6,3
	.word	79282
	.byte	3
	.word	79028
	.byte	20,18,137,6,9,16,13
	.byte	'numOfPllDividerSteps',0
	.word	636
	.byte	1,2,35,0,13
	.byte	'pllDividerStep',0
	.word	79358
	.byte	4,2,35,4,13
	.byte	'pllInitialStep',0
	.word	78911
	.byte	8,2,35,8,0,32
	.byte	'IfxScuCcu_SysPllConfig',0,18,142,6,3
	.word	79363
	.byte	17,7,144,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,32
	.byte	'IfxCpu_CounterMode',0,7,148,1,3
	.word	79480
	.byte	20,7,160,1,9,6,13
	.byte	'counter',0
	.word	9624
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	636
	.byte	1,2,35,4,0,32
	.byte	'IfxCpu_Counter',0,7,164,1,3
	.word	79569
	.byte	20,7,172,1,9,32,13
	.byte	'instruction',0
	.word	79569
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	79569
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	79569
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	79569
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	79569
	.byte	6,2,35,24,0,32
	.byte	'IfxCpu_Perf',0,7,179,1,3
	.word	79635
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L53:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,19,1,58,15,59,15,57,15,11,15,0,0,21,38,0,73,19
	.byte	0,0,22,46,1,3,8,54,15,39,12,63,12,60,12,0,0,23,5,0,73,19,0,0,24,46,1,3,8,73,19,54,15,39,12,63,12,60,12
	.byte	0,0,25,5,0,3,8,73,19,0,0,26,46,0,3,8,54,15,39,12,63,12,60,12,0,0,27,46,1,49,19,0,0,28,5,0,49,19,0,0,29
	.byte	29,1,49,19,0,0,30,11,0,49,19,0,0,31,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,32,22,0,3,8,58,15
	.byte	59,15,57,15,73,19,0,0,33,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L54:
	.word	.L287-.L286
.L286:
	.half	3
	.word	.L289-.L288
.L288:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,4,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.h',0,0,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'IfxFlash_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0,0
.L289:
.L287:
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_info'
.L55:
	.word	439
	.half	3
	.word	.L56
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L58,.L57
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_memoryManagementError',0,1,129,1,6,1,1,1
	.word	.L30,.L110,.L29
	.byte	4
	.byte	'tin',0,1,129,1,47
	.word	.L111,.L112
	.byte	5
	.word	.L30,.L110
	.byte	6
	.byte	'trapWatch',0,1,131,1,26
	.word	.L113,.L114
	.byte	7
	.word	.L115,.L116,.L117
	.byte	8
	.word	.L118,.L119
	.byte	8
	.word	.L120,.L121
	.byte	9
	.word	.L122,.L116,.L117
	.byte	6
	.byte	'trapInfo',0,1,120,17
	.word	.L123,.L124
	.byte	7
	.word	.L125,.L116,.L126
	.byte	9
	.word	.L127,.L116,.L126
	.byte	6
	.byte	'res',0,2,222,2,19
	.word	.L128,.L129
	.byte	0,0,7
	.word	.L130,.L131,.L3
	.byte	9
	.word	.L132,.L131,.L3
	.byte	6
	.byte	'reg',0,3,135,6,21
	.word	.L133,.L134
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_abbrev'
.L56:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_line'
.L57:
	.word	.L291-.L290
.L290:
	.half	3
	.word	.L293-.L292
.L292:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L293:
	.byte	5,6,7,0,5,2
	.word	.L30
	.byte	3,128,1,1,4,2,5,5,9
	.half	.L116-.L30
	.byte	3,222,1,1,9
	.half	.L294-.L116
	.byte	3,1,1,4,1,5,45,9
	.half	.L2-.L294
	.byte	3,153,126,1,5,13,9
	.half	.L126-.L2
	.byte	3,1,1,5,21,9
	.half	.L242-.L126
	.byte	1,5,23,9
	.half	.L295-.L242
	.byte	3,1,1,5,21,9
	.half	.L296-.L295
	.byte	1,4,3,5,19,9
	.half	.L131-.L296
	.byte	3,141,5,1,5,28,9
	.half	.L244-.L131
	.byte	3,1,1,5,5,9
	.half	.L245-.L244
	.byte	1,4,1,5,13,9
	.half	.L3-.L245
	.byte	3,243,122,1,5,21,9
	.half	.L297-.L3
	.byte	1,5,5,9
	.half	.L298-.L297
	.byte	3,1,1,5,15,9
	.half	.L4-.L298
	.byte	3,7,1,5,5,9
	.half	.L117-.L4
	.byte	3,1,1,9
	.half	.L299-.L117
	.byte	3,1,1,9
	.half	.L300-.L299
	.byte	3,1,1,9
	.half	.L301-.L300
	.byte	3,1,1,5,1,9
	.half	.L302-.L301
	.byte	3,1,1,7,9
	.half	.L59-.L302
	.byte	0,1,1
.L291:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_ranges'
.L58:
	.word	-1,.L30,0,.L59-.L30,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_info'
.L60:
	.word	441
	.half	3
	.word	.L61
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L63,.L62
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_internalProtectionError',0,1,140,1,6,1,1,1
	.word	.L32,.L135,.L31
	.byte	4
	.byte	'tin',0,1,140,1,49
	.word	.L111,.L136
	.byte	5
	.word	.L32,.L135
	.byte	6
	.byte	'trapWatch',0,1,142,1,26
	.word	.L137,.L138
	.byte	7
	.word	.L115,.L139,.L140
	.byte	8
	.word	.L118,.L141
	.byte	8
	.word	.L120,.L142
	.byte	9
	.word	.L122,.L139,.L140
	.byte	6
	.byte	'trapInfo',0,1,120,17
	.word	.L123,.L143
	.byte	7
	.word	.L125,.L139,.L144
	.byte	9
	.word	.L127,.L139,.L144
	.byte	6
	.byte	'res',0,2,222,2,19
	.word	.L128,.L145
	.byte	0,0,7
	.word	.L130,.L146,.L6
	.byte	9
	.word	.L132,.L146,.L6
	.byte	6
	.byte	'reg',0,3,135,6,21
	.word	.L133,.L147
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_abbrev'
.L61:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_line'
.L62:
	.word	.L304-.L303
.L303:
	.half	3
	.word	.L306-.L305
.L305:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L306:
	.byte	5,6,7,0,5,2
	.word	.L32
	.byte	3,139,1,1,4,2,5,5,9
	.half	.L139-.L32
	.byte	3,211,1,1,9
	.half	.L307-.L139
	.byte	3,1,1,4,1,5,45,9
	.half	.L5-.L307
	.byte	3,153,126,1,5,13,9
	.half	.L144-.L5
	.byte	3,1,1,5,21,9
	.half	.L247-.L144
	.byte	1,5,23,9
	.half	.L308-.L247
	.byte	3,1,1,5,21,9
	.half	.L309-.L308
	.byte	1,4,3,5,19,9
	.half	.L146-.L309
	.byte	3,141,5,1,5,28,9
	.half	.L249-.L146
	.byte	3,1,1,5,5,9
	.half	.L250-.L249
	.byte	1,4,1,5,13,9
	.half	.L6-.L250
	.byte	3,243,122,1,5,21,9
	.half	.L310-.L6
	.byte	1,5,5,9
	.half	.L311-.L310
	.byte	3,1,1,5,15,9
	.half	.L7-.L311
	.byte	3,18,1,5,5,9
	.half	.L140-.L7
	.byte	3,1,1,9
	.half	.L312-.L140
	.byte	3,1,1,9
	.half	.L313-.L312
	.byte	3,1,1,9
	.half	.L314-.L313
	.byte	3,1,1,5,1,9
	.half	.L315-.L314
	.byte	3,1,1,7,9
	.half	.L64-.L315
	.byte	0,1,1
.L304:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_ranges'
.L63:
	.word	-1,.L32,0,.L64-.L32,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_info'
.L65:
	.word	434
	.half	3
	.word	.L66
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L68,.L67
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_instructionError',0,1,151,1,6,1,1,1
	.word	.L34,.L148,.L33
	.byte	4
	.byte	'tin',0,1,151,1,42
	.word	.L111,.L149
	.byte	5
	.word	.L34,.L148
	.byte	6
	.byte	'trapWatch',0,1,153,1,26
	.word	.L150,.L151
	.byte	7
	.word	.L115,.L152,.L153
	.byte	8
	.word	.L118,.L154
	.byte	8
	.word	.L120,.L155
	.byte	9
	.word	.L122,.L152,.L153
	.byte	6
	.byte	'trapInfo',0,1,120,17
	.word	.L123,.L156
	.byte	7
	.word	.L125,.L152,.L157
	.byte	9
	.word	.L127,.L152,.L157
	.byte	6
	.byte	'res',0,2,222,2,19
	.word	.L128,.L158
	.byte	0,0,7
	.word	.L130,.L159,.L9
	.byte	9
	.word	.L132,.L159,.L9
	.byte	6
	.byte	'reg',0,3,135,6,21
	.word	.L133,.L160
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_abbrev'
.L66:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_line'
.L67:
	.word	.L317-.L316
.L316:
	.half	3
	.word	.L319-.L318
.L318:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L319:
	.byte	5,6,7,0,5,2
	.word	.L34
	.byte	3,150,1,1,4,2,5,5,9
	.half	.L152-.L34
	.byte	3,200,1,1,9
	.half	.L320-.L152
	.byte	3,1,1,4,1,5,45,9
	.half	.L8-.L320
	.byte	3,153,126,1,5,13,9
	.half	.L157-.L8
	.byte	3,1,1,5,21,9
	.half	.L252-.L157
	.byte	1,5,23,9
	.half	.L321-.L252
	.byte	3,1,1,5,21,9
	.half	.L322-.L321
	.byte	1,4,3,5,19,9
	.half	.L159-.L322
	.byte	3,141,5,1,5,28,9
	.half	.L254-.L159
	.byte	3,1,1,5,5,9
	.half	.L255-.L254
	.byte	1,4,1,5,13,9
	.half	.L9-.L255
	.byte	3,243,122,1,5,21,9
	.half	.L323-.L9
	.byte	1,5,5,9
	.half	.L324-.L323
	.byte	3,1,1,5,15,9
	.half	.L10-.L324
	.byte	3,29,1,5,5,9
	.half	.L153-.L10
	.byte	3,1,1,9
	.half	.L325-.L153
	.byte	3,1,1,9
	.half	.L326-.L325
	.byte	3,1,1,9
	.half	.L327-.L326
	.byte	3,1,1,5,1,9
	.half	.L328-.L327
	.byte	3,1,1,7,9
	.half	.L69-.L328
	.byte	0,1,1
.L317:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_ranges'
.L68:
	.word	-1,.L34,0,.L69-.L34,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_info'
.L70:
	.word	440
	.half	3
	.word	.L71
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L73,.L72
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_contextManagementError',0,1,162,1,6,1,1,1
	.word	.L36,.L161,.L35
	.byte	4
	.byte	'tin',0,1,162,1,48
	.word	.L111,.L162
	.byte	5
	.word	.L36,.L161
	.byte	6
	.byte	'trapWatch',0,1,164,1,26
	.word	.L163,.L164
	.byte	7
	.word	.L115,.L165,.L166
	.byte	8
	.word	.L118,.L167
	.byte	8
	.word	.L120,.L168
	.byte	9
	.word	.L122,.L165,.L166
	.byte	6
	.byte	'trapInfo',0,1,120,17
	.word	.L123,.L169
	.byte	7
	.word	.L125,.L165,.L170
	.byte	9
	.word	.L127,.L165,.L170
	.byte	6
	.byte	'res',0,2,222,2,19
	.word	.L128,.L171
	.byte	0,0,7
	.word	.L130,.L172,.L12
	.byte	9
	.word	.L132,.L172,.L12
	.byte	6
	.byte	'reg',0,3,135,6,21
	.word	.L133,.L173
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_abbrev'
.L71:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_line'
.L72:
	.word	.L330-.L329
.L329:
	.half	3
	.word	.L332-.L331
.L331:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L332:
	.byte	5,6,7,0,5,2
	.word	.L36
	.byte	3,161,1,1,4,2,5,5,9
	.half	.L165-.L36
	.byte	3,189,1,1,9
	.half	.L333-.L165
	.byte	3,1,1,4,1,5,45,9
	.half	.L11-.L333
	.byte	3,153,126,1,5,13,9
	.half	.L170-.L11
	.byte	3,1,1,5,21,9
	.half	.L257-.L170
	.byte	1,5,23,9
	.half	.L334-.L257
	.byte	3,1,1,5,21,9
	.half	.L335-.L334
	.byte	1,4,3,5,19,9
	.half	.L172-.L335
	.byte	3,141,5,1,5,28,9
	.half	.L259-.L172
	.byte	3,1,1,5,5,9
	.half	.L260-.L259
	.byte	1,4,1,5,13,9
	.half	.L12-.L260
	.byte	3,243,122,1,5,21,9
	.half	.L336-.L12
	.byte	1,5,5,9
	.half	.L337-.L336
	.byte	3,1,1,5,15,9
	.half	.L13-.L337
	.byte	3,40,1,5,5,9
	.half	.L166-.L13
	.byte	3,1,1,9
	.half	.L338-.L166
	.byte	3,1,1,9
	.half	.L339-.L338
	.byte	3,1,1,9
	.half	.L340-.L339
	.byte	3,1,1,5,1,9
	.half	.L341-.L340
	.byte	3,1,1,7,9
	.half	.L74-.L341
	.byte	0,1,1
.L330:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_ranges'
.L73:
	.word	-1,.L36,0,.L74-.L36,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_info'
.L75:
	.word	426
	.half	3
	.word	.L76
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L78,.L77
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_busError',0,1,173,1,6,1,1,1
	.word	.L38,.L174,.L37
	.byte	4
	.byte	'tin',0,1,173,1,34
	.word	.L111,.L175
	.byte	5
	.word	.L38,.L174
	.byte	6
	.byte	'trapWatch',0,1,175,1,26
	.word	.L176,.L177
	.byte	7
	.word	.L115,.L178,.L179
	.byte	8
	.word	.L118,.L180
	.byte	8
	.word	.L120,.L181
	.byte	9
	.word	.L122,.L178,.L179
	.byte	6
	.byte	'trapInfo',0,1,120,17
	.word	.L123,.L182
	.byte	7
	.word	.L125,.L178,.L183
	.byte	9
	.word	.L127,.L178,.L183
	.byte	6
	.byte	'res',0,2,222,2,19
	.word	.L128,.L184
	.byte	0,0,7
	.word	.L130,.L185,.L15
	.byte	9
	.word	.L132,.L185,.L15
	.byte	6
	.byte	'reg',0,3,135,6,21
	.word	.L133,.L186
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_abbrev'
.L76:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_line'
.L77:
	.word	.L343-.L342
.L342:
	.half	3
	.word	.L345-.L344
.L344:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L345:
	.byte	5,6,7,0,5,2
	.word	.L38
	.byte	3,172,1,1,4,2,5,5,9
	.half	.L178-.L38
	.byte	3,178,1,1,9
	.half	.L346-.L178
	.byte	3,1,1,4,1,5,45,9
	.half	.L14-.L346
	.byte	3,153,126,1,5,13,9
	.half	.L183-.L14
	.byte	3,1,1,5,21,9
	.half	.L262-.L183
	.byte	1,5,23,9
	.half	.L347-.L262
	.byte	3,1,1,5,21,9
	.half	.L348-.L347
	.byte	1,4,3,5,19,9
	.half	.L185-.L348
	.byte	3,141,5,1,5,28,9
	.half	.L264-.L185
	.byte	3,1,1,5,5,9
	.half	.L265-.L264
	.byte	1,4,1,5,13,9
	.half	.L15-.L265
	.byte	3,243,122,1,5,21,9
	.half	.L349-.L15
	.byte	1,5,5,9
	.half	.L350-.L349
	.byte	3,1,1,5,15,9
	.half	.L16-.L350
	.byte	3,51,1,5,5,9
	.half	.L179-.L16
	.byte	3,1,1,9
	.half	.L351-.L179
	.byte	3,1,1,9
	.half	.L352-.L351
	.byte	3,1,1,9
	.half	.L353-.L352
	.byte	3,1,1,5,1,9
	.half	.L354-.L353
	.byte	3,1,1,7,9
	.half	.L79-.L354
	.byte	0,1,1
.L343:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_ranges'
.L78:
	.word	-1,.L38,0,.L79-.L38,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_info'
.L80:
	.word	427
	.half	3
	.word	.L81
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L83,.L82
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_assertion',0,1,184,1,6,1,1,1
	.word	.L40,.L187,.L39
	.byte	4
	.byte	'tin',0,1,184,1,35
	.word	.L111,.L188
	.byte	5
	.word	.L40,.L187
	.byte	6
	.byte	'trapWatch',0,1,186,1,26
	.word	.L189,.L190
	.byte	7
	.word	.L115,.L191,.L192
	.byte	8
	.word	.L118,.L193
	.byte	8
	.word	.L120,.L194
	.byte	9
	.word	.L122,.L191,.L192
	.byte	6
	.byte	'trapInfo',0,1,120,17
	.word	.L123,.L195
	.byte	7
	.word	.L125,.L191,.L196
	.byte	9
	.word	.L127,.L191,.L196
	.byte	6
	.byte	'res',0,2,222,2,19
	.word	.L128,.L197
	.byte	0,0,7
	.word	.L130,.L198,.L18
	.byte	9
	.word	.L132,.L198,.L18
	.byte	6
	.byte	'reg',0,3,135,6,21
	.word	.L133,.L199
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_abbrev'
.L81:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_line'
.L82:
	.word	.L356-.L355
.L355:
	.half	3
	.word	.L358-.L357
.L357:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L358:
	.byte	5,6,7,0,5,2
	.word	.L40
	.byte	3,183,1,1,4,2,5,5,9
	.half	.L191-.L40
	.byte	3,167,1,1,9
	.half	.L359-.L191
	.byte	3,1,1,4,1,5,45,9
	.half	.L17-.L359
	.byte	3,153,126,1,5,13,9
	.half	.L196-.L17
	.byte	3,1,1,5,21,9
	.half	.L267-.L196
	.byte	1,5,23,9
	.half	.L360-.L267
	.byte	3,1,1,5,21,9
	.half	.L361-.L360
	.byte	1,4,3,5,19,9
	.half	.L198-.L361
	.byte	3,141,5,1,5,28,9
	.half	.L269-.L198
	.byte	3,1,1,5,5,9
	.half	.L270-.L269
	.byte	1,4,1,5,13,9
	.half	.L18-.L270
	.byte	3,243,122,1,5,21,9
	.half	.L362-.L18
	.byte	1,5,5,9
	.half	.L363-.L362
	.byte	3,1,1,5,15,9
	.half	.L19-.L363
	.byte	3,62,1,5,5,9
	.half	.L192-.L19
	.byte	3,1,1,9
	.half	.L364-.L192
	.byte	3,1,1,9
	.half	.L365-.L364
	.byte	3,1,1,9
	.half	.L366-.L365
	.byte	3,1,1,5,1,9
	.half	.L367-.L366
	.byte	3,1,1,7,9
	.half	.L84-.L367
	.byte	0,1,1
.L356:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_ranges'
.L83:
	.word	-1,.L40,0,.L84-.L40,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_info'
.L85:
	.word	433
	.half	3
	.word	.L86
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L88,.L87
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu0',0,1,195,1,6,1,1,1
	.word	.L42,.L200,.L41
	.byte	4
	.byte	'tin',0,1,195,1,41
	.word	.L111,.L201
	.byte	5
	.word	.L42,.L200
	.byte	6
	.byte	'trapWatch',0,1,197,1,26
	.word	.L202,.L203
	.byte	7
	.word	.L115,.L204,.L205
	.byte	8
	.word	.L118,.L206
	.byte	8
	.word	.L120,.L207
	.byte	9
	.word	.L122,.L204,.L205
	.byte	6
	.byte	'trapInfo',0,1,120,17
	.word	.L123,.L208
	.byte	7
	.word	.L125,.L204,.L209
	.byte	9
	.word	.L127,.L204,.L209
	.byte	6
	.byte	'res',0,2,222,2,19
	.word	.L128,.L210
	.byte	0,0,7
	.word	.L130,.L211,.L21
	.byte	9
	.word	.L132,.L211,.L21
	.byte	6
	.byte	'reg',0,3,135,6,21
	.word	.L133,.L212
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_abbrev'
.L86:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_line'
.L87:
	.word	.L369-.L368
.L368:
	.half	3
	.word	.L371-.L370
.L370:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L371:
	.byte	5,6,7,0,5,2
	.word	.L42
	.byte	3,194,1,1,4,2,5,5,9
	.half	.L204-.L42
	.byte	3,156,1,1,9
	.half	.L372-.L204
	.byte	3,1,1,4,1,5,45,9
	.half	.L20-.L372
	.byte	3,153,126,1,5,13,9
	.half	.L209-.L20
	.byte	3,1,1,5,21,9
	.half	.L272-.L209
	.byte	1,5,23,9
	.half	.L373-.L272
	.byte	3,1,1,5,21,9
	.half	.L374-.L373
	.byte	1,4,3,5,19,9
	.half	.L211-.L374
	.byte	3,141,5,1,5,28,9
	.half	.L274-.L211
	.byte	3,1,1,5,5,9
	.half	.L275-.L274
	.byte	1,4,1,5,13,9
	.half	.L21-.L275
	.byte	3,243,122,1,5,21,9
	.half	.L375-.L21
	.byte	1,5,5,9
	.half	.L376-.L375
	.byte	3,1,1,5,15,9
	.half	.L22-.L376
	.byte	3,201,0,1,5,5,9
	.half	.L205-.L22
	.byte	3,1,1,9
	.half	.L377-.L205
	.byte	3,1,1,9
	.half	.L378-.L377
	.byte	3,1,1,5,1,9
	.half	.L379-.L378
	.byte	3,1,1,7,9
	.half	.L89-.L379
	.byte	0,1,1
.L369:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_ranges'
.L88:
	.word	-1,.L42,0,.L89-.L42,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_info'
.L90:
	.word	433
	.half	3
	.word	.L91
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L93,.L92
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_systemCall_Cpu1',0,1,205,1,6,1,1,1
	.word	.L44,.L213,.L43
	.byte	4
	.byte	'tin',0,1,205,1,41
	.word	.L111,.L214
	.byte	5
	.word	.L44,.L213
	.byte	6
	.byte	'trapWatch',0,1,207,1,26
	.word	.L215,.L216
	.byte	7
	.word	.L115,.L217,.L218
	.byte	8
	.word	.L118,.L219
	.byte	8
	.word	.L120,.L220
	.byte	9
	.word	.L122,.L217,.L218
	.byte	6
	.byte	'trapInfo',0,1,120,17
	.word	.L123,.L221
	.byte	7
	.word	.L125,.L217,.L222
	.byte	9
	.word	.L127,.L217,.L222
	.byte	6
	.byte	'res',0,2,222,2,19
	.word	.L128,.L223
	.byte	0,0,7
	.word	.L130,.L224,.L24
	.byte	9
	.word	.L132,.L224,.L24
	.byte	6
	.byte	'reg',0,3,135,6,21
	.word	.L133,.L225
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_abbrev'
.L91:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_line'
.L92:
	.word	.L381-.L380
.L380:
	.half	3
	.word	.L383-.L382
.L382:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L383:
	.byte	5,6,7,0,5,2
	.word	.L44
	.byte	3,204,1,1,4,2,5,5,9
	.half	.L217-.L44
	.byte	3,146,1,1,9
	.half	.L384-.L217
	.byte	3,1,1,4,1,5,45,9
	.half	.L23-.L384
	.byte	3,153,126,1,5,13,9
	.half	.L222-.L23
	.byte	3,1,1,5,21,9
	.half	.L277-.L222
	.byte	1,5,23,9
	.half	.L385-.L277
	.byte	3,1,1,5,21,9
	.half	.L386-.L385
	.byte	1,4,3,5,19,9
	.half	.L224-.L386
	.byte	3,141,5,1,5,28,9
	.half	.L279-.L224
	.byte	3,1,1,5,5,9
	.half	.L280-.L279
	.byte	1,4,1,5,13,9
	.half	.L24-.L280
	.byte	3,243,122,1,5,21,9
	.half	.L387-.L24
	.byte	1,5,5,9
	.half	.L388-.L387
	.byte	3,1,1,5,15,9
	.half	.L25-.L388
	.byte	3,211,0,1,5,5,9
	.half	.L218-.L25
	.byte	3,1,1,9
	.half	.L389-.L218
	.byte	3,1,1,9
	.half	.L390-.L389
	.byte	3,1,1,5,1,9
	.half	.L391-.L390
	.byte	3,1,1,7,9
	.half	.L94-.L391
	.byte	0,1,1
.L381:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_ranges'
.L93:
	.word	-1,.L44,0,.L94-.L44,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_info'
.L95:
	.word	438
	.half	3
	.word	.L96
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L98,.L97
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_nonMaskableInterrupt',0,1,131,2,6,1,1,1
	.word	.L46,.L226,.L45
	.byte	4
	.byte	'tin',0,1,131,2,46
	.word	.L111,.L227
	.byte	5
	.word	.L46,.L226
	.byte	6
	.byte	'trapWatch',0,1,133,2,26
	.word	.L228,.L229
	.byte	7
	.word	.L115,.L230,.L231
	.byte	8
	.word	.L118,.L232
	.byte	8
	.word	.L120,.L233
	.byte	9
	.word	.L122,.L230,.L231
	.byte	6
	.byte	'trapInfo',0,1,120,17
	.word	.L123,.L234
	.byte	7
	.word	.L125,.L230,.L235
	.byte	9
	.word	.L127,.L230,.L235
	.byte	6
	.byte	'res',0,2,222,2,19
	.word	.L128,.L236
	.byte	0,0,7
	.word	.L130,.L237,.L27
	.byte	9
	.word	.L132,.L237,.L27
	.byte	6
	.byte	'reg',0,3,135,6,21
	.word	.L133,.L238
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_abbrev'
.L96:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_line'
.L97:
	.word	.L393-.L392
.L392:
	.half	3
	.word	.L395-.L394
.L394:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L395:
	.byte	5,6,7,0,5,2
	.word	.L46
	.byte	3,130,2,1,4,2,5,5,9
	.half	.L230-.L46
	.byte	3,220,0,1,9
	.half	.L396-.L230
	.byte	3,1,1,4,1,5,45,9
	.half	.L26-.L396
	.byte	3,153,126,1,5,13,9
	.half	.L235-.L26
	.byte	3,1,1,5,21,9
	.half	.L282-.L235
	.byte	1,5,23,9
	.half	.L397-.L282
	.byte	3,1,1,5,21,9
	.half	.L398-.L397
	.byte	1,4,3,5,19,9
	.half	.L237-.L398
	.byte	3,141,5,1,5,28,9
	.half	.L284-.L237
	.byte	3,1,1,5,5,9
	.half	.L285-.L284
	.byte	1,4,1,5,13,9
	.half	.L27-.L285
	.byte	3,243,122,1,5,21,9
	.half	.L399-.L27
	.byte	1,5,5,9
	.half	.L400-.L399
	.byte	3,1,1,5,15,9
	.half	.L28-.L400
	.byte	3,137,1,1,5,5,9
	.half	.L231-.L28
	.byte	3,1,1,9
	.half	.L401-.L231
	.byte	3,1,1,9
	.half	.L402-.L401
	.byte	3,1,1,5,1,9
	.half	.L403-.L402
	.byte	3,1,1,7,9
	.half	.L99-.L403
	.byte	0,1,1
.L393:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_ranges'
.L98:
	.word	-1,.L46,0,.L99-.L46,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_info'
.L100:
	.word	232
	.half	3
	.word	.L101
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L103,.L102
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_vectorTable0',0,1,158,2,6,1,1,1
	.word	.L48,.L239,.L47
	.byte	4
	.word	.L48,.L239
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_abbrev'
.L101:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_line'
.L102:
	.word	.L405-.L404
.L404:
	.half	3
	.word	.L407-.L406
.L406:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L407:
	.byte	5,5,7,0,5,2
	.word	.L48
	.byte	3,159,2,1,9
	.half	.L408-.L48
	.byte	3,1,1,9
	.half	.L409-.L408
	.byte	3,1,1,9
	.half	.L410-.L409
	.byte	3,1,1,9
	.half	.L411-.L410
	.byte	3,1,1,9
	.half	.L412-.L411
	.byte	3,1,1,9
	.half	.L413-.L412
	.byte	3,1,1,9
	.half	.L414-.L413
	.byte	3,1,1,5,1,9
	.half	.L415-.L414
	.byte	3,1,1,7,9
	.half	.L104-.L415
	.byte	0,1,1
.L405:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_ranges'
.L103:
	.word	-1,.L48,0,.L104-.L48,0,0
	.sdecl	'.debug_info',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_info'
.L105:
	.word	232
	.half	3
	.word	.L106
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L108,.L107
	.byte	2
	.word	.L51
	.byte	3
	.byte	'IfxCpu_Trap_vectorTable1',0,1,187,2,6,1,1,1
	.word	.L50,.L240,.L49
	.byte	4
	.word	.L50,.L240
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_abbrev'
.L106:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_line'
.L107:
	.word	.L417-.L416
.L416:
	.half	3
	.word	.L419-.L418
.L418:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap\\IfxCpu_Trap.c',0,0,0,0,0
.L419:
	.byte	5,5,7,0,5,2
	.word	.L50
	.byte	3,188,2,1,9
	.half	.L420-.L50
	.byte	3,1,1,9
	.half	.L421-.L420
	.byte	3,1,1,9
	.half	.L422-.L421
	.byte	3,1,1,9
	.half	.L423-.L422
	.byte	3,1,1,9
	.half	.L424-.L423
	.byte	3,1,1,9
	.half	.L425-.L424
	.byte	3,1,1,9
	.half	.L426-.L425
	.byte	3,1,1,5,1,9
	.half	.L427-.L426
	.byte	3,1,1,7,9
	.half	.L109-.L427
	.byte	0,1,1
.L417:
	.sdecl	'.debug_ranges',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_ranges'
.L108:
	.word	-1,.L50,0,.L109-.L50,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_loc'
.L39:
	.word	-1,.L40,0,.L191-.L40
	.half	2
	.byte	138,0
	.word	.L191-.L40,.L187-.L40
	.half	2
	.byte	138,8
	.word	.L187-.L40,.L187-.L40
	.half	2
	.byte	138,0
	.word	0,0
.L199:
	.word	-1,.L40,.L269-.L40,.L270-.L40
	.half	1
	.byte	95
	.word	0,0
.L197:
	.word	-1,.L40,.L266-.L40,.L187-.L40
	.half	1
	.byte	111
	.word	0,0
.L194:
	.word	0,0
.L188:
	.word	-1,.L40,0,.L187-.L40
	.half	1
	.byte	84
	.word	0,0
.L193:
	.word	0,0
.L195:
	.word	-1,.L40,.L196-.L40,.L267-.L40
	.half	2
	.byte	144,33
	.word	.L268-.L40,.L187-.L40
	.half	2
	.byte	144,33
	.word	0,0
.L190:
	.word	-1,.L40,0,.L187-.L40
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_loc'
.L37:
	.word	-1,.L38,0,.L178-.L38
	.half	2
	.byte	138,0
	.word	.L178-.L38,.L174-.L38
	.half	2
	.byte	138,8
	.word	.L174-.L38,.L174-.L38
	.half	2
	.byte	138,0
	.word	0,0
.L186:
	.word	-1,.L38,.L264-.L38,.L265-.L38
	.half	1
	.byte	95
	.word	0,0
.L184:
	.word	-1,.L38,.L261-.L38,.L174-.L38
	.half	1
	.byte	111
	.word	0,0
.L181:
	.word	0,0
.L175:
	.word	-1,.L38,0,.L174-.L38
	.half	1
	.byte	84
	.word	0,0
.L180:
	.word	0,0
.L182:
	.word	-1,.L38,.L183-.L38,.L262-.L38
	.half	2
	.byte	144,33
	.word	.L263-.L38,.L174-.L38
	.half	2
	.byte	144,33
	.word	0,0
.L177:
	.word	-1,.L38,0,.L174-.L38
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_loc'
.L35:
	.word	-1,.L36,0,.L165-.L36
	.half	2
	.byte	138,0
	.word	.L165-.L36,.L161-.L36
	.half	2
	.byte	138,8
	.word	.L161-.L36,.L161-.L36
	.half	2
	.byte	138,0
	.word	0,0
.L173:
	.word	-1,.L36,.L259-.L36,.L260-.L36
	.half	1
	.byte	95
	.word	0,0
.L171:
	.word	-1,.L36,.L256-.L36,.L161-.L36
	.half	1
	.byte	111
	.word	0,0
.L168:
	.word	0,0
.L162:
	.word	-1,.L36,0,.L161-.L36
	.half	1
	.byte	84
	.word	0,0
.L167:
	.word	0,0
.L169:
	.word	-1,.L36,.L170-.L36,.L257-.L36
	.half	2
	.byte	144,33
	.word	.L258-.L36,.L161-.L36
	.half	2
	.byte	144,33
	.word	0,0
.L164:
	.word	-1,.L36,0,.L161-.L36
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_loc'
.L33:
	.word	-1,.L34,0,.L152-.L34
	.half	2
	.byte	138,0
	.word	.L152-.L34,.L148-.L34
	.half	2
	.byte	138,8
	.word	.L148-.L34,.L148-.L34
	.half	2
	.byte	138,0
	.word	0,0
.L160:
	.word	-1,.L34,.L254-.L34,.L255-.L34
	.half	1
	.byte	95
	.word	0,0
.L158:
	.word	-1,.L34,.L251-.L34,.L148-.L34
	.half	1
	.byte	111
	.word	0,0
.L155:
	.word	0,0
.L149:
	.word	-1,.L34,0,.L148-.L34
	.half	1
	.byte	84
	.word	0,0
.L154:
	.word	0,0
.L156:
	.word	-1,.L34,.L157-.L34,.L252-.L34
	.half	2
	.byte	144,33
	.word	.L253-.L34,.L148-.L34
	.half	2
	.byte	144,33
	.word	0,0
.L151:
	.word	-1,.L34,0,.L148-.L34
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_loc'
.L31:
	.word	-1,.L32,0,.L139-.L32
	.half	2
	.byte	138,0
	.word	.L139-.L32,.L135-.L32
	.half	2
	.byte	138,8
	.word	.L135-.L32,.L135-.L32
	.half	2
	.byte	138,0
	.word	0,0
.L147:
	.word	-1,.L32,.L249-.L32,.L250-.L32
	.half	1
	.byte	95
	.word	0,0
.L145:
	.word	-1,.L32,.L246-.L32,.L135-.L32
	.half	1
	.byte	111
	.word	0,0
.L142:
	.word	0,0
.L136:
	.word	-1,.L32,0,.L135-.L32
	.half	1
	.byte	84
	.word	0,0
.L141:
	.word	0,0
.L143:
	.word	-1,.L32,.L144-.L32,.L247-.L32
	.half	2
	.byte	144,33
	.word	.L248-.L32,.L135-.L32
	.half	2
	.byte	144,33
	.word	0,0
.L138:
	.word	-1,.L32,0,.L135-.L32
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_loc'
.L29:
	.word	-1,.L30,0,.L116-.L30
	.half	2
	.byte	138,0
	.word	.L116-.L30,.L110-.L30
	.half	2
	.byte	138,8
	.word	.L110-.L30,.L110-.L30
	.half	2
	.byte	138,0
	.word	0,0
.L134:
	.word	-1,.L30,.L244-.L30,.L245-.L30
	.half	1
	.byte	95
	.word	0,0
.L129:
	.word	-1,.L30,.L241-.L30,.L110-.L30
	.half	1
	.byte	111
	.word	0,0
.L121:
	.word	0,0
.L112:
	.word	-1,.L30,0,.L110-.L30
	.half	1
	.byte	84
	.word	0,0
.L119:
	.word	0,0
.L124:
	.word	-1,.L30,.L126-.L30,.L242-.L30
	.half	2
	.byte	144,33
	.word	.L243-.L30,.L110-.L30
	.half	2
	.byte	144,33
	.word	0,0
.L114:
	.word	-1,.L30,0,.L110-.L30
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_loc'
.L45:
	.word	-1,.L46,0,.L230-.L46
	.half	2
	.byte	138,0
	.word	.L230-.L46,.L226-.L46
	.half	2
	.byte	138,8
	.word	.L226-.L46,.L226-.L46
	.half	2
	.byte	138,0
	.word	0,0
.L238:
	.word	-1,.L46,.L284-.L46,.L285-.L46
	.half	1
	.byte	95
	.word	0,0
.L236:
	.word	-1,.L46,.L281-.L46,.L226-.L46
	.half	1
	.byte	111
	.word	0,0
.L233:
	.word	0,0
.L227:
	.word	-1,.L46,0,.L226-.L46
	.half	1
	.byte	84
	.word	0,0
.L232:
	.word	0,0
.L234:
	.word	-1,.L46,.L235-.L46,.L282-.L46
	.half	2
	.byte	144,33
	.word	.L283-.L46,.L226-.L46
	.half	2
	.byte	144,33
	.word	0,0
.L229:
	.word	-1,.L46,0,.L226-.L46
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_loc'
.L41:
	.word	-1,.L42,0,.L204-.L42
	.half	2
	.byte	138,0
	.word	.L204-.L42,.L200-.L42
	.half	2
	.byte	138,8
	.word	.L200-.L42,.L200-.L42
	.half	2
	.byte	138,0
	.word	0,0
.L212:
	.word	-1,.L42,.L274-.L42,.L275-.L42
	.half	1
	.byte	95
	.word	0,0
.L210:
	.word	-1,.L42,.L271-.L42,.L200-.L42
	.half	1
	.byte	111
	.word	0,0
.L207:
	.word	0,0
.L201:
	.word	-1,.L42,0,.L200-.L42
	.half	1
	.byte	84
	.word	0,0
.L206:
	.word	0,0
.L208:
	.word	-1,.L42,.L209-.L42,.L272-.L42
	.half	2
	.byte	144,33
	.word	.L273-.L42,.L200-.L42
	.half	2
	.byte	144,33
	.word	0,0
.L203:
	.word	-1,.L42,0,.L200-.L42
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_loc'
.L43:
	.word	-1,.L44,0,.L217-.L44
	.half	2
	.byte	138,0
	.word	.L217-.L44,.L213-.L44
	.half	2
	.byte	138,8
	.word	.L213-.L44,.L213-.L44
	.half	2
	.byte	138,0
	.word	0,0
.L225:
	.word	-1,.L44,.L279-.L44,.L280-.L44
	.half	1
	.byte	95
	.word	0,0
.L223:
	.word	-1,.L44,.L276-.L44,.L213-.L44
	.half	1
	.byte	111
	.word	0,0
.L220:
	.word	0,0
.L214:
	.word	-1,.L44,0,.L213-.L44
	.half	1
	.byte	84
	.word	0,0
.L219:
	.word	0,0
.L221:
	.word	-1,.L44,.L222-.L44,.L277-.L44
	.half	2
	.byte	144,33
	.word	.L278-.L44,.L213-.L44
	.half	2
	.byte	144,33
	.word	0,0
.L216:
	.word	-1,.L44,0,.L213-.L44
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_loc'
.L47:
	.word	-1,.L48,0,.L239-.L48
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_loc'
.L49:
	.word	-1,.L50,0,.L240-.L50
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L428:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_memoryManagementError')
	.sect	'.debug_frame'
	.word	48
	.word	.L428,.L30,.L110-.L30
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L116-.L30)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L110-.L116)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_internalProtectionError')
	.sect	'.debug_frame'
	.word	48
	.word	.L428,.L32,.L135-.L32
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L139-.L32)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L135-.L139)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_instructionError')
	.sect	'.debug_frame'
	.word	48
	.word	.L428,.L34,.L148-.L34
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L152-.L34)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L148-.L152)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_contextManagementError')
	.sect	'.debug_frame'
	.word	48
	.word	.L428,.L36,.L161-.L36
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L165-.L36)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L161-.L165)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_busError')
	.sect	'.debug_frame'
	.word	48
	.word	.L428,.L38,.L174-.L38
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L178-.L38)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L174-.L178)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_assertion')
	.sect	'.debug_frame'
	.word	48
	.word	.L428,.L40,.L187-.L40
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L191-.L40)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L187-.L191)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu0')
	.sect	'.debug_frame'
	.word	48
	.word	.L428,.L42,.L200-.L42
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L204-.L42)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L200-.L204)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_systemCall_Cpu1')
	.sect	'.debug_frame'
	.word	48
	.word	.L428,.L44,.L213-.L44
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L217-.L44)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L213-.L217)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_nonMaskableInterrupt')
	.sect	'.debug_frame'
	.word	48
	.word	.L428,.L46,.L226-.L46
	.byte	8,18,8,19,8,20,8,21,8,22,8,23,4
	.word	(.L230-.L46)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L226-.L230)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_vectorTable0')
	.sect	'.debug_frame'
	.word	24
	.word	.L428,.L48,.L239-.L48
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxCpu_Trap_vectorTable1')
	.sect	'.debug_frame'
	.word	24
	.word	.L428,.L50,.L240-.L50
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   326  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   327  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   328  #if IFXCPU_NUM_MODULES >= 3
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   329  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   330  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   331  #pragma section ".traptab_cpu2" awx
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   332  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   333  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   334  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   335  #pragma section CODE ".traptab_cpu2" X
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   336  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   337  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   338  #pragma section code "traptab_cpu2"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   339  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   340  #if defined(__ghs__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   341  #pragma ghs section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   342  #pragma ghs section text=".traptab_cpu2"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   343  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   344  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   345  void IfxCpu_Trap_vectorTable2(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   346  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   347      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   348      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   349      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   350      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   351      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   352      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   353      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   354      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   355  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   356  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   357  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   358  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   359  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   360  #if IFXCPU_NUM_MODULES >= 4
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   361  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   362  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   363  #pragma section ".traptab_cpu3" awx
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   364  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   365  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   366  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   367  #pragma section CODE ".traptab_cpu3" X
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   368  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   369  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   370  #pragma section code "traptab_cpu3"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   371  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   372  #if defined(__ghs__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   373  #pragma ghs section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   374  #pragma ghs section text=".traptab_cpu3"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   375  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   376  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   377  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   378  void IfxCpu_Trap_vectorTable3(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   379  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   380      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   381      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   382      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   383      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   384      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   385      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   386      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu3);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   387      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   388  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   389  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   390  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   391  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   392  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   393  #if IFXCPU_NUM_MODULES >= 5
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   394  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   395  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   396  #pragma section ".traptab_cpu4" awx
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   397  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   398  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   399  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   400  #pragma section CODE ".traptab_cpu4" X
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   401  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   402  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   403  #pragma section code "traptab_cpu4"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   404  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   405  #if defined(__ghs__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   406  #pragma ghs section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   407  #pragma ghs section text=".traptab_cpu4"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   408  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   409  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   410  void IfxCpu_Trap_vectorTable4(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   411  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   412      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   413      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   414      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   415      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   416      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   417      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   418      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu4);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   419      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   420  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   422  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   423  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   424  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   425  #if IFXCPU_NUM_MODULES >= 6
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   426  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   427  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   428  #pragma section ".traptab_cpu5" awx
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   429  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   430  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   431  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   432  #pragma section CODE ".traptab_cpu5" X
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   433  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   434  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   435  #pragma section code "traptab_cpu5"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   436  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   437  #if defined(__ghs__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   438  #pragma ghs section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   439  #pragma ghs section text=".traptab_cpu5"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   440  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   441  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   442  void IfxCpu_Trap_vectorTable5(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   443  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   444      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   445      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   446      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   447      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_contextManagementError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   448      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   449      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   450      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu5);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   451      IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   452  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   453  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   454  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   455  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   456  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   457  #if defined(__HIGHTEC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   458  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   459  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   460  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   461  #pragma section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   462  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   463  #if defined(__DCC__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   464  #pragma interrupt IfxInterruptEx
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   465  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   466  #if defined(__TASKING__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   467  #pragma endprotect
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   468  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   469  #if defined(__ghs__)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   470  #pragma ghs section
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Cpu\Trap\IfxCpu_Trap.c	   471  #endif

	; Module end
