	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 99277908"
	.compiler_invocation	"ctc --dep-file=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\.IfxMtu.o.d --fp-model=c,f,l,n,r,S,T,z -D__CPU__=tc26x -D__CPU_TC26X__ --core=tc1.6.x --iso=99 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\CODE -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Build -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\DataHandling -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Lib\\InternalMux -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_PinMap -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Asc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Lin -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Spi -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Asclin\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Icu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmBc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\PwmHl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TimerWithTrigger -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Ccu6\\TPwm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Cam -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cif\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\CStart -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Irq -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Trap -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Dma -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dma\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Dsadc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Rdc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dsadc\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Dts -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Dts\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Emem\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Eray -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eray\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Phy_Pef7071 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Eth\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Crc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fce\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Fft -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Fft\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Flash\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\IncrEnc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gpt12\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Pwm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\PwmHl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Atom\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tim\\In -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Pwm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\PwmHl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Tom\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Gtm\\Trig -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Hssl -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Hssl\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\I2c -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\I2c\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Driver -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Iom\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Msc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Msc\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Can -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Multican\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Io -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Psi5 -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Psi5s -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Psi5s\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiMaster -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\SpiSlave -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Qspi\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Sent -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Sent\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Smu\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Src\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Stm\\Timer -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Adc -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Vadc\\Std -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Platform -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Platform\\Tricore -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Platform\\Tricore\\Compilers -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Service -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Service\\CpuGeneric -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\seekfree_libraries -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\seekfree_libraries\\common -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\seekfree_peripheral -IG:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\USER -g2 -wW557 --make-target=Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.o -t0 --language=-gcc,-volatile,+strings,-kanji --default-near-size=0 -O0 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto --error-limit=42 -o Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.src ..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c"
	.compiler_name		"ctc"
	;source	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c'

	
$TC16X
	
	.sdecl	'.text.IfxMtu.IfxMtu_clearErrorTracking',code,cluster('IfxMtu_clearErrorTracking')
	.sect	'.text.IfxMtu.IfxMtu_clearErrorTracking'
	.align	2
	
	.global	IfxMtu_clearErrorTracking

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	     2   * \file IfxMtu.c
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	     4   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	     5   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	     7   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	     9   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    10   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    13   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    15   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    16  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    18   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    19  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    20   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    21   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    22   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    23   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    24   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    25   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    26  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    27   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    28   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    29   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    30   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    31   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    32   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    33  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    34   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    35   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    36   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    37   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    38   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    39   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    40   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    41  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    42   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    44   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    45  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    46  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    47  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    48  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    49  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    50  #include "IfxMtu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    51  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    52  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    53   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    54  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    55  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    56  /*-----------------------Private Function Prototypes--------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    57  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    58  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    59  /** \brief API to wait for requested tower depth.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    60   * \param towerDepth tower depth of MBIST Ram
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    61   * \param numInstructions number of instructions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    62   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    63   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    64   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    65  IFX_STATIC void IfxMtu_waitForMbistDone(uint32 towerDepth, uint8 numInstructions, IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    66  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    67  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    68  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    69  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    70  /*-------------------------Function Implementations---------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    71  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    72  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    73  void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_clearErrorTracking
.L107:
IfxMtu_clearErrorTracking:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    74  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    75      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	mov	d15,#256
.L714:
	mul	d4,d15
.L345:
	mov	d15,#4096
	addih	d15,d15,#61446
.L346:
	add	d4,d15
.L715:
	mov.a	a15,d4
.L347:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    76      mc->ECCD.U |= (1 << IFX_MC_ECCD_TRC_OFF);
	ld.hu	d15,[a15]16
.L716:
	or	d15,#16
	st.h	[a15]16,d15
.L717:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    77  }
	ret
.L306:
	
__IfxMtu_clearErrorTracking_function_end:
	.size	IfxMtu_clearErrorTracking,__IfxMtu_clearErrorTracking_function_end-IfxMtu_clearErrorTracking
.L166:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_clearSram',code,cluster('IfxMtu_clearSram')
	.sect	'.text.IfxMtu.IfxMtu_clearSram'
	.align	2
	
	.global	IfxMtu_clearSram

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    78  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    79  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    80  void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel)
; Function IfxMtu_clearSram
.L109:
IfxMtu_clearSram:	.type	func
	mov	d8,d4
.L349:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    81  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    82      uint8  isEndInitEnabled = 0;
	mov	d9,#0
.L350:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    83      uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    84  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    85      password = IfxScuWdt_getSafetyWatchdogPassword();
	call	IfxScuWdt_getSafetyWatchdogPassword
.L348:
	mov	d10,d2
.L195:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
	movh.a	a15,#61443
	ld.w	d15,[a15]@los(0xf00360f0)
	and	d15,#1
.L530:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;      (inlined)
	j	.L2

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }      (inlined)
.L2:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    86  ally inside teh function.*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    87      if (IfxScuWdt_getSafetyWatchdogEndInit() == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    88      {
	jne	d15,#1,.L3
.L531:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    89          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    90          IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    91          isEndInitEnabled = 1;
	mov	d4,d10
.L351:
	call	IfxScuWdt_clearSafetyEndinit
.L352:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    92      }
	mov	d9,#1
.L3:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    93  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    94      IfxMtu_clearSramStart(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    95  
	mov	d4,d8
.L353:
	call	IfxMtu_clearSramStart
.L354:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    96      /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    97      IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    98  
	mov	d4,d10
.L355:
	call	IfxScuWdt_setSafetyEndinit
.L356:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	    99      /* wait for the end of the fill operation */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   100      IfxMtu_waitForMbistDone(IfxMtu_sramTable[mbistSel].mbistDelay, 1, mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   101      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (((Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel))->MSTATUS.B.DONE != 0));
	mul	d15,d8,#12
.L532:
	movh.a	a15,#@his(IfxMtu_sramTable)
	lea	a15,[a15]@los(IfxMtu_sramTable)
.L533:
	addsc.a	a15,a15,d15,#0
.L534:
	ld.w	d4,[a15]8
.L535:
	mov	d5,#1
.L536:
	mov	d6,d8
.L357:
	call	IfxMtu_waitForMbistDone
.L358:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   102  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   103      while (!IfxMtu_isMbistDone(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   104      {
	j	.L4
.L5:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   105          __nop();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   106      }
	nop
.L4:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   504  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   505  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   506  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   507  IFX_INLINE void IfxMtu_enableModule(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   508  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   509      uint8 isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   510  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   511      if (IfxScuWdt_getCpuWatchdogEndInit() == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   512      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   513          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   514          IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   515          isEndInitEnabled = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   516      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   517  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   518      /* MTU clock enable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   519      MTU_CLC.U = 0x0U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   520  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   521      if (isEndInitEnabled == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   522      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   523          IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   524      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   525  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   526  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   527  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   528  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   529  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   530      volatile uint32 *mtuMemstat = (volatile uint32 *)((uint32)&MTU_MEMSTAT0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   531      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   533  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   535  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   536  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   537  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   538      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   539      return mc->ECCS.B.TRE ? TRUE : FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   540  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   541  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   542  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   543  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   544  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   545      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   546      return mc->ECCD.B.EOV ? TRUE : FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   547  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   548  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   549  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   550  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   551  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   552      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	mov	d0,#256
.L537:
	mul	d0,d8
.L538:
	mov	d15,#4096
	addih	d15,d15,#61446
.L359:
	add	d0,d15
.L539:
	mov.a	a15,d0
.L361:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   553      uint16  status;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   554  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   555      status = mc->MSTATUS.U;
	ld.hu	d15,[a15]6
.L362:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   556      return (boolean)(status & 0x01);
	and	d15,#1
.L363:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   556      return (boolean)(status & 0x01);      (inlined)
	j	.L6

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   557  }      (inlined)
.L6:
	jeq	d15,#0,.L5
.L540:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   107   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   108      IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   109  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   110      IfxMtu_clearSramContinue(mbistSel);
	mov	d4,d10
.L364:
	call	IfxScuWdt_clearSafetyEndinit
.L360:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   111  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   112      if (isEndInitEnabled == 1)
	mov	d4,d8
.L365:
	call	IfxMtu_clearSramContinue
.L366:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   113      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   114          /* Set EndInit Watchdog (to prevent Watchdog TO)*/
	jne	d9,#1,.L7
.L541:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   115          IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   116      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   117  }
	mov	d4,d10
.L367:
	call	IfxScuWdt_setSafetyEndinit
.L7:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   118  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   119  
	ret
.L187:
	
__IfxMtu_clearSram_function_end:
	.size	IfxMtu_clearSram,__IfxMtu_clearSram_function_end-IfxMtu_clearSram
.L136:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_clearSramContinue',code,cluster('IfxMtu_clearSramContinue')
	.sect	'.text.IfxMtu.IfxMtu_clearSramContinue'
	.align	2
	
	.global	IfxMtu_clearSramContinue

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   120  void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   121  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   122      /* Before clearing the ECC error flags we've to issue a dummy SRAM access to get a valid memory output */
; Function IfxMtu_clearSramContinue
.L111:
IfxMtu_clearSramContinue:	.type	func
	mov	d8,d4
.L368:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   123      IfxMtu_readSramAddress(mbistSel, 0x0000);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   124      /* Note: a SMU alarm will be flagged HERE if the wrong ECC has been written! */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   125      IfxMtu_disableMbistShell(mbistSel);
	mov	d5,#0
	mov	d4,d8
	call	IfxMtu_readSramAddress
.L207:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
	sha	d0,d8,#-5
.L546:
	mul	d0,d0,#4
.L547:
	mov	d1,#16
	addih	d1,d1,#61446
.L369:
	add	d0,d1
.L548:
	mov.a	a15,d0
.L371:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
	mov	d0,#1
.L370:
	and	d15,d8,#31
.L549:
	sha	d0,d0,d15
.L372:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
	ld.w	d15,[a15]
.L550:
	mov	d1,#-1
	xor	d0,d1
.L373:
	and	d15,d0
	st.w	[a15],d15
.L208:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   126  it memories: wait for the end of the clear operation */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   127      while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   128      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   129  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   130  
	j	.L8
.L9:
.L8:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   504  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   505  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   506  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   507  IFX_INLINE void IfxMtu_enableModule(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   508  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   509      uint8 isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   510  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   511      if (IfxScuWdt_getCpuWatchdogEndInit() == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   512      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   513          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   514          IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   515          isEndInitEnabled = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   516      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   517  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   518      /* MTU clock enable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   519      MTU_CLC.U = 0x0U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   520  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   521      if (isEndInitEnabled == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   522      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   523          IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   524      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   525  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   526  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   527  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   528  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   529  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   530      volatile uint32 *mtuMemstat = (volatile uint32 *)((uint32)&MTU_MEMSTAT0 + 4 * (mbistSel >> 5));
	sha	d15,d8,#-5
.L551:
	mul	d15,d15,#4
.L552:
	mov	d0,#56
	addih	d0,d0,#61446
.L374:
	add	d15,d0
.L553:
	mov.a	a15,d15
.L376:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   531      uint32           mask       = 1 << (mbistSel & 0x1f);
	mov	d0,#1
.L554:
	and	d15,d8,#31
.L375:
	sha	d0,d0,d15
.L377:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;
	ld.w	d15,[a15]
.L555:
	and	d15,d0
.L556:
	ne	d15,d15,#0
.L557:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;      (inlined)
	j	.L10

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   533  }      (inlined)
.L10:
	jne	d15,#0,.L9
.L558:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   131   IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   132  {
	ret
.L204:
	
__IfxMtu_clearSramContinue_function_end:
	.size	IfxMtu_clearSramContinue,__IfxMtu_clearSramContinue_function_end-IfxMtu_clearSramContinue
.L141:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_clearSramStart',code,cluster('IfxMtu_clearSramStart')
	.sect	'.text.IfxMtu.IfxMtu_clearSramStart'
	.align	2
	
	.global	IfxMtu_clearSramStart

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   133      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   134  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   135      IfxMtu_enableMbistShell(mbistSel);
; Function IfxMtu_clearSramStart
.L113:
IfxMtu_clearSramStart:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   136  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   137      /* for auto-init memories: wait for the end of the clear operation */
	mov	d15,#256
.L563:
	mul	d15,d4
.L564:
	mov	d0,#4096
	addih	d0,d0,#61446
.L379:
	add	d15,d0
.L565:
	mov.a	a2,d15
.L226:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
	sha	d15,d4,#-5
.L380:
	mul	d15,d15,#4
.L566:
	mov	d0,#16
	addih	d0,d0,#61446
.L381:
	add	d15,d0
.L567:
	mov.a	a15,d15
.L383:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
	mov	d0,#1
.L568:
	and	d15,d4,#31
.L382:
	sha	d0,d0,d15
.L384:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
	ld.w	d15,[a15]
.L569:
	or	d15,d0
	st.w	[a15],d15
.L227:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   138  le (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   139      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   140  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   141      /* write valid ECC code for all-zero data into RDBFL registers */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   142      {
	j	.L11
.L12:
.L11:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   504  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   505  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   506  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   507  IFX_INLINE void IfxMtu_enableModule(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   508  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   509      uint8 isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   510  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   511      if (IfxScuWdt_getCpuWatchdogEndInit() == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   512      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   513          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   514          IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   515          isEndInitEnabled = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   516      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   517  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   518      /* MTU clock enable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   519      MTU_CLC.U = 0x0U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   520  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   521      if (isEndInitEnabled == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   522      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   523          IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   524      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   525  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   526  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   527  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   528  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   529  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   530      volatile uint32 *mtuMemstat = (volatile uint32 *)((uint32)&MTU_MEMSTAT0 + 4 * (mbistSel >> 5));
	sha	d15,d4,#-5
.L570:
	mul	d15,d15,#4
.L571:
	mov	d0,#56
	addih	d0,d0,#61446
.L385:
	add	d15,d0
.L572:
	mov.a	a15,d15
.L387:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   531      uint32           mask       = 1 << (mbistSel & 0x1f);
	mov	d0,#1
.L573:
	and	d15,d4,#31
.L386:
	sha	d0,d0,d15
.L389:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;
	ld.w	d15,[a15]
.L574:
	and	d15,d0
.L575:
	ne	d15,d15,#0
.L576:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;      (inlined)
	j	.L13

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   533  }      (inlined)
.L13:
	jne	d15,#0,.L12
.L236:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   143     IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mbistSel < IFXMTU_NUM_MBIST_TABLE_ITEMS);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   144          const IfxMtu_SramItem *item      = (IfxMtu_SramItem *)&IfxMtu_sramTable[mbistSel];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   145  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   146          uint8                  numBlocks = item->numBlocks;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   147          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, numBlocks > 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   148  
	mul	d15,d4,#12
.L577:
	movh.a	a15,#@his(IfxMtu_sramTable)
.L388:
	lea	a15,[a15]@los(IfxMtu_sramTable)
.L578:
	addsc.a	a15,a15,d15,#0
.L391:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   149          uint16                 dataSize   = item->dataSize;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   150          uint8                  eccSize    = item->eccSize;
	ld.bu	d8,[a15]
.L240:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   151          uint32                 eccInvPos0 = dataSize + item->eccInvPos0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   152          uint32                 eccInvPos1 = dataSize + item->eccInvPos1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   153  
	ld.hu	d0,[a15]2
.L390:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   154          uint32                 memSize    = dataSize + eccSize;
	ld.bu	d1,[a15]4
.L393:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   155  
	ld.bu	d15,[a15]5
.L579:
	add	d2,d15,d0
.L395:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   156          uint32                 bitPos     = 0;
	ld.bu	d15,[a15]6
.L580:
	add	d3,d15,d0
.L396:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   157          uint32                 wordIx     = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   158          uint16                 data       = 0;
	add	d0,d1
.L392:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   159          /* de-serialize data stream into 16bit packets */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   160          uint32                 mem;
	mov	d1,#0
.L394:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   161  
	mov	d4,#0
.L378:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   162          for (mem = 0; mem < numBlocks; ++mem)
	mov	d5,#0
.L398:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   163          {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   164              uint32 i;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   165  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   166              for (i = 0; i < memSize; ++i)
	mov	d6,#0
.L399:
	j	.L14
.L15:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   167              {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   168                  if ((i == eccInvPos0) || (i == eccInvPos1))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   169                  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   170                      data |= (1 << bitPos);
	mov	d7,#0
.L400:
	j	.L16
.L17:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   171                  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   172  
	jeq	d7,d2,.L18
.L581:
	jne	d7,d3,.L19
.L18:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   173                  ++bitPos;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   174  
	mov	d15,#1
.L582:
	sha	d15,d15,d1
.L583:
	or	d5,d15
.L19:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   175                  if (bitPos >= 16)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   176                  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   177                      mc->RDBFL[wordIx++].U = data;
	add	d1,#1
.L584:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   178                      bitPos                = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   179                      data                  = 0;
	mov	d15,#16
.L585:
	jlt.u	d1,d15,.L20
.L586:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   180                  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   181              }
	mul	d15,d4,#2
	addsc.a	a15,a2,d15,#0
.L587:
	st.h	[a15]160,d5
.L588:
	add	d4,#1
.L589:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   182          }
	mov	d1,#0
.L590:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   183  
	mov	d5,#0
.L20:
	add	d7,#1
.L16:
	jlt.u	d7,d0,.L17
.L250:
	add	d6,#1
.L14:
	jlt.u	d6,d8,.L15
.L591:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   184          /* final word? */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   185          if (bitPos != 0)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   186          {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   187              mc->RDBFL[wordIx].U = data;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   188          }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   189      }
	jeq	d1,#0,.L21
.L592:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   190  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   191      /* start fill operation */
	mul	d15,d4,#2
	addsc.a	a15,a2,d15,#0
.L593:
	st.h	[a15]160,d5
.L21:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   192      uint16 mcontrolMask = 0x4000;                                                                        /* set USERED flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   193      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DINIT_OFF) | (1 << IFX_MC_MCONTROL_START_OFF); /* START = DINIT = 1 */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   194      mc->MCONTROL.U = mcontrolMask | (0 << IFX_MC_MCONTROL_DINIT_OFF) | (1 << IFX_MC_MCONTROL_DINIT_OFF); /* START = 0 */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   195  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   196  
	mov	d0,#16384
.L397:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   197  
	or	d15,d0,#16
.L594:
	or	d15,#1
.L595:
	st.h	[a2]4,d15
.L596:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   198  void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable)
	or	d15,d0,#16
.L597:
	st.h	[a2]4,d15
.L598:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   199  {
	ret
.L222:
	
__IfxMtu_clearSramStart_function_end:
	.size	IfxMtu_clearSramStart,__IfxMtu_clearSramStart_function_end-IfxMtu_clearSramStart
.L146:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_enableErrorTracking',code,cluster('IfxMtu_enableErrorTracking')
	.sect	'.text.IfxMtu.IfxMtu_enableErrorTracking'
	.align	2
	
	.global	IfxMtu_enableErrorTracking

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   200      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   201  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   202      if (enable == FALSE)
; Function IfxMtu_enableErrorTracking
.L115:
IfxMtu_enableErrorTracking:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   203      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   204          mc->ECCS.U &= ~(1 << IFX_MC_ECCS_TRE_OFF);
	mov	d15,#256
.L722:
	mul	d4,d15
.L401:
	mov	d15,#4096
	addih	d15,d15,#61446
.L402:
	add	d4,d15
.L723:
	mov.a	a15,d4
.L403:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   205      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   206      else
	jne	d5,#0,.L22
.L724:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   207      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   208          mc->ECCS.U |= (1 << IFX_MC_ECCS_TRE_OFF);
	ld.hu	d15,[a15]14
.L725:
	insert	d15,d15,#0,#4,#1
	st.h	[a15]14,d15
.L726:
	j	.L23
.L22:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   209      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   210  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   211  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   212  
	ld.hu	d15,[a15]14
.L727:
	or	d15,#16
	st.h	[a15]14,d15
.L23:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   213  uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   214  {
	ret
.L309:
	
__IfxMtu_enableErrorTracking_function_end:
	.size	IfxMtu_enableErrorTracking,__IfxMtu_enableErrorTracking_function_end-IfxMtu_enableErrorTracking
.L171:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_getSystemAddress',code,cluster('IfxMtu_getSystemAddress')
	.sect	'.text.IfxMtu.IfxMtu_getSystemAddress'
	.align	2
	
	.global	IfxMtu_getSystemAddress

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   215      uint32 sramAddress   = trackedSramAddress.B.ADDR;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   216      uint32 mbi           = trackedSramAddress.B.MBI;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   217      uint32 systemAddress = 0;
; Function IfxMtu_getSystemAddress
.L117:
IfxMtu_getSystemAddress:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   218  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   219      switch (mbistSel)
	extr.u	d0,d5,#0,#13
.L404:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   220      {
	extr.u	d1,d5,#13,#3
.L406:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   221      case IfxMtu_MbistSel_cpu0Pspr:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   222          systemAddress = 0x70100000 | ((sramAddress << 3) | ((mbi & 1) << 2));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   223          break;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   224  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   225      case IfxMtu_MbistSel_cpu0Dspr:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   226          systemAddress = 0x70000000 | ((sramAddress << 4) | ((mbi & 3) << 2));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   227          break;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   228  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   229      case IfxMtu_MbistSel_cpu1Pspr:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   230          systemAddress = 0x60100000 | ((sramAddress << 4) | ((mbi & 1) << 3));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   231          break;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   232  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   233      case IfxMtu_MbistSel_cpu1Dspr:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   234          systemAddress = 0x60000000 | ((sramAddress << 4) | ((mbi & 3) << 2));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   235          break;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   236  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   237      case IfxMtu_MbistSel_dma:
	mov	d15,#6
	jeq	d15,d4,.L24
.L732:
	mov	d15,#9
	jeq	d15,d4,.L25
.L733:
	mov	d15,#14
	jeq	d15,d4,.L26
.L734:
	mov	d15,#16
	jeq	d15,d4,.L27
.L735:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   238          systemAddress = 0xf0012000 | ((sramAddress << 5) | ((mbi & 3) << 3));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   239          break;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   240  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   241      default:
	mov	d15,#83
	jeq	d15,d4,.L28
	j	.L29
.L27:
	sh	d0,#3
.L405:
	and	d15,d1,#1
.L736:
	sh	d15,#2
.L737:
	or	d0,d15
.L738:
	movh	d2,#28688
.L407:
	or	d2,d0
.L739:
	j	.L30
.L26:
	sh	d0,#4
.L408:
	and	d15,d1,#3
.L740:
	sh	d15,#2
.L741:
	or	d0,d15
.L742:
	insert	d2,d0,#7,#28,#3
.L409:
	j	.L31
.L25:
	sh	d0,#4
.L410:
	and	d15,d1,#1
.L743:
	sh	d15,#3
.L744:
	or	d0,d15
.L745:
	movh	d2,#24592
.L411:
	or	d2,d0
.L746:
	j	.L32
.L24:
	sh	d0,#4
.L412:
	and	d15,d1,#3
.L747:
	sh	d15,#2
.L748:
	or	d0,d15
.L749:
	insert	d2,d0,#3,#29,#2
.L413:
	j	.L33
.L28:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   242          systemAddress = 0; /* unsupported address descrambling */
	sh	d0,#5
.L414:
	and	d15,d1,#3
.L750:
	sh	d15,#3
.L751:
	or	d0,d15
.L752:
	mov	d2,#8192
	addih	d2,d2,#61441
.L415:
	or	d2,d0
.L753:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   243      }
	j	.L34

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   244  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   245      return systemAddress;
.L29:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   246  }
	mov	d2,#0

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   247  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   248  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   249  uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses)
.L34:
.L33:
.L32:
.L31:
.L30:
	j	.L35

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   250  {
.L35:
	ret
.L313:
	
__IfxMtu_getSystemAddress_function_end:
	.size	IfxMtu_getSystemAddress,__IfxMtu_getSystemAddress_function_end-IfxMtu_getSystemAddress
.L176:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_getTrackedSramAddresses',code,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.text.IfxMtu.IfxMtu_getTrackedSramAddresses'
	.align	2
	
	.global	IfxMtu_getTrackedSramAddresses

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   251      Ifx_MC *mc                  = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   252      uint8   validFlags          = (mc->ECCD.U >> IFX_MC_ECCD_VAL_OFF) & IFX_MC_ECCD_VAL_MSK;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   253      uint8   numTrackedAddresses = 0;
; Function IfxMtu_getTrackedSramAddresses
.L119:
IfxMtu_getTrackedSramAddresses:	.type	func

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   254      int     i;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   255  
	mov	d15,#256
.L758:
	mul	d4,d15
.L416:
	mov	d15,#4096
	addih	d15,d15,#61446
.L417:
	add	d4,d15
.L759:
	mov.a	a15,d4
.L418:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   256  #if IFX_MC_ECCD_VAL_LEN > IFXMTU_MAX_TRACKED_ADDRESSES
	ld.hu	d15,[a15]16
.L760:
	sha	d15,#-5
.L761:
	and	d0,d15,#31
.L419:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   257  # error "Unexpected size of VAL mask"
	mov	d2,#0
.L420:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   258  #endif
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   259  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   260      for (i = 0; i < IFXMTU_MAX_TRACKED_ADDRESSES; ++i)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   261      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   262          if (validFlags & (1 << i))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   263          {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   264              trackedSramAddresses[numTrackedAddresses].U = mc->ETRR[i].U;
	mov	d1,#0
.L422:
	j	.L36
.L37:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   265              ++numTrackedAddresses;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   266          }
	mov	d15,#1
.L762:
	sha	d15,d15,d1
.L763:
	and	d15,d0
.L764:
	jeq	d15,#0,.L38
.L765:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   267      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   268  
	mul	d15,d2,#2
	addsc.a	a2,a4,d15,#0
.L766:
	mul	d15,d1,#2
	addsc.a	a5,a15,d15,#0
.L767:
	ld.hu	d15,[a5]18
.L768:
	st.h	[a2],d15
.L769:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   269      return numTrackedAddresses;
	add	d2,#1
.L421:
	extr.u	d2,d2,#0,#8
.L38:
	add	d1,#1
.L36:
	jlt	d1,#5,.L37
.L770:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   270  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   271  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   272  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   273  void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress)
	j	.L39

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   274  {
.L39:
	ret
.L320:
	
__IfxMtu_getTrackedSramAddresses_function_end:
	.size	IfxMtu_getTrackedSramAddresses,__IfxMtu_getTrackedSramAddresses_function_end-IfxMtu_getTrackedSramAddresses
.L181:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_readSramAddress',code,cluster('IfxMtu_readSramAddress')
	.sect	'.text.IfxMtu.IfxMtu_readSramAddress'
	.align	2
	
	.global	IfxMtu_readSramAddress

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   275      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   276  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   277      /* configure MBIST for single read opeation */
; Function IfxMtu_readSramAddress
.L121:
IfxMtu_readSramAddress:	.type	func
	mov	d8,d4
.L425:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   278      uint16  mcontrolMask = 0x4000;                                                           /* set USERED flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   279      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF);
	mov	d15,#256
.L603:
	mul	d15,d8
.L604:
	mov	d0,#4096
	addih	d0,d0,#61446
.L426:
	add	d15,d0
.L605:
	mov.a	a15,d15
.L428:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   280      mc->CONFIG0.U  = (1 << IFX_MC_CONFIG0_NUMACCS_OFF) | (1 << IFX_MC_CONFIG0_ACCSTYPE_OFF); /* 1 read access */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   281      mc->CONFIG1.U  = 0;                                                                      /* ensure that linear scrambling is used */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   282  
	mov	d0,#16384
.L429:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   283      /* Set the address to be read (RAEN = 0) */
	or	d15,d0,#8
.L427:
	st.h	[a15]4,d15
.L606:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   284      mc->RANGE.U = sramAddress;
	mov	d15,#4097
.L607:
	st.h	[a15],d15
.L608:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   285  
	mov	d15,#0
.L609:
	st.h	[a15]2,d15
.L610:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   286      /* Start operation */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   287      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF) | (1 << IFX_MC_MCONTROL_START_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   288      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF);
	st.h	[a15]8,d5
.L611:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   289  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   290      /* wait for the end of the fill operation */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   291      IfxMtu_waitForMbistDone(256, 1, mbistSel);
	or	d15,d0,#8
.L612:
	or	d15,#1
.L613:
	st.h	[a15]4,d15
.L614:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   292  
	or	d15,d0,#8
.L615:
	st.h	[a15]4,d15
.L616:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   293      while (!IfxMtu_isMbistDone(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   294      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   295          __nop();
	mov	d4,#256
.L423:
	mov	d5,#1
.L424:
	mov	d6,d8
.L431:
	call	IfxMtu_waitForMbistDone
.L430:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   296      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   297  }
	j	.L40
.L41:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   298  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   299  
	nop
.L40:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   504  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   505  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   506  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   507  IFX_INLINE void IfxMtu_enableModule(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   508  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   509      uint8 isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   510  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   511      if (IfxScuWdt_getCpuWatchdogEndInit() == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   512      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   513          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   514          IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   515          isEndInitEnabled = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   516      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   517  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   518      /* MTU clock enable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   519      MTU_CLC.U = 0x0U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   520  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   521      if (isEndInitEnabled == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   522      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   523          IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   524      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   525  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   526  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   527  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   528  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   529  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   530      volatile uint32 *mtuMemstat = (volatile uint32 *)((uint32)&MTU_MEMSTAT0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   531      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   533  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   535  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   536  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   537  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   538      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   539      return mc->ECCS.B.TRE ? TRUE : FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   540  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   541  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   542  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   543  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   544  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   545      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   546      return mc->ECCD.B.EOV ? TRUE : FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   547  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   548  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   549  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   550  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   551  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   552      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	mov	d15,#256
.L617:
	mul	d15,d8
.L618:
	mov	d0,#4096
	addih	d0,d0,#61446
.L432:
	add	d15,d0
.L619:
	mov.a	a15,d15
.L434:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   553      uint16  status;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   554  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   555      status = mc->MSTATUS.U;
	ld.hu	d15,[a15]6
.L433:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   556      return (boolean)(status & 0x01);
	and	d15,#1
.L435:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   556      return (boolean)(status & 0x01);      (inlined)
	j	.L42

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   557  }      (inlined)
.L42:
	jeq	d15,#0,.L41
.L620:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   300  ctiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   301  {
	ret
.L253:
	
__IfxMtu_readSramAddress_function_end:
	.size	IfxMtu_readSramAddress,__IfxMtu_readSramAddress_function_end-IfxMtu_readSramAddress
.L151:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_runNonDestructiveInversionTest',code,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.text.IfxMtu.IfxMtu_runNonDestructiveInversionTest'
	.align	2
	
	.global	IfxMtu_runNonDestructiveInversionTest

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   302      /* Select MBIST Memory Controller:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   303       * Ifx_MC is a type describing structure of MBIST Memory Controller
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   304       * registers defined in IfxMc_regdef.h file - MC object */
; Function IfxMtu_runNonDestructiveInversionTest
.L123:
IfxMtu_runNonDestructiveInversionTest:	.type	func
	mov	d8,d4
.L437:
	mov	d10,d5
.L438:
	mov	d9,d6
.L439:
	mov	d11,d7
.L441:
	mov.aa	a12,a4
.L443:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   305      Ifx_MC *mc               = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   306      uint16  password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   307      uint8   retVal           = 0U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   308      uint8   isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   309      password = IfxScuWdt_getSafetyWatchdogPassword();
	mov	d0,#256
.L625:
	mul	d0,d8
.L626:
	mov	d1,#4096
	addih	d1,d1,#61446
.L444:
	add	d0,d1
.L627:
	mov.a	a15,d0
.L445:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   310  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   311      /* Check if the Endinit is cleared by application. If not, then handle it internally inside teh function.*/
	mov	d12,#0
.L447:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   312      if (IfxScuWdt_getSafetyWatchdogEndInit() == 1U)
	mov	d13,#0
.L448:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   313      {
	call	IfxScuWdt_getSafetyWatchdogPassword
.L436:
	mov	d14,d2
.L272:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
	movh.a	a2,#61443
	ld.w	d15,[a2]@los(0xf00360f0)
	and	d15,#1
.L628:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;      (inlined)
	j	.L43

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }      (inlined)
.L43:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   314  ar EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   315          IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   316          isEndInitEnabled = 1;
	jne	d15,#1,.L44
.L629:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   317      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   318  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   319      /* Enable MBIST Memory Controller */
	mov	d4,d14
.L449:
	call	IfxScuWdt_clearSafetyEndinit
.L450:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   320      IfxMtu_enableMbistShell(mbistSel);
	mov	d13,#1
.L44:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
	sha	d15,d8,#-5
.L630:
	mul	d15,d15,#4
.L631:
	mov	d0,#16
	addih	d0,d0,#61446
.L451:
	add	d15,d0
.L632:
	mov.a	a2,d15
.L453:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
	mov	d0,#1
.L633:
	and	d15,d8,#31
.L452:
	sha	d0,d0,d15
.L454:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
	ld.w	d15,[a2]
.L634:
	or	d15,d0
	st.w	[a2],d15
.L273:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   321   for auto-init memories: wait for the end of the clear operation */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   322      while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   323      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   324  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   325      /* Configure Non-destructive Inversion test */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   326      mc->CONFIG0.U = 0x4005; //NUMACCS=4, ACCSTYPE=5
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   327      mc->CONFIG1.U = 0x5000; //AG_MOD=5
	j	.L45
.L46:
.L45:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   504  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   505  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   506  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   507  IFX_INLINE void IfxMtu_enableModule(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   508  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   509      uint8 isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   510  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   511      if (IfxScuWdt_getCpuWatchdogEndInit() == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   512      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   513          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   514          IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   515          isEndInitEnabled = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   516      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   517  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   518      /* MTU clock enable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   519      MTU_CLC.U = 0x0U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   520  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   521      if (isEndInitEnabled == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   522      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   523          IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   524      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   525  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   526  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   527  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   528  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   529  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   530      volatile uint32 *mtuMemstat = (volatile uint32 *)((uint32)&MTU_MEMSTAT0 + 4 * (mbistSel >> 5));
	sha	d15,d8,#-5
.L635:
	mul	d15,d15,#4
.L636:
	mov	d0,#56
	addih	d0,d0,#61446
.L455:
	add	d15,d0
.L637:
	mov.a	a2,d15
.L457:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   531      uint32           mask       = 1 << (mbistSel & 0x1f);
	mov	d0,#1
.L638:
	and	d15,d8,#31
.L456:
	sha	d0,d0,d15
.L459:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;
	ld.w	d15,[a2]
.L639:
	and	d15,d0
.L640:
	ne	d15,d15,#0
.L641:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;      (inlined)
	j	.L47

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   533  }      (inlined)
.L47:
	jne	d15,#0,.L46
.L642:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   328  Set the range register */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   329      mc->RANGE.U   = (rangeSel << 15) | (rangeAddrUp << 7) | (rangeAddrLow << 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   330      /* Run the tests */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   331      /* As per AP32917 and Errata MTU_TC.007 DIR is set to 0 */
	mov	d15,#16389
.L643:
	st.h	[a15],d15
.L644:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   332      mc->MCONTROL.U       = 0x4001;
	mov	d15,#20480
.L645:
	st.h	[a15]2,d15
.L646:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   333      mc->MCONTROL.B.START = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   334      /* Set EndInit Watchdog (to prevent Watchdog TO)*/
	sha	d15,d10,#15
.L647:
	sha	d9,#7
.L440:
	or	d15,d9
.L648:
	or	d11,d15
.L442:
	st.h	[a15]8,d11
.L649:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   335      IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   336  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   337      /* wait for the end of the fill operation */
	mov	d15,#16385
.L650:
	st.h	[a15]4,d15
.L651:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   338      IfxMtu_waitForMbistDone(IfxMtu_sramTable[mbistSel].mbistDelay, 4, mbistSel);
	ld.hu	d15,[a15]4
.L652:
	insert	d15,d15,#0,#0,#1
	st.h	[a15]4,d15
.L653:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   339      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mc->MSTATUS.B.DONE != 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   340  
	mov	d4,d14
.L460:
	call	IfxScuWdt_setSafetyEndinit
.L458:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   341      while (!IfxMtu_isMbistDone(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   342      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   343          __nop();
	mul	d15,d8,#12
.L654:
	movh.a	a2,#@his(IfxMtu_sramTable)
	lea	a2,[a2]@los(IfxMtu_sramTable)
.L655:
	addsc.a	a2,a2,d15,#0
.L656:
	ld.w	d4,[a2]8
.L657:
	mov	d5,#4
.L658:
	mov	d6,d8
.L461:
	call	IfxMtu_waitForMbistDone
.L462:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   344      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   345  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   346      /* Clear EndInit Again */
	j	.L48
.L49:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   347      IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   348  
	nop
.L48:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   504  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   505  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   506  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   507  IFX_INLINE void IfxMtu_enableModule(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   508  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   509      uint8 isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   510  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   511      if (IfxScuWdt_getCpuWatchdogEndInit() == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   512      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   513          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   514          IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   515          isEndInitEnabled = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   516      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   517  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   518      /* MTU clock enable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   519      MTU_CLC.U = 0x0U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   520  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   521      if (isEndInitEnabled == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   522      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   523          IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   524      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   525  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   526  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   527  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   528  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   529  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   530      volatile uint32 *mtuMemstat = (volatile uint32 *)((uint32)&MTU_MEMSTAT0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   531      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   533  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   535  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   536  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   537  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   538      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   539      return mc->ECCS.B.TRE ? TRUE : FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   540  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   541  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   542  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   543  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   544  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   545      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   546      return mc->ECCD.B.EOV ? TRUE : FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   547  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   548  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   549  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   550  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   551  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   552      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	mov	d15,#256
.L659:
	mul	d15,d8
.L660:
	mov	d0,#4096
	addih	d0,d0,#61446
.L463:
	add	d15,d0
.L661:
	mov.a	a2,d15
.L465:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   553      uint16  status;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   554  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   555      status = mc->MSTATUS.U;
	ld.hu	d15,[a2]6
.L464:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   556      return (boolean)(status & 0x01);
	and	d15,#1
.L466:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   556      return (boolean)(status & 0x01);      (inlined)
	j	.L50

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   557  }      (inlined)
.L50:
	jeq	d15,#0,.L49
.L662:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   349   Status */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   350      if (IfxMtu_checkErrorFlags(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   351      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   352          /* Read the Error tracking register and return saying test failed */
	mov	d4,d14
.L467:
	call	IfxScuWdt_clearSafetyEndinit
.L284:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   504  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   505  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   506  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   507  IFX_INLINE void IfxMtu_enableModule(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   508  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   509      uint8 isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   510  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   511      if (IfxScuWdt_getCpuWatchdogEndInit() == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   512      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   513          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   514          IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   515          isEndInitEnabled = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   516      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   517  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   518      /* MTU clock enable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   519      MTU_CLC.U = 0x0U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   520  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   521      if (isEndInitEnabled == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   522      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   523          IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   524      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   525  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   526  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   527  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   528  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   529  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   530      volatile uint32 *mtuMemstat = (volatile uint32 *)((uint32)&MTU_MEMSTAT0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   531      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   533  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   535  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   536  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   537  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   538      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   539      return mc->ECCS.B.TRE ? TRUE : FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   540  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   541  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   542  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   543  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   544  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   545      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   546      return mc->ECCD.B.EOV ? TRUE : FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   547  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   548  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   549  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   550  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   551  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   552      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   553      uint16  status;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   554  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   555      status = mc->MSTATUS.U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   556      return (boolean)(status & 0x01);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   557  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   558  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   559  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   560  IFX_INLINE boolean IfxMtu_isModuleEnabled(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   561  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   562      return MTU_CLC.B.DISS == 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   563  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   564  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   565  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   566  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   567  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   568      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	mov	d15,#256
.L663:
	mul	d15,d8
.L664:
	mov	d0,#4096
	addih	d0,d0,#61446
.L468:
	add	d15,d0
.L665:
	mov.a	a2,d15
.L470:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   569      return (boolean)((mc->ECCD.U & IFXMTU_ERROR_FLAGS_MASK) > 0);
	ld.hu	d15,[a2]16
.L469:
	mov.u	d0,#32782
.L666:
	and	d15,d0
.L667:
	ge.u	d15,d15,#1
.L668:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   569      return (boolean)((mc->ECCD.U & IFXMTU_ERROR_FLAGS_MASK) > 0);      (inlined)
	j	.L51

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   570  }      (inlined)
.L51:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   353      *errorAddr = mc->ETRR[0].U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   354          retVal     = 1U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   355      }
	jeq	d15,#0,.L52
.L669:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   356  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   357      /* Disable Memory Controller */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   358      IfxMtu_disableMbistShell(mbistSel);
	ld.hu	d15,[a15]18
.L670:
	st.h	[a12],d15
.L671:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   359  
	mov	d12,#1
.L52:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
	sha	d15,d8,#-5
.L672:
	mul	d15,d15,#4
.L673:
	mov	d0,#16
	addih	d0,d0,#61446
.L471:
	add	d15,d0
.L674:
	mov.a	a15,d15
.L446:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
	mov	d0,#1
.L675:
	and	d15,d8,#31
.L472:
	sha	d0,d0,d15
.L473:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
	ld.w	d15,[a15]
.L676:
	mov	d1,#-1
	xor	d0,d1
.L474:
	and	d15,d0
	st.w	[a15],d15
.L289:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   360  for auto-init memories: wait for the end of the clear operation */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   361      while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   362      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   363  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   364      /* Restore the endinit state */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   365      if (isEndInitEnabled == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   366      {
	j	.L53
.L54:
.L53:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   504  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   505  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   506  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   507  IFX_INLINE void IfxMtu_enableModule(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   508  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   509      uint8 isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   510  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   511      if (IfxScuWdt_getCpuWatchdogEndInit() == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   512      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   513          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   514          IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   515          isEndInitEnabled = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   516      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   517  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   518      /* MTU clock enable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   519      MTU_CLC.U = 0x0U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   520  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   521      if (isEndInitEnabled == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   522      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   523          IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   524      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   525  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   526  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   527  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   528  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   529  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   530      volatile uint32 *mtuMemstat = (volatile uint32 *)((uint32)&MTU_MEMSTAT0 + 4 * (mbistSel >> 5));
	sha	d15,d8,#-5
.L677:
	mul	d15,d15,#4
.L678:
	mov	d0,#56
	addih	d0,d0,#61446
.L475:
	add	d15,d0
.L679:
	mov.a	a15,d15
.L477:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   531      uint32           mask       = 1 << (mbistSel & 0x1f);
	mov	d0,#1
.L680:
	and	d15,d8,#31
.L476:
	sha	d0,d0,d15
.L478:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;
	ld.w	d15,[a15]
.L681:
	and	d15,d0
.L682:
	ne	d15,d15,#0
.L683:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;      (inlined)
	j	.L55

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   533  }      (inlined)
.L55:
	jne	d15,#0,.L54
.L684:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   367  while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   368      {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   370      /* Restore the endinit state */
	jne	d13,#1,.L56
.L685:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   371      if (isEndInitEnabled == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   372      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   373          /* Set EndInit Watchdog (to prevent Watchdog TO)*/
	mov	d4,d14
.L479:
	call	IfxScuWdt_setSafetyEndinit
.L56:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   374          IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   375      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   376  
	mov	d2,d12
.L480:
	j	.L57

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   377      return retVal;
.L57:
	ret
.L261:
	
__IfxMtu_runNonDestructiveInversionTest_function_end:
	.size	IfxMtu_runNonDestructiveInversionTest,__IfxMtu_runNonDestructiveInversionTest_function_end-IfxMtu_runNonDestructiveInversionTest
.L156:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_writeSramAddress',code,cluster('IfxMtu_writeSramAddress')
	.sect	'.text.IfxMtu.IfxMtu_writeSramAddress'
	.align	2
	
	.global	IfxMtu_writeSramAddress

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   378  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   379  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   380  
; Function IfxMtu_writeSramAddress
.L125:
IfxMtu_writeSramAddress:	.type	func
	mov	e8,d5,d4
.L690:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   381  void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   382  {
	mov	d0,#256
.L482:
	mul	d0,d8
.L483:
	mov	d1,#4096
	addih	d1,d1,#61446
.L484:
	add	d0,d1
.L691:
	mov.a	a15,d0
.L485:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   383      Ifx_MC *mc               = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	mov	d10,#0
.L487:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   384      uint8   isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   385      uint16  password         = 0;
	call	IfxScuWdt_getSafetyWatchdogPassword
.L481:
	mov	d11,d2
.L301:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     2   * \file IfxScuWdt.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     3   * \brief SCU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     4   * \ingroup IfxLld_Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    45   * This file contains the APIs for SCU Watchdog and Endinit related functions.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    46   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    47   * \defgroup IfxLld_Scu_Std_Wdt Wdt Basic Functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    48   * \ingroup IfxLld_Scu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    49   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Configuration Watchdog Configuration functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    50   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    51   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit Watchdog Endinit functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    52   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    53   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Operative Watchdog Operative functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    54   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    55   * \defgroup IfxLld_Scu_Std_Wdt_Wdt_Endinit_Usage How to use Endinit APIs?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    56   * \ingroup IfxLld_Scu_Std_Wdt
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    57   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    58  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    59  #ifndef IFXSCUWDT_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    60  #define IFXSCUWDT_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    61  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    62  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    63  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    64  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    65  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    66  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    67  #include "Cpu/Std/Ifx_Types.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    68  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    69  #include "IfxScu_bf.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    70  #include "IfxScuWdt.asm.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    71  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    72  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    73  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    74  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    75  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    76  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    77  /** \brief Endinit operation Timeout counter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    78   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    79  #define IFXSCUWDT_ENDINIT_WAIT_TIMEOUTCOUNT (0x100)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    80  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    81  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    82  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    83  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    84  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    85  /** \brief Configuration structure for Scu Watchdog.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    86   * IfxScuWdt_Config is a type describing configuration structure of CPU and
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    87   * Safety WDT registers defined in IfxScuWdt.h file.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    88   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    89  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    90  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    91      uint16            password;                            /**< \brief password for access to WDTxCON0 reg */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    92      uint16            reload;                              /**< \brief WDT reload value */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    93      IfxScu_WDTCON1_IR inputFrequency;                      /**< \brief input frequency of the WDT */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    94      boolean           disableWatchdog;                     /**< \brief Disable Request Control Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    95      boolean           enableSmuRestriction;                /**< \brief Unlock Restriction Request Control Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    96      boolean           enableAutomaticPasswordChange;       /**< \brief Password Auto-sequence Request Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    97      boolean           enableTimerCheck;                    /**< \brief Counter Check Request Bit */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    98      boolean           enableTimerCheckTolerance;           /**< \brief Timer Check Tolerance Request */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	    99      boolean           clrInternalResetFlag;                /**< \brief Clear Internal Reset Flag */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   100  } IfxScuWdt_Config;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   101  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   102  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Configuration
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   103   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   104  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   105  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   106  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   107  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   108  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   109  /** \brief SCUWDT API to initialize WDT configuration structure - Constructor
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   110   *   This API initialize the ScuWdt configuration structure to default values, these default
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   111   *   values are for software specific, not necessarily hardware reset values.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   112   *   User must use this API call before IfxScuWdt_Init API call
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   113   * \param config ScuWdt configuration structure to be initialized
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   114   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   115   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   116  IFX_EXTERN void IfxScuWdt_initConfig(IfxScuWdt_Config *config);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   117  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   118  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   119   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   120   *   This API initialize the ScuWdt software driver and corresponding CPU WDT hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   121   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   122   *   with this interface.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   123   *   API corresponds to one instance of the hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   124   *   User must use this API call for each instance of the WDT hardware module used.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   125   * \param wdt reference to register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   126   * \param config ScuWdt configuration structure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   127   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   128   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   129  IFX_EXTERN void IfxScuWdt_initCpuWatchdog(Ifx_SCU_WDTCPU *wdt, const IfxScuWdt_Config *config);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   130  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   131  /** \brief SCUWDT API to initialize an instance of WDT Driver which corresponds to Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   132   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   133   *   This API initialize the ScuWdt software driver and corresponding safety WDT hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   134   *   User can configure project specific Watchdog password, Watchdog timer period and other settings
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   135   *   with this interface.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   136   *   API corresponds to one instance of the hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   137   *   User must use this API call for each instance of the WDT hardware module used.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   138   * \param wdt reference to register map of Safety WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   139   * \param config ScuWdt configuration structure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   140   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   141   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   142  IFX_EXTERN void IfxScuWdt_initSafetyWatchdog(Ifx_SCU_WDTS *wdt, const IfxScuWdt_Config *config);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   143  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   144  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   145  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   146  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Endinit
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   147   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   148  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   149  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   150  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   151  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   152  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   153  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   154   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   155   * This Inline API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   156   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   157   * User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   158   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   159   * ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   160   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   161   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   162   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   163   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   164   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   165  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   166  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   167  /** \brief SCUWDT Inline API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   168   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   169   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   170   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   171   * User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   172   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   173   * ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   174   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   175   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   176   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   177   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   178  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   179  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   180  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   181   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   182   * This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   183   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   184   * User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   185   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   186   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   187   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   188   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   189   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   190  IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   191  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   192  /** \brief SCUWDT Inline API to Set ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   193   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   194   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   195   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   196   * User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   197   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   198   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   199   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   200   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   201  IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   202  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   203  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   204  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   205  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   206  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   207  /** \brief SCUWDT API to Clear ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   208   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   209   *   This API will disable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   210   *   User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   211   *   always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   212   *   ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   213   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   214   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   215   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   216   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   217  IFX_EXTERN void IfxScuWdt_clearCpuEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   218  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   219  /** \brief SCUWDT API to Clear ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   220   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   221   * This API will disable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   222   * User need to use this API call before modifying any ENDINIT protected register. User must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   223   * always set the ENDINIT bit using other API IfxScuWdt_setCpuEndinit. The sequence clear and set
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   224   * ENDINIT shall not be interrupted by another interrupt/call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   225   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   226   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   227   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   228   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   229  IFX_EXTERN void IfxScuWdt_clearSafetyEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   230  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   231  /** \brief SCUWDT API to set ENDINIT bit provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   232   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   233   *   This API will enable ENDINIT functionality provided by CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   234   *   User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   235   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   236   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   237   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   238   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   239  IFX_EXTERN void IfxScuWdt_setCpuEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   240  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   241  /** \brief SCUWDT API to Set ENDINIT bit provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   242   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   243   * This API will enable ENDINIT functionality provided by Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   244   * User need to use this API call after modifying any ENDINIT protected register.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   245   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   246   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   247   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   248   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   249  IFX_EXTERN void IfxScuWdt_setSafetyEndinit(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   250  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   251  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   252  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   253  /** \addtogroup IfxLld_Scu_Std_Wdt_Wdt_Operative
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   254   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   255  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   256  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   257  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   258  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   259  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   260  /** \brief SCUWDT Inline API to fetch current password of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   261   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   262   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   263   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   264   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   265   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   266   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   267   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   268   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   269  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   270  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   271  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   272   * \param watchdog pointer to the watchdog register map of CPU WDT hardware instance
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   273   * \return Endinit status for the CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   274   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   275  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   276  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   277  /** \brief SCUWDT API to fetch current endinit of Safety/System Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   278   * \return Endinit status for the Safety Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   279   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   280  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   281  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   282  /** \brief SCUWDT Inline API to fetch current password of Safety Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   283   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   284   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   285   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   286   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   287   * This API is only meant to be used with startup routines where function call is not possible.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   288   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   289   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   290  IFX_INLINE uint16 IfxScuWdt_getSafetyWatchdogPasswordInline(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   291  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   292  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   293  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   294  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   295  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   296  /** \brief SCUWDT API to change CPU Watchdog password.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   297   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   298   *   This API will change password to new one for the corresponding to CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   299   *   User need to have the old password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   300   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   301   * \param newPassword Application specific new password to be changed for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   302   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   303   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   304  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   305  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   306  /** \brief SCUWDT API to change CPU Watchdog timer reload value.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   307   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   308   * This API will change Watchdog timer reload value to new one for CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   309   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   310   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   311   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   312   * \param reload Reload value for the timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   313   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   314   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   315  IFX_EXTERN void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   316  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   317  /** \brief SCUWDT API to change Safety Watchdog password.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   318   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   319   * This API will change password to new one for the corresponding to Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   320   * User need to have the old password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   321   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   322   * \param newPassword Application specific new password to be changed for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   323   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   324   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   325  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogPassword(uint16 password, uint16 newPassword);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   326  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   327  /** \brief SCUWDT API to change Safety Watchdog timer reload value.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   328   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   329   * This API will change Watchdog timer reload value to new one for Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   330   * The Watchdog timers will be reloaded with this value after every serice of Watchdog.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   331   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   332   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   333   * \param reload Reload value for the timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   334   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   335   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   336  IFX_EXTERN void IfxScuWdt_changeSafetyWatchdogReload(uint16 password, uint16 reload);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   337  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   338  /** \brief SCUWDT API to disable CPU Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   339   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   340   * This API will disable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers will stop counting
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   341   * after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   342   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   343   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   344   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   345   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   346  IFX_EXTERN void IfxScuWdt_disableCpuWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   347  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   348  /** \brief SCUWDT API to disable Safety Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   349   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   350   * This API will disable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers will stop counting
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   351   * after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   352   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   353   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   354   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   355   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   356  IFX_EXTERN void IfxScuWdt_disableSafetyWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   357  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   358  /** \brief SCUWDT API to enable CPU Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   359   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   360   *   This API will enable Watchdog functionality of CPU WDT Hardware module. The Watchdog timers need to be serviced
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   361   *   periodically after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   362   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   363   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   364   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   365   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   366  IFX_EXTERN void IfxScuWdt_enableCpuWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   367  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   368  /** \brief SCUWDT API to enable Safety Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   369   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   370   * This API will enable Watchdog functionality of Safety WDT Hardware module. The Watchdog timers need to be serviced
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   371   * periodically after this API call.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   372   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   373   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   374   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   375   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   376  IFX_EXTERN void IfxScuWdt_enableSafetyWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   377  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   378  /** \brief SCUWDT API to fetch current password of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   379   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   380   * This API will fetch current Watchdog password for CPU WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   381   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   382   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   383   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   384   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   385  IFX_EXTERN uint16 IfxScuWdt_getCpuWatchdogPassword(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   386  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   387  /** \brief SCUWDT API to fetch current endinit of CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   388   * \return Endinit status for the CPU Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   389   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   390  IFX_EXTERN boolean IfxScuWdt_getCpuWatchdogEndInit(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   391  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   392  /** \brief SCUWDT API to fetch current password of Safety Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   393   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   394   * This API will fetch current Watchdog password for Safety WDT Hardware module. password is needed to be passed
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   395   * with most of the WDT APIs. Normally this API can be used to store the password locally in the caller function
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   396   * or store the password globally in a global variable at the application memory.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   397   * \return password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   398   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   399  IFX_EXTERN uint16 IfxScuWdt_getSafetyWatchdogPassword(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   400  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   401  /** \brief SCUWDT API to service CPU Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   402   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   403   *   This API will service Watchdog functionality corresponding to CPU WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   404   *   User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   405   *   User need to have the password stored locally in the caller function, (use IfxScuWdt_getCpuWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   406   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   407   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   408   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   409  IFX_EXTERN void IfxScuWdt_serviceCpuWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   410  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   411  /** \brief SCUWDT API to service Safety Watchdog functionality.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   412   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   413   * This API will service Watchdog functionality corresponding to Safety WDT Hardware module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   414   * User need to use this API call periodically. This API results in reloading of the Watchdog Timer.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   415   * User need to have the password stored locally in the caller function, (use IfxScuWdt_getSafetyWatchdogPassword).
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   416   * \param password Existing (Application specific) password for the Watchdog module.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   417   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   418   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   419  IFX_EXTERN void IfxScuWdt_serviceSafetyWatchdog(uint16 password);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   420  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   421  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   422  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   423  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   424  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   425  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   426  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   427  /** \brief Enables the watchdog functionality with debugger connected,\n
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   428   * debug interface will also be enabled, if not enabled already.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   429   * \return Status, Success = 0, Failure = 1.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   430   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   431  IFX_EXTERN boolean IfxScuWdt_enableWatchdogWithDebugger(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   432  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   433  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   434  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   435  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   436  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   437  IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   438  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   439      if (watchdog->CON0.B.LCK)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   440      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   441          /* see Table 1 (Password Access Bit Pattern Requirements) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   442          watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   443                             (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   444                             (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   445                             (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   446      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   447  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   448      /* Clear ENDINT and set LCK bit in Config_0 register */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   449      watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   450                         (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   451                         (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   452                         (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   453  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   454      /* read back ENDINIT and wait until it has been cleared */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   455      while (watchdog->CON0.B.ENDINIT == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   456      {}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   457  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   458  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   459  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   460  IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   461  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   462      if (SCU_WDTS_CON0.B.LCK)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   463      {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   464          /* see Table 1 (Password Access Bit Pattern Requirements) */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   465          SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   466                            (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   467                            (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   468                            (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   469      }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   470  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   471      /* Clear ENDINT and set LCK bit in Config_0 register */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   472      SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   473                        (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   474                        (password << IFX_SCU_WDTS_CON0_PW_OFF) |
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   475                        (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   476  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   477      /* read back ENDINIT and wait until it has been cleared */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   478      while (SCU_WDTS_CON0.B.ENDINIT == 1)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   479      {}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   480  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   481  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   482  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   483  IFX_INLINE uint16 IfxScuWdt_getCpuWatchdogPasswordInline(Ifx_SCU_WDTCPU *watchdog)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   484  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   485      uint16 password;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   486  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   487      /* Read Password from CON0 register
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   488       * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   489       * to toggle them before returning password */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   490      password  = watchdog->CON0.B.PW;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   491      password ^= 0x003F;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   492  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   493      return password;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   494  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   495  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   496  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   497  IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   498  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   499      return (boolean)watchdog->CON0.B.ENDINIT;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   500  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   501  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   502  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   503  IFX_INLINE boolean IfxScuWdt_getSafetyWatchdogEndInit(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   504  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;
	movh.a	a2,#61443
	ld.w	d15,[a2]@los(0xf00360f0)
	and	d15,#1
.L692:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   505      return (boolean)MODULE_SCU.WDTS.CON0.B.ENDINIT;      (inlined)
	j	.L58

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuWdt.h	   506  }      (inlined)
.L58:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   386  FXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   387      uint8   isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   388      uint16  password         = 0;
	jne	d15,#1,.L59
.L693:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   389      password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   390  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   391      /* Check if the Endinit is cleared by application. If not, then handle it internally inside teh function.*/
	mov	d4,d11
.L488:
	call	IfxScuWdt_clearSafetyEndinit
.L489:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   392      if (IfxScuWdt_getSafetyWatchdogEndInit() == 1U)
	mov	d10,#1
.L59:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   393      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   394          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   395          IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   396          isEndInitEnabled = 1;
	mov	d0,#16384
.L490:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   397      }
	or	d15,d0,#8
.L694:
	st.h	[a15]4,d15
.L695:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   398  
	mov	d15,#4096
.L696:
	st.h	[a15],d15
.L697:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   399      /* configure MBIST for single write opeation */
	mov	d15,#0
.L698:
	st.h	[a15]2,d15
.L491:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   400      uint16 mcontrolMask = 0x4000;                                                            /* set USERED flag */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   401      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   402      mc->CONFIG0.U  = (1 << IFX_MC_CONFIG0_NUMACCS_OFF) | (0 << IFX_MC_CONFIG0_ACCSTYPE_OFF); /* 1 write access */
	st.h	[a15]8,d9
.L492:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   403      mc->CONFIG1.U  = 0;                                                                      /* ensure that linear scrambling is used */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   404  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   405      /* Set the address to be written (RAEN = 0) */
	or	d15,d0,#8
.L699:
	or	d15,#1
.L700:
	st.h	[a15]4,d15
.L701:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   406      mc->RANGE.U = sramAddress;
	or	d15,d0,#8
.L702:
	st.h	[a15]4,d15
.L703:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   407  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   408      /* Start operation */
	jne	d10,#1,.L60
.L704:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   409      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF) | (1 << IFX_MC_MCONTROL_START_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   410      mc->MCONTROL.U = mcontrolMask | (1 << IFX_MC_MCONTROL_DIR_OFF);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   411  
	mov	d4,d11
.L493:
	call	IfxScuWdt_setSafetyEndinit
.L60:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   412      if (isEndInitEnabled == 1)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   413      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   414          /* Set EndInit Watchdog (to prevent Watchdog TO)*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   415          IfxScuWdt_setSafetyEndinit(password);
	mul	d15,d8,#12
.L494:
	movh.a	a15,#@his(IfxMtu_sramTable)
.L486:
	lea	a15,[a15]@los(IfxMtu_sramTable)
.L705:
	addsc.a	a15,a15,d15,#0
.L706:
	ld.w	d4,[a15]8
.L707:
	mov	d5,#1
.L495:
	mov	d6,d8
.L496:
	call	IfxMtu_waitForMbistDone
.L497:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   416      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   417  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   418      /* Wait for the end of the operation */
	j	.L61
.L62:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   419      IfxMtu_waitForMbistDone(IfxMtu_sramTable[mbistSel].mbistDelay, 1, mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   420      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mc->MSTATUS.B.DONE != 0);
	nop
.L61:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     1  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     2   * \file IfxMtu.h
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     3   * \brief MTU  basic functionality
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     4   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     5   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     6   * \version iLLD_1_0_1_11_0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     8   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	     9   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    10   *                                 IMPORTANT NOTICE
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    11   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    12   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    16   * terms of use are agreed, use of this file is subject to following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    17  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    18  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    20  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    22   * organization obtaining a copy of the software and accompanying 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    26   * Software is furnished to do so, all subject to the following:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    27  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    28   * The copyright notices in the Software and this entire statement, including
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    32   * solely in the form of machine-executable object code generated by a source
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    33   * language processor.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    34  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    41   * DEALINGS IN THE SOFTWARE.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    42  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    43   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    44   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    45   * \defgroup IfxLld_Mtu_Usage How to use the Mtu driver?
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    46   * \ingroup IfxLld_Mtu
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    47   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    48   * The Memory Test Unit (MTU)  controls and monitors the test, initialization and data integrity checking functions of the various internal memories in the device
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    49   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    50   * The Mtu driver provides set of routines for various Mbist operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    51   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    52   * In the following sections it will be described, how to integrate the Mtu driver into the application framework.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    53   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    54   * \section IfxLld_Mtu_SramInit Sram Initialisation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    55   * \subsection IfxLld_Mtu_Include Include Files
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    56   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    57   * Include following header file into your C code:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    58   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    59   * #include <Mtu/IfxMtu.h>
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    60   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    61   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    62   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    63   * \subsection IfxLld_Mtu_ClearSram_SyncPolling Clear Sram (Synchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    64   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    65   * The Sram initialisation in synchronous polling mode (i.e wait till the complete operation is done) can be used as:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    66   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    67   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    68   *     clearSram(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    69   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    70   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    71   * \subsection IfxLld_Mtu_ClearSram_ASyncPolling Clear Sram (Asynchronous polling mode)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    72   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    73   * The Sram initialisation can be triggered by calling IfxMtu_clearSramStart() function, then can be queried for completion in a task using IfxMtu_isMbistDone. Once it's completed, then IfxMtu_clearSramContinue() has to be
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    74   * called.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    75   * Note: The Safety Endinit watchdog has to be cleared before and set after for the IfxMtu_clearSramStart() and IfxMtu_clearSramContinue() functions.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    76   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    77   * Following code triggers Sram initilisation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    78   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    79   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    80   *     uint16 password         = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    81   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    82   *     password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    83   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    84   *     // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    85   *     IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    86   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    87   *     IfxMtu_clearSramStart(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    88   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    89   *     // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    90   *     IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    91   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    92   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    93   * Sram initialisation status can be queried in a task and once done complete the operation using:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    94   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    95   *     if (IfxMtu_isMbistDone(IfxMtu_MbistSel_cpu0Dspr))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    96   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    97   *         // Sram Clear operation done
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    98   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	    99   *         // Clear EndInit
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   100   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   101   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   102   *         IfxMtu_clearSramContinue(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   103   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   104   *         // Set EndInit Watchdog
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   105   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   106   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   107   *     else
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   108   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   109   *         // Sram operation is still in progress
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   110   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   111   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   112   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   113   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   114   * \section IfxLld_Mtu_SramError Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   115   * Example usage of Sram Error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   116   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   117   * IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   118   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   119   * IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_cpu1Dspr;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   120   * Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   121   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   122   * IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   123   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   124   * // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   125   * while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   126   * {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   127   * IfxMtu_enableErrorTracking(mbistSel, TRUE);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   128   * uint32 numEtrr = 5;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   129   * // print tracked error address
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   130   * {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   131   *  Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   132   *  uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   133   *  for(uint32 i=0; i<numEtrr; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   134   *                         printf("%d: Error Address:0x%04x, Error System Address:0x%04x \n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   135   *                                    i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   136   *                                    trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   137   *                                    IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   138   *                       }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   139   *        }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   140   * }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   141   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   142   * IfxMtu_disableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   143   * IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   144   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   145   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   146   * \section IfxLld_Mtu_MemoryTest Memory Tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   147   * \subsection IfxLld_Mtu_MemoryTest_NDI Non Destructive Inversion Test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   148   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   149   * Usage Example:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   150   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   151   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   152   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   153   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   154   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   155   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   156   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   157   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   158   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   159   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   160   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   161   *         uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   162   *         uint16 errAddr = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   163   *         IfxScuWdt_clearSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   164   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   165   *        // run Non distructive inversion test for cpu0 DSPR memory (Range selection disabled)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   166   *         IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel_cpu0Dspr, 0, 0xFF, 0, &errAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   167   *       // Clear Error Flags which are set in case you want to run further tests
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   168   *         IfxMtu_clearErrorTracking(IfxMtu_MbistSel_cpu0Dspr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   169   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   170   *         IfxScuWdt_setSafetyEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   171   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   172   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   173   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   174   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   175   * \defgroup IfxLld_Mtu_Std_Utility Utility Functions
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   176   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   177   * \defgroup IfxLld_Mtu_Std_Operative MBIST Operations
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   178   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   179   * \defgroup IfxLld_Mtu_Std_ErrorTracking MBIST Error Tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   180   * \ingroup IfxLld_Mtu_Std
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   181   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   182  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   183  #ifndef IFXMTU_H
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   184  #define IFXMTU_H 1
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   185  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   186  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   187  /*----------------------------------Includes----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   188  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   189  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   190  #include "_Impl/IfxMtu_cfg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   191  #include "IfxMc_bf.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   192  #include "IfxMtu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   193  #include "IfxMc_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   194  #include "IfxScu_reg.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   195  #include "_Utilities/Ifx_Assert.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   196  #include "Scu/Std/IfxScuWdt.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   197  #include "Scu/Std/IfxScuCcu.h"
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   198  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   199  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   200  /*-----------------------------------Macros-----------------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   201  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   202  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   203  /** \brief Mask for the ERROR flags
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   204   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   205  #define IFXMTU_ERROR_FLAGS_MASK                                     \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   206      (((unsigned int)IFX_MC_ECCD_EOV_MSK << IFX_MC_ECCD_EOV_OFF) |   \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   207       ((unsigned int)IFX_MC_ECCD_CERR_MSK << IFX_MC_ECCD_CERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   208       ((unsigned int)IFX_MC_ECCD_UERR_MSK << IFX_MC_ECCD_UERR_OFF) | \ 
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   209       ((unsigned int)IFX_MC_ECCD_AERR_MSK << IFX_MC_ECCD_AERR_OFF))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   210  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   211  /** \addtogroup IfxLld_Mtu_Std_Utility
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   212   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   213  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   214  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   215  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   216  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   217  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   218  /** \brief Disables the MBIST Shell of the given SRAM
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   219   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   220   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   221   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   222   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   223   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   224   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   225   *     IfxMtu_disableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   226   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   227   *     // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   228   *     while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   229   *     {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   230   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   231   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   232   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   233  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   234  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   235  /** \brief Enables the MBIST Shell of the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   236   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   237   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   238   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   239   * Usage Example
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   240   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   241   *     // Enable MTU clock
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   242   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   243   *         uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   244   *         IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   245   *         IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   246   *         IfxScuWdt_setCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   247   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   248   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   249   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   250   *       IfxMtu_enableMbistShell(IfxMtu_MbistSel_cpu0Dtag);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   251   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   252   *       // Note: Wait for Auto-initilisation to be completed for auto-init memories like cpu-Dtag, cpu-Ptag,  Cpu-Dcache, Cpu-Pcache,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   253   *       while (IfxMtu_isAutoInitRunning(IfxMtu_MbistSel_cpu0Dtag))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   254   *       {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   255   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   256   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   257   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   258   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   259  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   260  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   261  /** \brief Enables the MTU module
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   262   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   263   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   264  IFX_INLINE void IfxMtu_enableModule(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   265  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   266  /** \brief Returns TRUE if Auto-Initialisation is running for the given SRAM.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   267   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   268   * Should be polled after MBIST enableMbistShell to ensure that an auto-init operation is finished before starting a new operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   269   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   270   * \return TRUE if auto-initialisation running.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   271   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   272  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   273  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   274  /** \brief Returns the status of whether the module is enabled or not
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   275   * \return
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   276   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   277  IFX_INLINE boolean IfxMtu_isModuleEnabled(void);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   278  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   279  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   280  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   281  /** \addtogroup IfxLld_Mtu_Std_Operative
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   282   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   283  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   284  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   285  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   286  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   287  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   288  /** \brief This Function returns the status of MBIST clear Sram operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   289   * Caution: It is recommended not to call this function continously in a loop. Use IfxMtu_ClearSram() function for Synchronous polling mode.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   290   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   291   * \return status of Mbist Clear Sram operation (TRUE - Operation completed, FALSE - Operation still in progress)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   292   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   293   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   294   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   295   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   296  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   297  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   298  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   299  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   300  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   301  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   302  /** \brief Function to Clear the MBIST SRAM (Synchronous mode).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   303   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   304   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   305   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   306   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   307   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   308   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   309   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   310  IFX_EXTERN void IfxMtu_clearSram(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   311  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   312  /** \brief This Function should be called after MBIST Clear SRAM operation is completed.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   313   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   314   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   315   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   316   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   317   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   318   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   319   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   320  IFX_EXTERN void IfxMtu_clearSramContinue(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   321  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   322  /** \brief This Function triggers the Clear the MBIST SRAM operation (Asynchronous operation). It doesn't wait till the end of operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   323   * The application has to poll the Mbist status (IfxMtu_isMbistDone()) in a task and once the operation is done, the IfxMtu_clearSramContinue() function should be called to complete the operation.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   324   * If Synchronous usage is need, use IfxMtu_clearSram() function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   325   * Note: The function should be called with safety endinit bit cleared.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   326   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   327   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   328   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   329   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   330   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   331   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   332  IFX_EXTERN void IfxMtu_clearSramStart(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   333  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   334  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   335   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   336   * \param sramAddress SRAM address which should be read
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   337   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   338   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   339   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   340   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   341   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   342  IFX_EXTERN void IfxMtu_readSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   343  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   344  /** \brief This function runs the Non-Destructive Inversion test algorithm.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   345   * Non-Destructive Inversion test can be considered as a simple linear test that is able to find all Stuck-At faults (the cell remains stuck at a value for any operation) without destroying any user data. The test accesses every Word in the address range defined by the RANGE register, four times.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   346   * Test Steps:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   347   * 1. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   348   * 2. write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   349   * 3. Read data Word including check bits
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   350   * 4. Write back all bits inverted
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   351   * At the end of this procedure the user data remains unchanged and and every bit has been set to 0 and 1. Any single Stuck-At error will be visible as a correctable error.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   352   * Note: The function clears & sets safety endinit bit while running the test to prevent watchdog TO and automatically restores the endinit state (same state at the time of entering the function) at the end.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   353   * The Error flags need to be cleared to enable further tracking after the test
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   354   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   355   * \param rangeSel enable/disable range Selection (0 - disable, 1- enable)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   356   * \param rangeAddrUp when range mode is enabled, it specifies the upper logical block address limit in 64 word increments.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   357   * \param rangeAddrLow when range mode is enabled, it specifies the lower logical block address limit.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   358   * \param errorAddr If the test fails, it contains the error address (bit0 - bit12) and memory block index (Bit13 - Bit15)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   359   * \return Test Status (0-PASS, 1- FAIL)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   360   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   361  IFX_EXTERN uint8 IfxMtu_runNonDestructiveInversionTest(IfxMtu_MbistSel mbistSel, uint8 rangeSel, uint8 rangeAddrUp, uint8 rangeAddrLow, uint16 *errorAddr);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   362  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   363  /**
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   364   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   365   * \param sramAddress SRAM address which should be written
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   366   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   367   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   368  IFX_EXTERN void IfxMtu_writeSramAddress(IfxMtu_MbistSel mbistSel, uint16 sramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   369  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   370  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   371  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   372  /** \addtogroup IfxLld_Mtu_Std_ErrorTracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   373   * \{ */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   374  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   375  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   376  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   377  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   378  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   379  /** \brief Returns the status of the error tracking
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   380   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   381   * \return TRUE if error tracking enabled.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   382   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   383  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   384  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   385  /** \brief Returns the error tracking overflow status.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   386   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   387   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   388   * \return TRUE if more errors were detected since last clear than error tracking registers are available, or if more than one memory block was in error at the same time.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   389   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   390  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   391  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   392  /** \brief Returns True if any Error Flags are set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   393   * \param mbistSel Memory slection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   394   * \return True if any error Flag is set
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   395   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   396  IFX_INLINE boolean IfxMtu_checkErrorFlags(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   397  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   398  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   399  /*-------------------------Global Function Prototypes-------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   400  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   401  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   402  /** \brief Clears the error tracking registers (ETRR), valid and overflow bits.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   403   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   404   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   405   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   406   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   407   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   408   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   409   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   410  IFX_EXTERN void IfxMtu_clearErrorTracking(IfxMtu_MbistSel mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   411  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   412  /** \brief Enables the tracking of SRAM errors.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   413   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   414   * \param enable TRUE to enable error tracking, FALSE to disable error tracking.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   415   * \return None
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   416   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   417   * A coding example can be found in \ref IfxLld_Mtu_Usage
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   418   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   419   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   420  IFX_EXTERN void IfxMtu_enableErrorTracking(IfxMtu_MbistSel mbistSel, boolean enable);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   421  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   422  /** \brief Returns the descrambled system address based on a tracked SRAM error which consists of ADDR and MBI (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   423   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   424   * Please note that not all memories of the system are supported by this function.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   425   * Additional memories will be considered on request.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   426   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   427   * \param trackedSramAddress tracked SRAM address which consists of an ADDR and MBI field (SRAM address and block)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   428   * \return descrambled system address if supported by this function, otherwise 0
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   429   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   430   * Example usage: see \ref IfxMtu_getTrackedSramAddresses
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   431   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   432   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   433  IFX_EXTERN uint32 IfxMtu_getSystemAddress(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR trackedSramAddress);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   434  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   435  /** \brief Returns the tracked SRAM error addresses and memory blocks which are stored in the MBIST ETRR registers.
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   436   * CAUTION: This function should be called after enabling Mbist Shell (Refer Errata: MTU_TC.005).
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   437   * \param mbistSel Memory Selection
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   438   * \param trackedSramAddresses will contain the tracked error addresses in trackedSramAdresses[x].B.ADDR and affected blocks in sramAddresses[x].B.MBI
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   439   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   440   * The array size shall be IFXMTU_MAX_TRACKED_ADDRESSES
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   441   * \return number of tracked errors (0..IFXMTU_MAX_TRACKED_ADDRESSES)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   442   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   443   * Example usage to print out tracked errors of a given memory:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   444   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   445   * We assume that the MTU clock has already been enabled, and that the MBIST instance has been selected; e.g. for LMU:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   446   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   447   *     uint16 password = IfxScuWdt_getCpuWatchdogPassword();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   448   *     IfxScuWdt_clearCpuEndinit(password);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   449   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   450   *     IfxMtu_enableModule();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   451   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   452   *     IfxMtu_MbistSel mbistSel = IfxMtu_MbistSel_lmu;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   453   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   454   *     IfxMtu_enableMbistShell(mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   455   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   456   *     // for auto-init memories: wait for the end of the clear operation
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   457   *     while (IfxMtu_isAutoInitRunning(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   458   *         {}
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   459   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   460   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   461   * Now the tracking information can be retrieved with:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   462   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   463   * \code
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   464   *     {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   465   *         Ifx_MC_ETRR trackedSramAddresses[IFXMTU_MAX_TRACKED_ADDRESSES];
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   466   *         uint8  numTrackedAddresses = IfxMtu_getTrackedSramAddresses(mbistSel, trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   467   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   468   *         clib_ver_printf("Tracked addresses: %d (Overflow: %d)\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   469   *                         numTrackedAddresses,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   470   *                         IfxMtu_isErrorTrackingOverflow(mbistSel) ? 1 : 0);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   471   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   472   *         for(int i=0; i<numTrackedAddresses; ++i) {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   473   *             clib_ver_printf("%d: A:0x%04x MBI:%d -> SystemAddress: 0x%08x\n",
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   474   *                             i,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   475   *                             trackedSramAddresses[i].B.ADDR,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   476   *                             trackedSramAddresses[i].B.MBI,
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   477   *                             IfxMtu_getSystemAddress(mbistSel, trackedSramAddresses[i]));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   478   *         }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   479   *     }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   480   * \endcode
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   481   *
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   482   */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   483  IFX_EXTERN uint8 IfxMtu_getTrackedSramAddresses(IfxMtu_MbistSel mbistSel, Ifx_MC_ETRR *trackedSramAddresses);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   484  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   485  /** \} */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   486  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   487  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   488  /*---------------------Inline Function Implementations------------------------*/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   489  /******************************************************************************/
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   491  IFX_INLINE void IfxMtu_disableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   492  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   493      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   494      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   495      *mtuMemtest &= ~mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   496  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   497  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   498  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   499  IFX_INLINE void IfxMtu_enableMbistShell(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   500  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   501      volatile uint32 *mtuMemtest = (volatile uint32 *)((uint32)&MTU_MEMTEST0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   502      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   503      *mtuMemtest |= mask;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   504  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   505  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   506  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   507  IFX_INLINE void IfxMtu_enableModule(void)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   508  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   509      uint8 isEndInitEnabled = 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   510  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   511      if (IfxScuWdt_getCpuWatchdogEndInit() == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   512      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   513          /* Clear EndInit */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   514          IfxScuWdt_clearCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   515          isEndInitEnabled = 1;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   516      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   517  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   518      /* MTU clock enable */
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   519      MTU_CLC.U = 0x0U;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   520  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   521      if (isEndInitEnabled == 1U)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   522      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   523          IfxScuWdt_setCpuEndinit(IfxScuWdt_getCpuWatchdogPassword());
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   524      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   525  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   526  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   527  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   528  IFX_INLINE boolean IfxMtu_isAutoInitRunning(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   529  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   530      volatile uint32 *mtuMemstat = (volatile uint32 *)((uint32)&MTU_MEMSTAT0 + 4 * (mbistSel >> 5));
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   531      uint32           mask       = 1 << (mbistSel & 0x1f);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   532      return (*mtuMemstat & mask) != 0;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   533  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   534  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   535  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   536  IFX_INLINE boolean IfxMtu_isErrorTrackingEnabled(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   537  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   538      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   539      return mc->ECCS.B.TRE ? TRUE : FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   540  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   541  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   542  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   543  IFX_INLINE boolean IfxMtu_isErrorTrackingOverflow(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   544  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   545      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   546      return mc->ECCD.B.EOV ? TRUE : FALSE;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   547  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   548  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   549  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   550  IFX_INLINE boolean IfxMtu_isMbistDone(IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   551  {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   552      Ifx_MC *mc = (Ifx_MC *)(IFXMTU_MC_ADDRESS_BASE + 0x100 * mbistSel);
	mov	d15,#256
.L498:
	mul	d15,d8
.L499:
	mov	d0,#4096
	addih	d0,d0,#61446
.L500:
	add	d15,d0
.L708:
	mov.a	a15,d15
.L502:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   553      uint16  status;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   554  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   555      status = mc->MSTATUS.U;
	ld.hu	d15,[a15]6
.L501:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   556      return (boolean)(status & 0x01);
	and	d15,#1
.L503:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   556      return (boolean)(status & 0x01);      (inlined)
	j	.L63

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.h	   557  }      (inlined)
.L63:
	jeq	d15,#0,.L62
.L709:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   421  , mbistSel);
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   422      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, mc->MSTATUS.B.DONE != 0);
	ret
.L295:
	
__IfxMtu_writeSramAddress_function_end:
	.size	IfxMtu_writeSramAddress,__IfxMtu_writeSramAddress_function_end-IfxMtu_writeSramAddress
.L161:
	; End of function
	
	.sdecl	'.text.IfxMtu.IfxMtu_waitForMbistDone',code,cluster('IfxMtu_waitForMbistDone')
	.sect	'.text.IfxMtu.IfxMtu_waitForMbistDone'
	.align	2
	

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   423  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   424      while (!IfxMtu_isMbistDone(mbistSel))
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   425      {
; Function IfxMtu_waitForMbistDone
.L127:
IfxMtu_waitForMbistDone:	.type	func
	sub.a	a10,#8
.L504:
	mov	e8,d5,d4
.L775:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   426          __nop();
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   427      }
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf0036032)
	and	d0,d15,#15
.L776:
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf0036031)
	and	d15,#15
.L777:
	div	e0,d0,d15
.L506:
	mul	d0,d9
.L507:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   428  }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   429  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   430  
	movh.a	a15,#@his(.1.jmp)
	lea	a15,[a15]@los(.1.jmp)
	mov	d15,#87
	jlt	d15,d6,.L64
	mov	d15,#22
	jlt	d6,d15,.L64
	sub	d15,d6,d15
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
	ji	a15
.L64:
	j	.L65
.L505:
	
	.sdecl	'.rodata.IfxMtu..1.jmp',data,rom
	.sect	'.rodata.IfxMtu..1.jmp'
	.align	4
.1.jmp:	.type	object
	.word	.L66
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L67
	.word	.L68
	.word	.L69
	.word	.L70
	.word	.L71
	.word	.L72
	.word	.L73
	.word	.L65
	.word	.L74
	.word	.L65
	.word	.L75
	.word	.L76
	.word	.L77
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L78
	.word	.L79
	.word	.L80
	.word	.L81
	.word	.L82
	.word	.L83
	.word	.L84
	.word	.L85
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L65
	.word	.L86
	.word	.L65
	.word	.L87
	.word	.L88
	.word	.L65
	.word	.L65
	.word	.L89
	.word	.L90
	.word	.L91
	.word	.L92
	
	.sect	'.text.IfxMtu.IfxMtu_waitForMbistDone'

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   431  IFX_STATIC void IfxMtu_waitForMbistDone(uint32 towerDepth, uint8 numInstructions, IfxMtu_MbistSel mbistSel)
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   432  {
.L67:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   433      uint32          waitFact = (SCU_CCUCON0.B.SPBDIV / SCU_CCUCON0.B.SRIDIV) * numInstructions;
.L68:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   434      volatile uint32 waitTime;
.L69:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   435  
.L70:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   436      switch (mbistSel)
.L71:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   437      {
.L72:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   438      case IfxMtu_MbistSel_gtmFifo:
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf0036035)
	extr.u	d15,d15,#4,#4
.L778:
	mul	d0,d15
.L779:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   439      case IfxMtu_MbistSel_gtmMcs0:
	j	.L93

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   440      case IfxMtu_MbistSel_gtmMcs1:
.L66:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   441      case IfxMtu_MbistSel_gtmDpll1a:
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf0036035)
	extr.u	d15,d15,#4,#4
.L780:
	mul	d0,d15
.L781:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   442      case IfxMtu_MbistSel_gtmDpll1b:
	j	.L94

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   443      case IfxMtu_MbistSel_gtmDpll2:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   444          waitFact = waitFact * SCU_CCUCON1.B.GTMDIV;
.L74:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   445          break;
.L73:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   446      case IfxMtu_MbistSel_ethermac:
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf0036030)
	and	d15,#15
.L782:
	mul	d0,d15
.L783:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   447          waitFact = waitFact * SCU_CCUCON1.B.GTMDIV;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   448          break;
	j	.L95

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   449  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   450      case IfxMtu_MbistSel_mcan:
.L75:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   451      case IfxMtu_MbistSel_psi5:
.L76:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   452          waitFact = waitFact * SCU_CCUCON0.B.BAUD1DIV;
	call	IfxScuCcu_getSriFrequency
.L508:
	mov	d10,d2
.L337:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_Scu SCU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    48   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    49   * \addtogroup IfxLld_ScuCcu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    50   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    51   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    52   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    53   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    54   * In the following sections it will be described, how to integrate the driver into the application framework.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    56   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    57   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    58   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    59   * Include following header file into your C code:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    60   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    61   * #include <Scu/Std/IfxScuCcu.h>
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    62   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    63   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    64   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    65   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    66   * Declare the Clock Configuration variables in your C code:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    68   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    69   * // used globally
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    70   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    71   * // configuration for the PLL  steps
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    72   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    73   *     IFXSCU_CFG_PLL_STEPS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    74   * };
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    75   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    76   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    77   * // Default configuration for the Clock Configuration
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    78   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    80   *        sizeof(IfxScuCcu_testPllConfigSteps) / sizeof(IfxScuCcu_PllStepsConfig),
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    81   *        (IfxScuCcu_PllStepsConfig *)IfxScuCcu_testPllConfigSteps,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    82   *        IFXSCU_CFG_PLL_INITIAL_STEP,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    83   *     },
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    84   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    85   *     IFXSCU_CFG_FLASH_WAITSTATE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    86   *     IFX_CFG_SCU_XTAL_FREQUENCY
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    87   * };
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    88   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    89   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    90   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    91   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    92   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    93   * The module initialisation can be done in the same function. Here an example:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    94   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    95   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    96   *        // standard PLL & clock initialisation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    97   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    99   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   101   *    The PLL and clocks are now initialised based on the IFXSCU_CFG_XTAL_FREQ and  IFXSCU_CFG_PLL_FREQ values configured in Ifx_Cfg.h.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   103   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   104   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   105   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   106   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   107   * \ingroup IfxLld_Scu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   108   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   109   * \ingroup IfxLld_Scu_Std_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   110   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   111   * \ingroup IfxLld_Scu_Std_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   112   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   113   * \ingroup IfxLld_Scu_Std_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   114   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   115   * \ingroup IfxLld_Scu_Std_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   116   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   117  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   118  #ifndef IFXSCUCCU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   119  #define IFXSCUCCU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   120  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   121  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   122  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   123  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   125  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   126  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   127  #include "Cpu/Std/IfxCpu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   128  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   129  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   130  #include "IfxFlash_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   131  #include "_PinMap/IfxScu_PinMap.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   133  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   134  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   135  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   136  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   137  /** \brief Oscillator stability check timeout count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   138   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   139  #define IFXSCUCCU_OSC_STABLECHK_TIME (640)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   140  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   141  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   142  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   143  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   144  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   145  /** \brief Function pointer type for the hooks
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   146   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   147   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   148  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   150  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   151  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   153  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   154  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   155   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   156  /** \brief MODULE_SCU.PLLCON1.B.K1DIV, specifies the K1-Divider
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   157   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   158  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   159  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   160      IfxScuCcu_K1divider_1 = 0,      /**< \brief K1-Divider 1  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   161      IfxScuCcu_K1divider_2,          /**< \brief K1-Divider 2  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   162      IfxScuCcu_K1divider_3,          /**< \brief K1-Divider 3  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   163      IfxScuCcu_K1divider_4,          /**< \brief K1-Divider 4  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   164      IfxScuCcu_K1divider_5,          /**< \brief K1-Divider 5  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   165      IfxScuCcu_K1divider_6,          /**< \brief K1-Divider 6  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   166      IfxScuCcu_K1divider_7,          /**< \brief K1-Divider 7  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   167      IfxScuCcu_K1divider_8,          /**< \brief K1-Divider 8  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   168      IfxScuCcu_K1divider_9,          /**< \brief K1-Divider 9  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   169      IfxScuCcu_K1divider_10,         /**< \brief K1-Divider 10  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   170      IfxScuCcu_K1divider_11,         /**< \brief K1-Divider 11  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   171      IfxScuCcu_K1divider_12,         /**< \brief K1-Divider 12  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   172      IfxScuCcu_K1divider_13,         /**< \brief K1-Divider 13  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   173      IfxScuCcu_K1divider_14,         /**< \brief K1-Divider 14  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   174      IfxScuCcu_K1divider_15,         /**< \brief K1-Divider 15  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   175      IfxScuCcu_K1divider_16,         /**< \brief K1-Divider 16  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   176      IfxScuCcu_K1divider_17,         /**< \brief K1-Divider 17  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   177      IfxScuCcu_K1divider_18,         /**< \brief K1-Divider 18  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   178      IfxScuCcu_K1divider_19,         /**< \brief K1-Divider 19  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   179      IfxScuCcu_K1divider_20,         /**< \brief K1-Divider 20  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   180      IfxScuCcu_K1divider_21,         /**< \brief K1-Divider 21  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   181      IfxScuCcu_K1divider_22,         /**< \brief K1-Divider 22  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   182      IfxScuCcu_K1divider_23,         /**< \brief K1-Divider 23  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   183      IfxScuCcu_K1divider_24,         /**< \brief K1-Divider 24  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   184      IfxScuCcu_K1divider_25,         /**< \brief K1-Divider 25  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   185      IfxScuCcu_K1divider_26,         /**< \brief K1-Divider 26  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   186      IfxScuCcu_K1divider_27,         /**< \brief K1-Divider 27  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   187      IfxScuCcu_K1divider_28,         /**< \brief K1-Divider 28  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   188      IfxScuCcu_K1divider_29,         /**< \brief K1-Divider 29  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   189      IfxScuCcu_K1divider_30,         /**< \brief K1-Divider 30  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   190      IfxScuCcu_K1divider_31,         /**< \brief K1-Divider 31  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   191      IfxScuCcu_K1divider_32,         /**< \brief K1-Divider 32  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   192      IfxScuCcu_K1divider_33,         /**< \brief K1-Divider 33  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   193      IfxScuCcu_K1divider_34,         /**< \brief K1-Divider 34  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   194      IfxScuCcu_K1divider_35,         /**< \brief K1-Divider 35  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   195      IfxScuCcu_K1divider_36,         /**< \brief K1-Divider 36  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   196      IfxScuCcu_K1divider_37,         /**< \brief K1-Divider 37  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   197      IfxScuCcu_K1divider_38,         /**< \brief K1-Divider 38  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   198      IfxScuCcu_K1divider_39,         /**< \brief K1-Divider 39  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   199      IfxScuCcu_K1divider_40,         /**< \brief K1-Divider 40  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   200      IfxScuCcu_K1divider_41,         /**< \brief K1-Divider 41  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   201      IfxScuCcu_K1divider_42,         /**< \brief K1-Divider 42  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   202      IfxScuCcu_K1divider_43,         /**< \brief K1-Divider 43  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   203      IfxScuCcu_K1divider_44,         /**< \brief K1-Divider 44  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   204      IfxScuCcu_K1divider_45,         /**< \brief K1-Divider 45  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   205      IfxScuCcu_K1divider_46,         /**< \brief K1-Divider 46  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   206      IfxScuCcu_K1divider_47,         /**< \brief K1-Divider 47  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   207      IfxScuCcu_K1divider_48,         /**< \brief K1-Divider 48  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   208      IfxScuCcu_K1divider_49,         /**< \brief K1-Divider 49  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   209      IfxScuCcu_K1divider_50,         /**< \brief K1-Divider 50  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   210      IfxScuCcu_K1divider_51,         /**< \brief K1-Divider 51  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   211      IfxScuCcu_K1divider_52,         /**< \brief K1-Divider 52  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   212      IfxScuCcu_K1divider_53,         /**< \brief K1-Divider 53  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   213      IfxScuCcu_K1divider_54,         /**< \brief K1-Divider 54  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   214      IfxScuCcu_K1divider_55,         /**< \brief K1-Divider 55  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   215      IfxScuCcu_K1divider_56,         /**< \brief K1-Divider 56  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   216      IfxScuCcu_K1divider_57,         /**< \brief K1-Divider 57  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   217      IfxScuCcu_K1divider_58,         /**< \brief K1-Divider 58  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   218      IfxScuCcu_K1divider_59,         /**< \brief K1-Divider 59  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   219      IfxScuCcu_K1divider_60,         /**< \brief K1-Divider 60  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   220      IfxScuCcu_K1divider_61,         /**< \brief K1-Divider 61  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   221      IfxScuCcu_K1divider_62,         /**< \brief K1-Divider 62  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   222      IfxScuCcu_K1divider_63,         /**< \brief K1-Divider 63  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   223      IfxScuCcu_K1divider_64,         /**< \brief K1-Divider 64  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   224      IfxScuCcu_K1divider_65,         /**< \brief K1-Divider 65  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   225      IfxScuCcu_K1divider_66,         /**< \brief K1-Divider 66  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   226      IfxScuCcu_K1divider_67,         /**< \brief K1-Divider 67  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   227      IfxScuCcu_K1divider_68,         /**< \brief K1-Divider 68  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   228      IfxScuCcu_K1divider_69,         /**< \brief K1-Divider 69  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   229      IfxScuCcu_K1divider_70,         /**< \brief K1-Divider 70  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   230      IfxScuCcu_K1divider_71,         /**< \brief K1-Divider 71  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   231      IfxScuCcu_K1divider_72,         /**< \brief K1-Divider 72  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   232      IfxScuCcu_K1divider_73,         /**< \brief K1-Divider 73  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   233      IfxScuCcu_K1divider_74,         /**< \brief K1-Divider 74  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   234      IfxScuCcu_K1divider_75,         /**< \brief K1-Divider 75  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   235      IfxScuCcu_K1divider_76,         /**< \brief K1-Divider 76  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   236      IfxScuCcu_K1divider_77,         /**< \brief K1-Divider 77  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   237      IfxScuCcu_K1divider_78,         /**< \brief K1-Divider 78  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   238      IfxScuCcu_K1divider_79,         /**< \brief K1-Divider 79  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   239      IfxScuCcu_K1divider_80,         /**< \brief K1-Divider 80  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   240      IfxScuCcu_K1divider_81,         /**< \brief K1-Divider 81  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   241      IfxScuCcu_K1divider_82,         /**< \brief K1-Divider 82  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   242      IfxScuCcu_K1divider_83,         /**< \brief K1-Divider 83  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   243      IfxScuCcu_K1divider_84,         /**< \brief K1-Divider 84  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   244      IfxScuCcu_K1divider_85,         /**< \brief K1-Divider 85  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   245      IfxScuCcu_K1divider_86,         /**< \brief K1-Divider 86  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   246      IfxScuCcu_K1divider_87,         /**< \brief K1-Divider 87  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   247      IfxScuCcu_K1divider_88,         /**< \brief K1-Divider 88  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   248      IfxScuCcu_K1divider_89,         /**< \brief K1-Divider 89  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   249      IfxScuCcu_K1divider_90,         /**< \brief K1-Divider 90  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   250      IfxScuCcu_K1divider_91,         /**< \brief K1-Divider 91  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   251      IfxScuCcu_K1divider_92,         /**< \brief K1-Divider 92  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   252      IfxScuCcu_K1divider_93,         /**< \brief K1-Divider 93  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   253      IfxScuCcu_K1divider_94,         /**< \brief K1-Divider 94  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   254      IfxScuCcu_K1divider_95,         /**< \brief K1-Divider 95  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   255      IfxScuCcu_K1divider_96,         /**< \brief K1-Divider 96  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   256      IfxScuCcu_K1divider_97,         /**< \brief K1-Divider 97  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   257      IfxScuCcu_K1divider_98,         /**< \brief K1-Divider 98  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   258      IfxScuCcu_K1divider_99,         /**< \brief K1-Divider 99  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   259      IfxScuCcu_K1divider_100,        /**< \brief K1-Divider 100  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   260      IfxScuCcu_K1divider_101,        /**< \brief K1-Divider 101  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   261      IfxScuCcu_K1divider_102,        /**< \brief K1-Divider 102  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   262      IfxScuCcu_K1divider_103,        /**< \brief K1-Divider 103  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   263      IfxScuCcu_K1divider_104,        /**< \brief K1-Divider 104  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   264      IfxScuCcu_K1divider_105,        /**< \brief K1-Divider 105  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   265      IfxScuCcu_K1divider_106,        /**< \brief K1-Divider 106  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   266      IfxScuCcu_K1divider_107,        /**< \brief K1-Divider 107  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   267      IfxScuCcu_K1divider_108,        /**< \brief K1-Divider 108  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   268      IfxScuCcu_K1divider_109,        /**< \brief K1-Divider 109  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   269      IfxScuCcu_K1divider_110,        /**< \brief K1-Divider 110  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   270      IfxScuCcu_K1divider_111,        /**< \brief K1-Divider 111  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   271      IfxScuCcu_K1divider_112,        /**< \brief K1-Divider 112  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   272      IfxScuCcu_K1divider_113,        /**< \brief K1-Divider 113  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   273      IfxScuCcu_K1divider_114,        /**< \brief K1-Divider 114  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   274      IfxScuCcu_K1divider_115,        /**< \brief K1-Divider 115  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   275      IfxScuCcu_K1divider_116,        /**< \brief K1-Divider 116  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   276      IfxScuCcu_K1divider_117,        /**< \brief K1-Divider 117  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   277      IfxScuCcu_K1divider_118,        /**< \brief K1-Divider 118  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   278      IfxScuCcu_K1divider_119,        /**< \brief K1-Divider 119  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   279      IfxScuCcu_K1divider_120,        /**< \brief K1-Divider 120  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   280      IfxScuCcu_K1divider_121,        /**< \brief K1-Divider 121  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   281      IfxScuCcu_K1divider_122,        /**< \brief K1-Divider 122  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   282      IfxScuCcu_K1divider_123,        /**< \brief K1-Divider 123  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   283      IfxScuCcu_K1divider_124,        /**< \brief K1-Divider 124  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   284      IfxScuCcu_K1divider_125,        /**< \brief K1-Divider 125  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   285      IfxScuCcu_K1divider_126,        /**< \brief K1-Divider 126  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   286      IfxScuCcu_K1divider_127,        /**< \brief K1-Divider 127  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   287      IfxScuCcu_K1divider_128         /**< \brief K1-Divider 128  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   288  } IfxScuCcu_K1divider;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   290  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   291   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   292  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   293  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   294      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   295      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   296      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   297      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   298      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   299      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   300      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   301      IfxScuCcu_K2divider_8,          /**< \brief K2-Divider 8  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_K2divider_9,          /**< \brief K2-Divider 9  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_K2divider_10,         /**< \brief K2-Divider 10  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_K2divider_11,         /**< \brief K2-Divider 11  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   305      IfxScuCcu_K2divider_12,         /**< \brief K2-Divider 12  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   306      IfxScuCcu_K2divider_13,         /**< \brief K2-Divider 13  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   307      IfxScuCcu_K2divider_14,         /**< \brief K2-Divider 14  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   308      IfxScuCcu_K2divider_15,         /**< \brief K2-Divider 15  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   309      IfxScuCcu_K2divider_16,         /**< \brief K2-Divider 16  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   310      IfxScuCcu_K2divider_17,         /**< \brief K2-Divider 17  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_18,         /**< \brief K2-Divider 18  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_19,         /**< \brief K2-Divider 19  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_20,         /**< \brief K2-Divider 20  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_21,         /**< \brief K2-Divider 21  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_22,         /**< \brief K2-Divider 22  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_23,         /**< \brief K2-Divider 23  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_24,         /**< \brief K2-Divider 24  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_25,         /**< \brief K2-Divider 25  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   319      IfxScuCcu_K2divider_26,         /**< \brief K2-Divider 26  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   320      IfxScuCcu_K2divider_27,         /**< \brief K2-Divider 27  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   321      IfxScuCcu_K2divider_28,         /**< \brief K2-Divider 28  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   322      IfxScuCcu_K2divider_29,         /**< \brief K2-Divider 29  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   323      IfxScuCcu_K2divider_30,         /**< \brief K2-Divider 30  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   324      IfxScuCcu_K2divider_31,         /**< \brief K2-Divider 31  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K2divider_32,         /**< \brief K2-Divider 32  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K2divider_33,         /**< \brief K2-Divider 33  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K2divider_34,         /**< \brief K2-Divider 34  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K2divider_35,         /**< \brief K2-Divider 35  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K2divider_36,         /**< \brief K2-Divider 36  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K2divider_37,         /**< \brief K2-Divider 37  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K2divider_38,         /**< \brief K2-Divider 38  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K2divider_39,         /**< \brief K2-Divider 39  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   333      IfxScuCcu_K2divider_40,         /**< \brief K2-Divider 40  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   334      IfxScuCcu_K2divider_41,         /**< \brief K2-Divider 41  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   335      IfxScuCcu_K2divider_42,         /**< \brief K2-Divider 42  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   336      IfxScuCcu_K2divider_43,         /**< \brief K2-Divider 43  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   337      IfxScuCcu_K2divider_44,         /**< \brief K2-Divider 44  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   338      IfxScuCcu_K2divider_45,         /**< \brief K2-Divider 45  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   339      IfxScuCcu_K2divider_46,         /**< \brief K2-Divider 46  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_K2divider_47,         /**< \brief K2-Divider 47  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_K2divider_48,         /**< \brief K2-Divider 48  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_K2divider_49,         /**< \brief K2-Divider 49  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_K2divider_50,         /**< \brief K2-Divider 50  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   344      IfxScuCcu_K2divider_51,         /**< \brief K2-Divider 51  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   345      IfxScuCcu_K2divider_52,         /**< \brief K2-Divider 52  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   346      IfxScuCcu_K2divider_53,         /**< \brief K2-Divider 53  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   347      IfxScuCcu_K2divider_54,         /**< \brief K2-Divider 54  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   348      IfxScuCcu_K2divider_55,         /**< \brief K2-Divider 55  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   349      IfxScuCcu_K2divider_56,         /**< \brief K2-Divider 56  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_K2divider_57,         /**< \brief K2-Divider 57  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_K2divider_58,         /**< \brief K2-Divider 58  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_K2divider_59,         /**< \brief K2-Divider 59  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_K2divider_60,         /**< \brief K2-Divider 60  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_K2divider_61,         /**< \brief K2-Divider 61  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_K2divider_62,         /**< \brief K2-Divider 62  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_K2divider_63,         /**< \brief K2-Divider 63  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   357      IfxScuCcu_K2divider_64,         /**< \brief K2-Divider 64  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   358      IfxScuCcu_K2divider_65,         /**< \brief K2-Divider 65  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   359      IfxScuCcu_K2divider_66,         /**< \brief K2-Divider 66  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   360      IfxScuCcu_K2divider_67,         /**< \brief K2-Divider 67  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   361      IfxScuCcu_K2divider_68,         /**< \brief K2-Divider 68  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   362      IfxScuCcu_K2divider_69,         /**< \brief K2-Divider 69  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_K2divider_70,         /**< \brief K2-Divider 70  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_K2divider_71,         /**< \brief K2-Divider 71  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_K2divider_72,         /**< \brief K2-Divider 72  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_K2divider_73,         /**< \brief K2-Divider 73  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_K2divider_74,         /**< \brief K2-Divider 74  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_K2divider_75,         /**< \brief K2-Divider 75  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_K2divider_76,         /**< \brief K2-Divider 76  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_K2divider_77,         /**< \brief K2-Divider 77  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_K2divider_78,         /**< \brief K2-Divider 78  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_K2divider_79,         /**< \brief K2-Divider 79  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_K2divider_80,         /**< \brief K2-Divider 80  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_K2divider_81,         /**< \brief K2-Divider 81  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_K2divider_82,         /**< \brief K2-Divider 82  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_K2divider_83,         /**< \brief K2-Divider 83  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_K2divider_84,         /**< \brief K2-Divider 84  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_K2divider_85,         /**< \brief K2-Divider 85  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_K2divider_86,         /**< \brief K2-Divider 86  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_K2divider_87,         /**< \brief K2-Divider 87  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_K2divider_88,         /**< \brief K2-Divider 88  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_K2divider_89,         /**< \brief K2-Divider 89  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_K2divider_90,         /**< \brief K2-Divider 90  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_K2divider_91,         /**< \brief K2-Divider 91  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_K2divider_92,         /**< \brief K2-Divider 92  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_K2divider_93,         /**< \brief K2-Divider 93  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_K2divider_94,         /**< \brief K2-Divider 94  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_K2divider_95,         /**< \brief K2-Divider 95  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_K2divider_96,         /**< \brief K2-Divider 96  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_K2divider_97,         /**< \brief K2-Divider 97  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_K2divider_98,         /**< \brief K2-Divider 98  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_K2divider_99,         /**< \brief K2-Divider 99  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_K2divider_100,        /**< \brief K2-Divider 100  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_K2divider_101,        /**< \brief K2-Divider 101  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_K2divider_102,        /**< \brief K2-Divider 102  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_K2divider_103,        /**< \brief K2-Divider 103  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_K2divider_104,        /**< \brief K2-Divider 104  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_K2divider_105,        /**< \brief K2-Divider 105  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_K2divider_106,        /**< \brief K2-Divider 106  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_K2divider_107,        /**< \brief K2-Divider 107  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_K2divider_108,        /**< \brief K2-Divider 108  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_K2divider_109,        /**< \brief K2-Divider 109  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_K2divider_110,        /**< \brief K2-Divider 110  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_K2divider_111,        /**< \brief K2-Divider 111  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_K2divider_112,        /**< \brief K2-Divider 112  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_K2divider_113,        /**< \brief K2-Divider 113  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_K2divider_114,        /**< \brief K2-Divider 114  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_K2divider_115,        /**< \brief K2-Divider 115  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_K2divider_116,        /**< \brief K2-Divider 116  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_K2divider_117,        /**< \brief K2-Divider 117  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_K2divider_118,        /**< \brief K2-Divider 118  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_K2divider_119,        /**< \brief K2-Divider 119  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_K2divider_120,        /**< \brief K2-Divider 120  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_K2divider_121,        /**< \brief K2-Divider 121  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_K2divider_122,        /**< \brief K2-Divider 122  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_K2divider_123,        /**< \brief K2-Divider 123  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_K2divider_124,        /**< \brief K2-Divider 124  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_K2divider_125,        /**< \brief K2-Divider 125  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_K2divider_126,        /**< \brief K2-Divider 126  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_K2divider_127,        /**< \brief K2-Divider 127  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_K2divider_128         /**< \brief K2-Divider 128  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   422  } IfxScuCcu_K2divider;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   423  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   424  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   425   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   426  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   427  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_K3divider_8,          /**< \brief K3-Divider 8  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_K3divider_9,          /**< \brief K3-Divider 9  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_K3divider_10,         /**< \brief K3-Divider 10  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_K3divider_11,         /**< \brief K3-Divider 11  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_K3divider_12,         /**< \brief K3-Divider 12  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_K3divider_13,         /**< \brief K3-Divider 13  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_K3divider_14,         /**< \brief K3-Divider 14  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_K3divider_15,         /**< \brief K3-Divider 15  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_K3divider_16,         /**< \brief K3-Divider 16  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_K3divider_17,         /**< \brief K3-Divider 17  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_K3divider_18,         /**< \brief K3-Divider 18  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_K3divider_19,         /**< \brief K3-Divider 19  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_K3divider_20,         /**< \brief K3-Divider 20  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_K3divider_21,         /**< \brief K3-Divider 21  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_K3divider_22,         /**< \brief K3-Divider 22  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_K3divider_23,         /**< \brief K3-Divider 23  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_K3divider_24,         /**< \brief K3-Divider 24  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_K3divider_25,         /**< \brief K3-Divider 25  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_K3divider_26,         /**< \brief K3-Divider 26  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_K3divider_27,         /**< \brief K3-Divider 27  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_K3divider_28,         /**< \brief K3-Divider 28  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_K3divider_29,         /**< \brief K3-Divider 29  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_K3divider_30,         /**< \brief K3-Divider 30  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_K3divider_31,         /**< \brief K3-Divider 31  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_K3divider_32,         /**< \brief K3-Divider 32  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_K3divider_33,         /**< \brief K3-Divider 33  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_K3divider_34,         /**< \brief K3-Divider 34  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_K3divider_35,         /**< \brief K3-Divider 35  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_K3divider_36,         /**< \brief K3-Divider 36  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_K3divider_37,         /**< \brief K3-Divider 37  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_K3divider_38,         /**< \brief K3-Divider 38  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_K3divider_39,         /**< \brief K3-Divider 39  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_K3divider_40,         /**< \brief K3-Divider 40  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_K3divider_41,         /**< \brief K3-Divider 41  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_K3divider_42,         /**< \brief K3-Divider 42  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_K3divider_43,         /**< \brief K3-Divider 43  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_K3divider_44,         /**< \brief K3-Divider 44  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_K3divider_45,         /**< \brief K3-Divider 45  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_K3divider_46,         /**< \brief K3-Divider 46  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_K3divider_47,         /**< \brief K3-Divider 47  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_K3divider_48,         /**< \brief K3-Divider 48  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_K3divider_49,         /**< \brief K3-Divider 49  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_K3divider_50,         /**< \brief K3-Divider 50  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_K3divider_51,         /**< \brief K3-Divider 51  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_K3divider_52,         /**< \brief K3-Divider 52  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_K3divider_53,         /**< \brief K3-Divider 53  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_K3divider_54,         /**< \brief K3-Divider 54  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_K3divider_55,         /**< \brief K3-Divider 55  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_K3divider_56,         /**< \brief K3-Divider 56  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_K3divider_57,         /**< \brief K3-Divider 57  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_K3divider_58,         /**< \brief K3-Divider 58  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_K3divider_59,         /**< \brief K3-Divider 59  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_K3divider_60,         /**< \brief K3-Divider 60  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_K3divider_61,         /**< \brief K3-Divider 61  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_K3divider_62,         /**< \brief K3-Divider 62  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_K3divider_63,         /**< \brief K3-Divider 63  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   491      IfxScuCcu_K3divider_64,         /**< \brief K3-Divider 64  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   492      IfxScuCcu_K3divider_65,         /**< \brief K3-Divider 65  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   493      IfxScuCcu_K3divider_66,         /**< \brief K3-Divider 66  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   494      IfxScuCcu_K3divider_67,         /**< \brief K3-Divider 67  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   495      IfxScuCcu_K3divider_68,         /**< \brief K3-Divider 68  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   496      IfxScuCcu_K3divider_69,         /**< \brief K3-Divider 69  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_K3divider_70,         /**< \brief K3-Divider 70  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_K3divider_71,         /**< \brief K3-Divider 71  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_K3divider_72,         /**< \brief K3-Divider 72  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_K3divider_73,         /**< \brief K3-Divider 73  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_K3divider_74,         /**< \brief K3-Divider 74  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_K3divider_75,         /**< \brief K3-Divider 75  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_K3divider_76,         /**< \brief K3-Divider 76  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_K3divider_77,         /**< \brief K3-Divider 77  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   505      IfxScuCcu_K3divider_78,         /**< \brief K3-Divider 78  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   506      IfxScuCcu_K3divider_79,         /**< \brief K3-Divider 79  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   507      IfxScuCcu_K3divider_80,         /**< \brief K3-Divider 80  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   508      IfxScuCcu_K3divider_81,         /**< \brief K3-Divider 81  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   509      IfxScuCcu_K3divider_82,         /**< \brief K3-Divider 82  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   510      IfxScuCcu_K3divider_83,         /**< \brief K3-Divider 83  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   511      IfxScuCcu_K3divider_84,         /**< \brief K3-Divider 84  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_K3divider_85,         /**< \brief K3-Divider 85  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_K3divider_86,         /**< \brief K3-Divider 86  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_K3divider_87,         /**< \brief K3-Divider 87  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   515      IfxScuCcu_K3divider_88,         /**< \brief K3-Divider 88  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   516      IfxScuCcu_K3divider_89,         /**< \brief K3-Divider 89  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   517      IfxScuCcu_K3divider_90,         /**< \brief K3-Divider 90  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   518      IfxScuCcu_K3divider_91,         /**< \brief K3-Divider 91  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   519      IfxScuCcu_K3divider_92,         /**< \brief K3-Divider 92  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   520      IfxScuCcu_K3divider_93,         /**< \brief K3-Divider 93  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_K3divider_94,         /**< \brief K3-Divider 94  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_K3divider_95,         /**< \brief K3-Divider 95  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_K3divider_96,         /**< \brief K3-Divider 96  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_K3divider_97,         /**< \brief K3-Divider 97  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   525      IfxScuCcu_K3divider_98,         /**< \brief K3-Divider 98  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   526      IfxScuCcu_K3divider_99,         /**< \brief K3-Divider 99  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   527      IfxScuCcu_K3divider_100,        /**< \brief K3-Divider 100  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   528      IfxScuCcu_K3divider_101,        /**< \brief K3-Divider 101  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   529      IfxScuCcu_K3divider_102,        /**< \brief K3-Divider 102  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   530      IfxScuCcu_K3divider_103,        /**< \brief K3-Divider 103  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   531      IfxScuCcu_K3divider_104,        /**< \brief K3-Divider 104  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   532      IfxScuCcu_K3divider_105,        /**< \brief K3-Divider 105  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_K3divider_106,        /**< \brief K3-Divider 106  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_K3divider_107,        /**< \brief K3-Divider 107  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   535      IfxScuCcu_K3divider_108,        /**< \brief K3-Divider 108  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   536      IfxScuCcu_K3divider_109,        /**< \brief K3-Divider 109  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   537      IfxScuCcu_K3divider_110,        /**< \brief K3-Divider 110  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   538      IfxScuCcu_K3divider_111,        /**< \brief K3-Divider 111  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   539      IfxScuCcu_K3divider_112,        /**< \brief K3-Divider 112  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   540      IfxScuCcu_K3divider_113,        /**< \brief K3-Divider 113  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   541      IfxScuCcu_K3divider_114,        /**< \brief K3-Divider 114  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   542      IfxScuCcu_K3divider_115,        /**< \brief K3-Divider 115  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   543      IfxScuCcu_K3divider_116,        /**< \brief K3-Divider 116  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   544      IfxScuCcu_K3divider_117,        /**< \brief K3-Divider 117  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   545      IfxScuCcu_K3divider_118,        /**< \brief K3-Divider 118  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   546      IfxScuCcu_K3divider_119,        /**< \brief K3-Divider 119  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   547      IfxScuCcu_K3divider_120,        /**< \brief K3-Divider 120  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   548      IfxScuCcu_K3divider_121,        /**< \brief K3-Divider 121  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   549      IfxScuCcu_K3divider_122,        /**< \brief K3-Divider 122  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   550      IfxScuCcu_K3divider_123,        /**< \brief K3-Divider 123  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   551      IfxScuCcu_K3divider_124,        /**< \brief K3-Divider 124  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   552      IfxScuCcu_K3divider_125,        /**< \brief K3-Divider 125  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   553      IfxScuCcu_K3divider_126,        /**< \brief K3-Divider 126  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   554      IfxScuCcu_K3divider_127,        /**< \brief K3-Divider 127  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   555      IfxScuCcu_K3divider_128         /**< \brief K3-Divider 128  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   556  } IfxScuCcu_K3divider;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   557  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   558  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   562      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   563      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   564      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   565      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   566      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   567      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   568      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   569      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   570      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   571      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   572      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   573      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   574      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   575      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   576      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   577      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   578      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   579      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   580      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   581      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   582      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   583      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   584      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   585      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   586      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   587      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   588      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   589      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   590      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   591      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   595      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   596      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   597      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   598      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   599      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   600      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   601      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   602      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   603      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   604      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   605      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   606      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   607      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   608      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   609      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   610      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   611      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   612      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   613      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   614      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   615      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   616      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   627      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   628      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   629      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   630      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   631      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   632      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   634      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   635      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   636      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   637      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   638      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   639      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   640      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   641      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   642      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   643      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   644      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   645      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   646      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   647      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   648      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   649      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   650      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   653      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   654      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   655      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   656      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   657      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   658      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   659      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   660      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   664      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   665      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   666      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   667      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   668      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   669      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   670      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   671      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   672      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   673      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   674      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   675      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   676      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   677      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   678      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   679      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   680      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   681      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   682      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   683      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   684      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   685      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   686      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   687      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   688      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   689      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   690  } IfxScuCcu_Ndivider;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   692  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   693   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   694  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   695  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   696      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   697      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   698      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   699      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   700      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   701      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   702      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   703      IfxScuCcu_Pdivider_8,          /**< \brief  P-divider 8  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   704      IfxScuCcu_Pdivider_9,          /**< \brief  P-divider 9  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   705      IfxScuCcu_Pdivider_10,         /**< \brief  P-divider 10  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   706      IfxScuCcu_Pdivider_11,         /**< \brief  P-divider 11  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   707      IfxScuCcu_Pdivider_12,         /**< \brief  P-divider 12  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   708      IfxScuCcu_Pdivider_13,         /**< \brief  P-divider 13  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   709      IfxScuCcu_Pdivider_14,         /**< \brief  P-divider 14  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   710      IfxScuCcu_Pdivider_15,         /**< \brief  P-divider 15  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   711      IfxScuCcu_Pdivider_16          /**< \brief  P-divider 16  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   712  } IfxScuCcu_Pdivider;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   714  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   715  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   716  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   717  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   718  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   719  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   720  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   721   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   722  /** \brief Configuration structure type for CCUCON registers.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   723   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   724  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   725  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   726      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   727      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   728  } IfxScuCcu_CcuconRegConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   729  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   730  /** \brief Configuration structure type for the Pll initial step.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   731   * This structure must be used to configure the P, N and K2 dividers for initial step.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   733  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   734  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   735      uint8   pDivider;        /**< \brief P divider value for basic (initial) step */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   736      uint8   nDivider;        /**< \brief N divider value for basic (initial) step */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   737      uint8   k2Initial;       /**< \brief K2 divider value for basic (initial) step */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   738      float32 waitTime;        /**< \brief Wait time for for basic (initial) step */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   739  } IfxScuCcu_InitialStepConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   740  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   741  /** \brief Configuration structure type for the Pll Steps for current jump control.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   742   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   743  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   744  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   745      uint8                          k2Step;             /**< \brief K2 divider value for this step. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   746      float32                        waitTime;           /**< \brief Wait time for for this step. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   747      IfxScuCcu_PllStepsFunctionHook hookFunction;       /**< \brief Hook function called at the end of this step. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   748  } IfxScuCcu_PllStepsConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   749  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   751  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   752  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   753   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   754  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   755   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   756  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   757  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   758      IfxScuCcu_CcuconRegConfig ccucon0;       /**< \brief CCUCON0 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   759      IfxScuCcu_CcuconRegConfig ccucon1;       /**< \brief CCUCON1 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   760      IfxScuCcu_CcuconRegConfig ccucon2;       /**< \brief CCUCON2 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   761      IfxScuCcu_CcuconRegConfig ccucon5;       /**< \brief CCUCON5 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   762      IfxScuCcu_CcuconRegConfig ccucon6;       /**< \brief CCUCON6 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   763      IfxScuCcu_CcuconRegConfig ccucon7;       /**< \brief CCUCON7 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   764  } IfxScuCcu_ClockDistributionConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   766  /** \brief Configuration structure type for the Flash waitstate configuration.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   767   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   768  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   769  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   770      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   771      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   772  } IfxScuCcu_FlashWaitstateConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   773  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief Configuration structure type for the System Pll step.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   775   * This structure must be used to configure the P, N and K1 dividers .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   776   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   777  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   778  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   779      uint8                       numOfPllDividerSteps;       /**< \brief Number of PLL divider steps during clock throttling. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   780      IfxScuCcu_PllStepsConfig   *pllDividerStep;             /**< \brief Pointer to the array of Pll divider step configuration. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   781      IfxScuCcu_InitialStepConfig pllInitialStep;             /**< \brief Configuration of first step which is same as internal osc frequency. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   782  } IfxScuCcu_SysPllConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   783  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   784  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   786  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   787   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   788  /** \brief Configuration structure SCU module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   789   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   790  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   791  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   792      IfxScuCcu_SysPllConfig            sysPll;                         /**< \brief System PLL configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   793      IfxScuCcu_ClockDistributionConfig clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   794      IfxScuCcu_FlashWaitstateConfig    flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   795      uint32                            xtalFrequency;                  /**< \brief Xtal Frequency */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   796  } IfxScuCcu_Config;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   797  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   798  /** \brief Configuration structure for E-ray PLL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   799   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   800  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   801  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   802      IfxScuCcu_InitialStepConfig pllInitialStep;       /**< \brief Configuration of first step which is same as internal osc frequency. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   803  } IfxScuCcu_ErayPllConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   804  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   806  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   807  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   808   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   809  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   810  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   811  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   812  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   813  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   814  /** \brief API to get EVR Oscillator frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   815   * This API returns the constant which is specific to the ScuCcu of the controller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   816   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   817   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   818  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   819  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   820  /** \brief API to get actual PLL2 (K3 Divider for ADC clock) frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   821   * This API returns the  PLL2ERAY frequency based on the K3 divider value in PLLERAYCON and the VCO frequency. This frequency is one of the configurable inputs to ADC clock.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   822   * \return PLL2ERAY (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   823   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   824  IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   825  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get actual PLL2 (K3 Divider for ADC clock) frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the  PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency. This frequency is one of the configurable inputs to ADC clock.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return PLL2 (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   831  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief Returns the clock source selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   833   * \return Clock source selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   835  IFX_INLINE IfxScu_CCUCON0_CLKSEL IfxScuCcu_getSourceSelection(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   837  /** \brief API to get STM divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   838   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   839   * \return STM frequency (fSTM) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   840   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   841  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   842  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   843  /** \brief API to get CAN divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   844   * This API returns the fCAN frequency based on the divider value in CCUCON register and fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   845   * \return STM frequency (fSTM) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   846   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   847  IFX_INLINE float32 IfxScuCcu_getCanFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   848  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   849  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   850  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   851  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   852  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   853  /** \brief API to get BAUD1 divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   854   * This API returns the based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   855   * \return Baud1 frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   856   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   857  IFX_EXTERN float32 IfxScuCcu_getBaud1Frequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   858  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   859  /** \brief API to get BAUD2 divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   860   * This API returns the Baud2 frequency based on the divider value in CCUCON register and the fMAX.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   861   * \return Baud2 frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   862   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   863  IFX_EXTERN float32 IfxScuCcu_getBaud2Frequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   864  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   865  /** \brief API to get BBB divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   866   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   867   * \return BBB frequency (fBBB) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   868   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   869  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   870  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   871  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   872   * \param cpu CPU number for which effective fCPU is sought
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   873   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   874   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   875  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   876  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   877  /** \brief API to get FSI2 divider frequency in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   878   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   879   * \return FSI2 frequency (fFSI2) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   880   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   881  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   882  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   883  /** \brief API to get FSI divider frequency in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   884   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return FSI frequency (fFSI) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   888  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get FMAX divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the fMax frequency based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return Max frequency (fMAX) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getMaxFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   894  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief get source frequency fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Module frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief API to get Oscillator 0 frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   903   * \return Osc0 frequency (fOSC0) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   904   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   905  IFX_EXTERN float32 IfxScuCcu_getOsc0Frequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   906  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   907  /** \brief API to get Oscillator 0 frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   908   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   909   * \return Osc frequency (fOSC) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   910   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   911  IFX_EXTERN float32 IfxScuCcu_getOscFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   912  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   913  /** \brief API to get actual PLL (Eray) frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   914   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   915   * \return frequency of Pll Eray (fPLLERAY) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   916   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   917  IFX_EXTERN float32 IfxScuCcu_getPllErayFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   918  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   919  /** \brief API to get actual ERAY PLL Voltage Controlled Oscillator frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   920   * This API returns the based on the divider values in PLLERAYCON registers and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   921   * \return Pll (Eray) VCO frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   922   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   923  IFX_EXTERN float32 IfxScuCcu_getPllErayVcoFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   924  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   925  /** \brief API to get actual PLL output frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   926   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   927   * \return Pll (fPLL) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   928   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   929  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   930  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   931  /** \brief API to get actual PLL Voltage Controlled Oscillator frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   932   * This API returns the based on the divider values in PLLCON registers and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   933   * \return Pll VCO frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   934   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   935  IFX_EXTERN float32 IfxScuCcu_getPllVcoFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   936  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   937  /** \brief get source frequency fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   938   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   939   * \return Effective fSOURCE in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   940   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   941  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   942  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   943  /** \brief API to get SPB divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   944   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   945   * \return SPB frequency (fSPB) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   947  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   949  /** \brief API to get SRI divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   950   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   951   * \return Sri frequency (fSRI) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   952   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   953  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   954  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   955  /** \brief API to set CPU frequency (with CPU divider)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   956   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   957   * \param cpu CPU number for which fCPU to be configured
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param cpuFreq Desired CPU frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   962  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to configure PLL2ERAY (K3 Divider for ADC clock) for desired frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure K3 divider value in CCUCON. The actual frequency always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param pll2ErayFreq PLL2ERAY (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual PLL2 (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   969  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to configure PLL2 (K3 Divider for ADC clock) for desired frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure K3 divider value in CCUCON. The actual frequency always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param pll2Freq PLL2 (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual PLL2 (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   976  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set SPB frequency (with SPB divider)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param spbFreq Desired SPB frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual SPB frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   983  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set SRI frequency (with SRI divider)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param sriFreq Sri frequency (fSRI) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual Sri frequency (fSRI) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   990  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   992  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   993  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   994   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   995  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   996  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   997  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   998  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1000  /** \brief The api calculates the system PLL divider values P, N, K based on given xtal frequency and PLL frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \param cfg Pointer to the configuration structure of the ScuCcu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1002   * \param fPll Desired PLL frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1003   * \return 0- Success, 1 - Failure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1004   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1005  IFX_EXTERN boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1006  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1007  /** \brief API to initialize the SCU Clock Control Unit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1008   * This API initialize the PLL with ramp steps, BUS dividers for the configuration provided by the configuration structure.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1009   * \param cfg Pointer to the configuration structure of the ScuCcu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1010   * \return Error status of the ScuCcu initialization process.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1011   * \retval TRUE: If an error occurred during initialization.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1012   * \retval FALSE: If initialization was successful.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1013   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1014  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1015  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1016  /** \brief Initializes the clock configuration with default values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1017   * \param cfg Pointer to the configuration structure of the ScuCcu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1018   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1019   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1020  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1022  /** \brief API to initialize the SCU Eray Pll
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1023   * This API initialize the Eray PLL for the configuration provided by the configuration structure.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1024   * \param cfg Pointer to the configuration structure of the Eray Pll
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1025   * \return Error status of the ScuCcu Eray Pll initialization process.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1026   * \retval TRUE: If an error occurred during initialization.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1027   * \retval FALSE: If initialization was successful.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1028   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1029  IFX_EXTERN boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1030  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1031  /** \brief Initializes the clock configuration with default values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1032   * \param cfg Pointer to the configuration structure of the ScuCcuEray Pll
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1033   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1034   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1035  IFX_EXTERN void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1036  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1037  /** \brief API to switch to Backup clock from the current PLL frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1038   * \param cfg Pointer to the configuration structure of the ScuCcu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1039   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1040   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1041  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1042  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1043  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief API to get GTMdivider frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1050   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1051   * return GTM frequency (fGTM) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1052   * \return Gtm Frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1054  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1056  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1057  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1058  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1060  /** \brief API to set GTM frequency (with GTM divider)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1061   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1062   * \param gtmFreq Desired GTM frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1063   * \return Actual GTM frequency in HZ
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1064   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1065  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1066  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1067  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1068  /*-------------------Global Exported Variables/Constants----------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1069  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1070  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1071  /** \brief Configuration structure for SCU CCU driver.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1072   * The values of this structure are defined as # defined macros in the implementation of Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1073   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1074  IFX_EXTERN IFX_CONST IfxScuCcu_Config IfxScuCcu_defaultClockConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1075  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1076  /** \brief Configuration structure for SCU CCU driver.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1077   * The values of this structure are defined as # defined macros in the implementation of Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1078   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1079  IFX_EXTERN IFX_CONST IfxScuCcu_ErayPllConfig IfxScuCcu_defaultErayPllConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1080  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1081  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1082  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1083  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1084  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1086  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1087      return IFXSCU_EVR_OSC_FREQUENCY;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1088  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1089  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1092  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1093      return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1094  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1095  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1096  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1098  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1099      float32 pll2ErayFrequency;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1101      pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
	call	IfxScuCcu_getPllErayVcoFrequency
.L784:
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf003602d)
	and	d15,#15
.L785:
	add	d15,#1
	itof	d15,d15
.L786:
	div.f	d15,d2,d15
.L509:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1103      return pll2ErayFrequency;      (inlined)
	j	.L96

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1104  }      (inlined)
.L96:
	div.f	d15,d10,d15
.L338:
	utof	d0,d9
.L510:
	mul.f	d15,d15,d0
	ftouz	d0,d15
.L511:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   453     waitFact = waitFact * SCU_CCUCON0.B.BAUD1DIV;
	j	.L97

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   454  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   455          break;
.L77:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   456  
	call	IfxScuCcu_getSriFrequency
.L512:
	mov	d10,d2
.L342:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_11_0
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    12   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    13   * Use of this file is subject to the terms of use agreed between (i) you or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    14   * the company in which ordinary course of business you are acting and (ii) 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    15   * Infineon Technologies AG or its licensees. If and as long as no such 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    16   * terms of use are agreed, use of this file is subject to following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    17  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    18  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    19   * Boost Software License - Version 1.0 - August 17th, 2003
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    20  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    21   * Permission is hereby granted, free of charge, to any person or 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    22   * organization obtaining a copy of the software and accompanying 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    23   * documentation covered by this license (the "Software") to use, reproduce,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    24   * display, distribute, execute, and transmit the Software, and to prepare
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    25   * derivative works of the Software, and to permit third-parties to whom the 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    26   * Software is furnished to do so, all subject to the following:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    27  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    28   * The copyright notices in the Software and this entire statement, including
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    29   * the above license grant, this restriction and the following disclaimer, must
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    30   * be included in all copies of the Software, in whole or in part, and all
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    31   * derivative works of the Software, unless such copies or derivative works are
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    32   * solely in the form of machine-executable object code generated by a source
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    33   * language processor.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    34  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    35   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    36   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    37   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    38   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    39   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    40   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    41   * DEALINGS IN THE SOFTWARE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    42  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    43   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    44   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_Scu SCU
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    48   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    49   * \addtogroup IfxLld_ScuCcu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    50   * \{
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    51   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    52   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    53   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    54   * In the following sections it will be described, how to integrate the driver into the application framework.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    56   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    57   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    58   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    59   * Include following header file into your C code:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    60   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    61   * #include <Scu/Std/IfxScuCcu.h>
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    62   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    63   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    64   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    65   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    66   * Declare the Clock Configuration variables in your C code:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    68   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    69   * // used globally
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    70   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    71   * // configuration for the PLL  steps
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    72   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    73   *     IFXSCU_CFG_PLL_STEPS
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    74   * };
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    75   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    76   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    77   * // Default configuration for the Clock Configuration
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    78   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    80   *        sizeof(IfxScuCcu_testPllConfigSteps) / sizeof(IfxScuCcu_PllStepsConfig),
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    81   *        (IfxScuCcu_PllStepsConfig *)IfxScuCcu_testPllConfigSteps,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    82   *        IFXSCU_CFG_PLL_INITIAL_STEP,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    83   *     },
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    84   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    85   *     IFXSCU_CFG_FLASH_WAITSTATE,
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    86   *     IFX_CFG_SCU_XTAL_FREQUENCY
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    87   * };
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    88   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    89   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    90   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    91   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    92   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    93   * The module initialisation can be done in the same function. Here an example:
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    94   * \code
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    95   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    96   *        // standard PLL & clock initialisation
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    97   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	    99   * \endcode
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   101   *    The PLL and clocks are now initialised based on the IFXSCU_CFG_XTAL_FREQ and  IFXSCU_CFG_PLL_FREQ values configured in Ifx_Cfg.h.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   103   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   104   * \}
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   105   *
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   106   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   107   * \ingroup IfxLld_Scu_Std
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   108   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   109   * \ingroup IfxLld_Scu_Std_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   110   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   111   * \ingroup IfxLld_Scu_Std_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   112   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   113   * \ingroup IfxLld_Scu_Std_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   114   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   115   * \ingroup IfxLld_Scu_Std_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   116   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   117  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   118  #ifndef IFXSCUCCU_H
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   119  #define IFXSCUCCU_H 1
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   120  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   121  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   122  /*----------------------------------Includes----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   123  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   124  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   125  #include "_Impl/IfxScu_cfg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   126  #include "Scu/Std/IfxScuWdt.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   127  #include "Cpu/Std/IfxCpu.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   128  #include "IfxStm_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   129  #include "IfxScu_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   130  #include "IfxFlash_reg.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   131  #include "_PinMap/IfxScu_PinMap.h"
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   132  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   133  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   134  /*-----------------------------------Macros-----------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   135  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   136  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   137  /** \brief Oscillator stability check timeout count
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   138   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   139  #define IFXSCUCCU_OSC_STABLECHK_TIME (640)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   140  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   141  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   142  /*------------------------------Type Definitions------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   143  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   144  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   145  /** \brief Function pointer type for the hooks
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   146   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   147   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   148  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   149  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   150  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   151  /*--------------------------------Enumerations--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   152  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   153  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   154  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   155   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   156  /** \brief MODULE_SCU.PLLCON1.B.K1DIV, specifies the K1-Divider
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   157   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   158  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   159  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   160      IfxScuCcu_K1divider_1 = 0,      /**< \brief K1-Divider 1  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   161      IfxScuCcu_K1divider_2,          /**< \brief K1-Divider 2  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   162      IfxScuCcu_K1divider_3,          /**< \brief K1-Divider 3  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   163      IfxScuCcu_K1divider_4,          /**< \brief K1-Divider 4  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   164      IfxScuCcu_K1divider_5,          /**< \brief K1-Divider 5  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   165      IfxScuCcu_K1divider_6,          /**< \brief K1-Divider 6  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   166      IfxScuCcu_K1divider_7,          /**< \brief K1-Divider 7  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   167      IfxScuCcu_K1divider_8,          /**< \brief K1-Divider 8  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   168      IfxScuCcu_K1divider_9,          /**< \brief K1-Divider 9  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   169      IfxScuCcu_K1divider_10,         /**< \brief K1-Divider 10  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   170      IfxScuCcu_K1divider_11,         /**< \brief K1-Divider 11  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   171      IfxScuCcu_K1divider_12,         /**< \brief K1-Divider 12  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   172      IfxScuCcu_K1divider_13,         /**< \brief K1-Divider 13  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   173      IfxScuCcu_K1divider_14,         /**< \brief K1-Divider 14  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   174      IfxScuCcu_K1divider_15,         /**< \brief K1-Divider 15  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   175      IfxScuCcu_K1divider_16,         /**< \brief K1-Divider 16  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   176      IfxScuCcu_K1divider_17,         /**< \brief K1-Divider 17  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   177      IfxScuCcu_K1divider_18,         /**< \brief K1-Divider 18  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   178      IfxScuCcu_K1divider_19,         /**< \brief K1-Divider 19  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   179      IfxScuCcu_K1divider_20,         /**< \brief K1-Divider 20  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   180      IfxScuCcu_K1divider_21,         /**< \brief K1-Divider 21  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   181      IfxScuCcu_K1divider_22,         /**< \brief K1-Divider 22  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   182      IfxScuCcu_K1divider_23,         /**< \brief K1-Divider 23  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   183      IfxScuCcu_K1divider_24,         /**< \brief K1-Divider 24  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   184      IfxScuCcu_K1divider_25,         /**< \brief K1-Divider 25  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   185      IfxScuCcu_K1divider_26,         /**< \brief K1-Divider 26  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   186      IfxScuCcu_K1divider_27,         /**< \brief K1-Divider 27  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   187      IfxScuCcu_K1divider_28,         /**< \brief K1-Divider 28  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   188      IfxScuCcu_K1divider_29,         /**< \brief K1-Divider 29  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   189      IfxScuCcu_K1divider_30,         /**< \brief K1-Divider 30  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   190      IfxScuCcu_K1divider_31,         /**< \brief K1-Divider 31  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   191      IfxScuCcu_K1divider_32,         /**< \brief K1-Divider 32  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   192      IfxScuCcu_K1divider_33,         /**< \brief K1-Divider 33  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   193      IfxScuCcu_K1divider_34,         /**< \brief K1-Divider 34  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   194      IfxScuCcu_K1divider_35,         /**< \brief K1-Divider 35  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   195      IfxScuCcu_K1divider_36,         /**< \brief K1-Divider 36  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   196      IfxScuCcu_K1divider_37,         /**< \brief K1-Divider 37  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   197      IfxScuCcu_K1divider_38,         /**< \brief K1-Divider 38  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   198      IfxScuCcu_K1divider_39,         /**< \brief K1-Divider 39  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   199      IfxScuCcu_K1divider_40,         /**< \brief K1-Divider 40  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   200      IfxScuCcu_K1divider_41,         /**< \brief K1-Divider 41  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   201      IfxScuCcu_K1divider_42,         /**< \brief K1-Divider 42  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   202      IfxScuCcu_K1divider_43,         /**< \brief K1-Divider 43  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   203      IfxScuCcu_K1divider_44,         /**< \brief K1-Divider 44  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   204      IfxScuCcu_K1divider_45,         /**< \brief K1-Divider 45  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   205      IfxScuCcu_K1divider_46,         /**< \brief K1-Divider 46  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   206      IfxScuCcu_K1divider_47,         /**< \brief K1-Divider 47  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   207      IfxScuCcu_K1divider_48,         /**< \brief K1-Divider 48  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   208      IfxScuCcu_K1divider_49,         /**< \brief K1-Divider 49  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   209      IfxScuCcu_K1divider_50,         /**< \brief K1-Divider 50  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   210      IfxScuCcu_K1divider_51,         /**< \brief K1-Divider 51  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   211      IfxScuCcu_K1divider_52,         /**< \brief K1-Divider 52  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   212      IfxScuCcu_K1divider_53,         /**< \brief K1-Divider 53  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   213      IfxScuCcu_K1divider_54,         /**< \brief K1-Divider 54  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   214      IfxScuCcu_K1divider_55,         /**< \brief K1-Divider 55  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   215      IfxScuCcu_K1divider_56,         /**< \brief K1-Divider 56  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   216      IfxScuCcu_K1divider_57,         /**< \brief K1-Divider 57  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   217      IfxScuCcu_K1divider_58,         /**< \brief K1-Divider 58  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   218      IfxScuCcu_K1divider_59,         /**< \brief K1-Divider 59  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   219      IfxScuCcu_K1divider_60,         /**< \brief K1-Divider 60  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   220      IfxScuCcu_K1divider_61,         /**< \brief K1-Divider 61  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   221      IfxScuCcu_K1divider_62,         /**< \brief K1-Divider 62  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   222      IfxScuCcu_K1divider_63,         /**< \brief K1-Divider 63  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   223      IfxScuCcu_K1divider_64,         /**< \brief K1-Divider 64  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   224      IfxScuCcu_K1divider_65,         /**< \brief K1-Divider 65  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   225      IfxScuCcu_K1divider_66,         /**< \brief K1-Divider 66  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   226      IfxScuCcu_K1divider_67,         /**< \brief K1-Divider 67  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   227      IfxScuCcu_K1divider_68,         /**< \brief K1-Divider 68  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   228      IfxScuCcu_K1divider_69,         /**< \brief K1-Divider 69  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   229      IfxScuCcu_K1divider_70,         /**< \brief K1-Divider 70  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   230      IfxScuCcu_K1divider_71,         /**< \brief K1-Divider 71  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   231      IfxScuCcu_K1divider_72,         /**< \brief K1-Divider 72  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   232      IfxScuCcu_K1divider_73,         /**< \brief K1-Divider 73  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   233      IfxScuCcu_K1divider_74,         /**< \brief K1-Divider 74  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   234      IfxScuCcu_K1divider_75,         /**< \brief K1-Divider 75  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   235      IfxScuCcu_K1divider_76,         /**< \brief K1-Divider 76  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   236      IfxScuCcu_K1divider_77,         /**< \brief K1-Divider 77  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   237      IfxScuCcu_K1divider_78,         /**< \brief K1-Divider 78  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   238      IfxScuCcu_K1divider_79,         /**< \brief K1-Divider 79  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   239      IfxScuCcu_K1divider_80,         /**< \brief K1-Divider 80  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   240      IfxScuCcu_K1divider_81,         /**< \brief K1-Divider 81  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   241      IfxScuCcu_K1divider_82,         /**< \brief K1-Divider 82  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   242      IfxScuCcu_K1divider_83,         /**< \brief K1-Divider 83  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   243      IfxScuCcu_K1divider_84,         /**< \brief K1-Divider 84  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   244      IfxScuCcu_K1divider_85,         /**< \brief K1-Divider 85  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   245      IfxScuCcu_K1divider_86,         /**< \brief K1-Divider 86  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   246      IfxScuCcu_K1divider_87,         /**< \brief K1-Divider 87  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   247      IfxScuCcu_K1divider_88,         /**< \brief K1-Divider 88  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   248      IfxScuCcu_K1divider_89,         /**< \brief K1-Divider 89  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   249      IfxScuCcu_K1divider_90,         /**< \brief K1-Divider 90  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   250      IfxScuCcu_K1divider_91,         /**< \brief K1-Divider 91  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   251      IfxScuCcu_K1divider_92,         /**< \brief K1-Divider 92  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   252      IfxScuCcu_K1divider_93,         /**< \brief K1-Divider 93  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   253      IfxScuCcu_K1divider_94,         /**< \brief K1-Divider 94  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   254      IfxScuCcu_K1divider_95,         /**< \brief K1-Divider 95  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   255      IfxScuCcu_K1divider_96,         /**< \brief K1-Divider 96  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   256      IfxScuCcu_K1divider_97,         /**< \brief K1-Divider 97  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   257      IfxScuCcu_K1divider_98,         /**< \brief K1-Divider 98  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   258      IfxScuCcu_K1divider_99,         /**< \brief K1-Divider 99  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   259      IfxScuCcu_K1divider_100,        /**< \brief K1-Divider 100  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   260      IfxScuCcu_K1divider_101,        /**< \brief K1-Divider 101  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   261      IfxScuCcu_K1divider_102,        /**< \brief K1-Divider 102  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   262      IfxScuCcu_K1divider_103,        /**< \brief K1-Divider 103  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   263      IfxScuCcu_K1divider_104,        /**< \brief K1-Divider 104  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   264      IfxScuCcu_K1divider_105,        /**< \brief K1-Divider 105  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   265      IfxScuCcu_K1divider_106,        /**< \brief K1-Divider 106  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   266      IfxScuCcu_K1divider_107,        /**< \brief K1-Divider 107  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   267      IfxScuCcu_K1divider_108,        /**< \brief K1-Divider 108  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   268      IfxScuCcu_K1divider_109,        /**< \brief K1-Divider 109  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   269      IfxScuCcu_K1divider_110,        /**< \brief K1-Divider 110  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   270      IfxScuCcu_K1divider_111,        /**< \brief K1-Divider 111  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   271      IfxScuCcu_K1divider_112,        /**< \brief K1-Divider 112  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   272      IfxScuCcu_K1divider_113,        /**< \brief K1-Divider 113  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   273      IfxScuCcu_K1divider_114,        /**< \brief K1-Divider 114  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   274      IfxScuCcu_K1divider_115,        /**< \brief K1-Divider 115  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   275      IfxScuCcu_K1divider_116,        /**< \brief K1-Divider 116  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   276      IfxScuCcu_K1divider_117,        /**< \brief K1-Divider 117  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   277      IfxScuCcu_K1divider_118,        /**< \brief K1-Divider 118  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   278      IfxScuCcu_K1divider_119,        /**< \brief K1-Divider 119  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   279      IfxScuCcu_K1divider_120,        /**< \brief K1-Divider 120  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   280      IfxScuCcu_K1divider_121,        /**< \brief K1-Divider 121  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   281      IfxScuCcu_K1divider_122,        /**< \brief K1-Divider 122  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   282      IfxScuCcu_K1divider_123,        /**< \brief K1-Divider 123  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   283      IfxScuCcu_K1divider_124,        /**< \brief K1-Divider 124  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   284      IfxScuCcu_K1divider_125,        /**< \brief K1-Divider 125  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   285      IfxScuCcu_K1divider_126,        /**< \brief K1-Divider 126  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   286      IfxScuCcu_K1divider_127,        /**< \brief K1-Divider 127  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   287      IfxScuCcu_K1divider_128         /**< \brief K1-Divider 128  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   288  } IfxScuCcu_K1divider;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   289  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   290  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   291   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   292  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   293  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   294      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   295      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   296      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   297      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   298      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   299      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   300      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   301      IfxScuCcu_K2divider_8,          /**< \brief K2-Divider 8  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_K2divider_9,          /**< \brief K2-Divider 9  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_K2divider_10,         /**< \brief K2-Divider 10  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_K2divider_11,         /**< \brief K2-Divider 11  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   305      IfxScuCcu_K2divider_12,         /**< \brief K2-Divider 12  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   306      IfxScuCcu_K2divider_13,         /**< \brief K2-Divider 13  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   307      IfxScuCcu_K2divider_14,         /**< \brief K2-Divider 14  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   308      IfxScuCcu_K2divider_15,         /**< \brief K2-Divider 15  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   309      IfxScuCcu_K2divider_16,         /**< \brief K2-Divider 16  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   310      IfxScuCcu_K2divider_17,         /**< \brief K2-Divider 17  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_18,         /**< \brief K2-Divider 18  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_19,         /**< \brief K2-Divider 19  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_20,         /**< \brief K2-Divider 20  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_21,         /**< \brief K2-Divider 21  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_22,         /**< \brief K2-Divider 22  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_23,         /**< \brief K2-Divider 23  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_24,         /**< \brief K2-Divider 24  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_25,         /**< \brief K2-Divider 25  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   319      IfxScuCcu_K2divider_26,         /**< \brief K2-Divider 26  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   320      IfxScuCcu_K2divider_27,         /**< \brief K2-Divider 27  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   321      IfxScuCcu_K2divider_28,         /**< \brief K2-Divider 28  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   322      IfxScuCcu_K2divider_29,         /**< \brief K2-Divider 29  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   323      IfxScuCcu_K2divider_30,         /**< \brief K2-Divider 30  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   324      IfxScuCcu_K2divider_31,         /**< \brief K2-Divider 31  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K2divider_32,         /**< \brief K2-Divider 32  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K2divider_33,         /**< \brief K2-Divider 33  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K2divider_34,         /**< \brief K2-Divider 34  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K2divider_35,         /**< \brief K2-Divider 35  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K2divider_36,         /**< \brief K2-Divider 36  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K2divider_37,         /**< \brief K2-Divider 37  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K2divider_38,         /**< \brief K2-Divider 38  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K2divider_39,         /**< \brief K2-Divider 39  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   333      IfxScuCcu_K2divider_40,         /**< \brief K2-Divider 40  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   334      IfxScuCcu_K2divider_41,         /**< \brief K2-Divider 41  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   335      IfxScuCcu_K2divider_42,         /**< \brief K2-Divider 42  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   336      IfxScuCcu_K2divider_43,         /**< \brief K2-Divider 43  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   337      IfxScuCcu_K2divider_44,         /**< \brief K2-Divider 44  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   338      IfxScuCcu_K2divider_45,         /**< \brief K2-Divider 45  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   339      IfxScuCcu_K2divider_46,         /**< \brief K2-Divider 46  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_K2divider_47,         /**< \brief K2-Divider 47  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_K2divider_48,         /**< \brief K2-Divider 48  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_K2divider_49,         /**< \brief K2-Divider 49  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_K2divider_50,         /**< \brief K2-Divider 50  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   344      IfxScuCcu_K2divider_51,         /**< \brief K2-Divider 51  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   345      IfxScuCcu_K2divider_52,         /**< \brief K2-Divider 52  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   346      IfxScuCcu_K2divider_53,         /**< \brief K2-Divider 53  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   347      IfxScuCcu_K2divider_54,         /**< \brief K2-Divider 54  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   348      IfxScuCcu_K2divider_55,         /**< \brief K2-Divider 55  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   349      IfxScuCcu_K2divider_56,         /**< \brief K2-Divider 56  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_K2divider_57,         /**< \brief K2-Divider 57  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_K2divider_58,         /**< \brief K2-Divider 58  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_K2divider_59,         /**< \brief K2-Divider 59  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_K2divider_60,         /**< \brief K2-Divider 60  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_K2divider_61,         /**< \brief K2-Divider 61  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_K2divider_62,         /**< \brief K2-Divider 62  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_K2divider_63,         /**< \brief K2-Divider 63  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   357      IfxScuCcu_K2divider_64,         /**< \brief K2-Divider 64  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   358      IfxScuCcu_K2divider_65,         /**< \brief K2-Divider 65  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   359      IfxScuCcu_K2divider_66,         /**< \brief K2-Divider 66  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   360      IfxScuCcu_K2divider_67,         /**< \brief K2-Divider 67  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   361      IfxScuCcu_K2divider_68,         /**< \brief K2-Divider 68  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   362      IfxScuCcu_K2divider_69,         /**< \brief K2-Divider 69  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_K2divider_70,         /**< \brief K2-Divider 70  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_K2divider_71,         /**< \brief K2-Divider 71  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_K2divider_72,         /**< \brief K2-Divider 72  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_K2divider_73,         /**< \brief K2-Divider 73  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_K2divider_74,         /**< \brief K2-Divider 74  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_K2divider_75,         /**< \brief K2-Divider 75  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_K2divider_76,         /**< \brief K2-Divider 76  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_K2divider_77,         /**< \brief K2-Divider 77  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_K2divider_78,         /**< \brief K2-Divider 78  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_K2divider_79,         /**< \brief K2-Divider 79  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_K2divider_80,         /**< \brief K2-Divider 80  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_K2divider_81,         /**< \brief K2-Divider 81  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_K2divider_82,         /**< \brief K2-Divider 82  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_K2divider_83,         /**< \brief K2-Divider 83  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_K2divider_84,         /**< \brief K2-Divider 84  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_K2divider_85,         /**< \brief K2-Divider 85  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_K2divider_86,         /**< \brief K2-Divider 86  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_K2divider_87,         /**< \brief K2-Divider 87  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_K2divider_88,         /**< \brief K2-Divider 88  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_K2divider_89,         /**< \brief K2-Divider 89  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_K2divider_90,         /**< \brief K2-Divider 90  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_K2divider_91,         /**< \brief K2-Divider 91  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_K2divider_92,         /**< \brief K2-Divider 92  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_K2divider_93,         /**< \brief K2-Divider 93  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_K2divider_94,         /**< \brief K2-Divider 94  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_K2divider_95,         /**< \brief K2-Divider 95  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_K2divider_96,         /**< \brief K2-Divider 96  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_K2divider_97,         /**< \brief K2-Divider 97  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_K2divider_98,         /**< \brief K2-Divider 98  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_K2divider_99,         /**< \brief K2-Divider 99  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_K2divider_100,        /**< \brief K2-Divider 100  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_K2divider_101,        /**< \brief K2-Divider 101  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_K2divider_102,        /**< \brief K2-Divider 102  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_K2divider_103,        /**< \brief K2-Divider 103  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_K2divider_104,        /**< \brief K2-Divider 104  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_K2divider_105,        /**< \brief K2-Divider 105  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_K2divider_106,        /**< \brief K2-Divider 106  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_K2divider_107,        /**< \brief K2-Divider 107  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_K2divider_108,        /**< \brief K2-Divider 108  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_K2divider_109,        /**< \brief K2-Divider 109  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_K2divider_110,        /**< \brief K2-Divider 110  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_K2divider_111,        /**< \brief K2-Divider 111  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_K2divider_112,        /**< \brief K2-Divider 112  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_K2divider_113,        /**< \brief K2-Divider 113  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_K2divider_114,        /**< \brief K2-Divider 114  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_K2divider_115,        /**< \brief K2-Divider 115  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_K2divider_116,        /**< \brief K2-Divider 116  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_K2divider_117,        /**< \brief K2-Divider 117  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_K2divider_118,        /**< \brief K2-Divider 118  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_K2divider_119,        /**< \brief K2-Divider 119  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_K2divider_120,        /**< \brief K2-Divider 120  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_K2divider_121,        /**< \brief K2-Divider 121  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_K2divider_122,        /**< \brief K2-Divider 122  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_K2divider_123,        /**< \brief K2-Divider 123  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_K2divider_124,        /**< \brief K2-Divider 124  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_K2divider_125,        /**< \brief K2-Divider 125  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_K2divider_126,        /**< \brief K2-Divider 126  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_K2divider_127,        /**< \brief K2-Divider 127  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_K2divider_128         /**< \brief K2-Divider 128  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   422  } IfxScuCcu_K2divider;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   423  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   424  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   425   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   426  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   427  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_K3divider_8,          /**< \brief K3-Divider 8  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_K3divider_9,          /**< \brief K3-Divider 9  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_K3divider_10,         /**< \brief K3-Divider 10  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_K3divider_11,         /**< \brief K3-Divider 11  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_K3divider_12,         /**< \brief K3-Divider 12  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_K3divider_13,         /**< \brief K3-Divider 13  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_K3divider_14,         /**< \brief K3-Divider 14  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_K3divider_15,         /**< \brief K3-Divider 15  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_K3divider_16,         /**< \brief K3-Divider 16  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_K3divider_17,         /**< \brief K3-Divider 17  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_K3divider_18,         /**< \brief K3-Divider 18  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_K3divider_19,         /**< \brief K3-Divider 19  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_K3divider_20,         /**< \brief K3-Divider 20  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_K3divider_21,         /**< \brief K3-Divider 21  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_K3divider_22,         /**< \brief K3-Divider 22  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_K3divider_23,         /**< \brief K3-Divider 23  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_K3divider_24,         /**< \brief K3-Divider 24  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_K3divider_25,         /**< \brief K3-Divider 25  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_K3divider_26,         /**< \brief K3-Divider 26  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_K3divider_27,         /**< \brief K3-Divider 27  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_K3divider_28,         /**< \brief K3-Divider 28  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_K3divider_29,         /**< \brief K3-Divider 29  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_K3divider_30,         /**< \brief K3-Divider 30  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_K3divider_31,         /**< \brief K3-Divider 31  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_K3divider_32,         /**< \brief K3-Divider 32  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_K3divider_33,         /**< \brief K3-Divider 33  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_K3divider_34,         /**< \brief K3-Divider 34  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_K3divider_35,         /**< \brief K3-Divider 35  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_K3divider_36,         /**< \brief K3-Divider 36  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_K3divider_37,         /**< \brief K3-Divider 37  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_K3divider_38,         /**< \brief K3-Divider 38  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_K3divider_39,         /**< \brief K3-Divider 39  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_K3divider_40,         /**< \brief K3-Divider 40  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_K3divider_41,         /**< \brief K3-Divider 41  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_K3divider_42,         /**< \brief K3-Divider 42  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_K3divider_43,         /**< \brief K3-Divider 43  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_K3divider_44,         /**< \brief K3-Divider 44  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_K3divider_45,         /**< \brief K3-Divider 45  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_K3divider_46,         /**< \brief K3-Divider 46  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_K3divider_47,         /**< \brief K3-Divider 47  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_K3divider_48,         /**< \brief K3-Divider 48  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_K3divider_49,         /**< \brief K3-Divider 49  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_K3divider_50,         /**< \brief K3-Divider 50  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_K3divider_51,         /**< \brief K3-Divider 51  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_K3divider_52,         /**< \brief K3-Divider 52  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_K3divider_53,         /**< \brief K3-Divider 53  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_K3divider_54,         /**< \brief K3-Divider 54  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_K3divider_55,         /**< \brief K3-Divider 55  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_K3divider_56,         /**< \brief K3-Divider 56  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_K3divider_57,         /**< \brief K3-Divider 57  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_K3divider_58,         /**< \brief K3-Divider 58  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_K3divider_59,         /**< \brief K3-Divider 59  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_K3divider_60,         /**< \brief K3-Divider 60  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_K3divider_61,         /**< \brief K3-Divider 61  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_K3divider_62,         /**< \brief K3-Divider 62  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_K3divider_63,         /**< \brief K3-Divider 63  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   491      IfxScuCcu_K3divider_64,         /**< \brief K3-Divider 64  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   492      IfxScuCcu_K3divider_65,         /**< \brief K3-Divider 65  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   493      IfxScuCcu_K3divider_66,         /**< \brief K3-Divider 66  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   494      IfxScuCcu_K3divider_67,         /**< \brief K3-Divider 67  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   495      IfxScuCcu_K3divider_68,         /**< \brief K3-Divider 68  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   496      IfxScuCcu_K3divider_69,         /**< \brief K3-Divider 69  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_K3divider_70,         /**< \brief K3-Divider 70  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_K3divider_71,         /**< \brief K3-Divider 71  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_K3divider_72,         /**< \brief K3-Divider 72  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_K3divider_73,         /**< \brief K3-Divider 73  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_K3divider_74,         /**< \brief K3-Divider 74  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_K3divider_75,         /**< \brief K3-Divider 75  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_K3divider_76,         /**< \brief K3-Divider 76  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_K3divider_77,         /**< \brief K3-Divider 77  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   505      IfxScuCcu_K3divider_78,         /**< \brief K3-Divider 78  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   506      IfxScuCcu_K3divider_79,         /**< \brief K3-Divider 79  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   507      IfxScuCcu_K3divider_80,         /**< \brief K3-Divider 80  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   508      IfxScuCcu_K3divider_81,         /**< \brief K3-Divider 81  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   509      IfxScuCcu_K3divider_82,         /**< \brief K3-Divider 82  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   510      IfxScuCcu_K3divider_83,         /**< \brief K3-Divider 83  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   511      IfxScuCcu_K3divider_84,         /**< \brief K3-Divider 84  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_K3divider_85,         /**< \brief K3-Divider 85  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_K3divider_86,         /**< \brief K3-Divider 86  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_K3divider_87,         /**< \brief K3-Divider 87  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   515      IfxScuCcu_K3divider_88,         /**< \brief K3-Divider 88  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   516      IfxScuCcu_K3divider_89,         /**< \brief K3-Divider 89  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   517      IfxScuCcu_K3divider_90,         /**< \brief K3-Divider 90  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   518      IfxScuCcu_K3divider_91,         /**< \brief K3-Divider 91  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   519      IfxScuCcu_K3divider_92,         /**< \brief K3-Divider 92  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   520      IfxScuCcu_K3divider_93,         /**< \brief K3-Divider 93  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_K3divider_94,         /**< \brief K3-Divider 94  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_K3divider_95,         /**< \brief K3-Divider 95  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_K3divider_96,         /**< \brief K3-Divider 96  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_K3divider_97,         /**< \brief K3-Divider 97  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   525      IfxScuCcu_K3divider_98,         /**< \brief K3-Divider 98  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   526      IfxScuCcu_K3divider_99,         /**< \brief K3-Divider 99  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   527      IfxScuCcu_K3divider_100,        /**< \brief K3-Divider 100  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   528      IfxScuCcu_K3divider_101,        /**< \brief K3-Divider 101  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   529      IfxScuCcu_K3divider_102,        /**< \brief K3-Divider 102  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   530      IfxScuCcu_K3divider_103,        /**< \brief K3-Divider 103  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   531      IfxScuCcu_K3divider_104,        /**< \brief K3-Divider 104  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   532      IfxScuCcu_K3divider_105,        /**< \brief K3-Divider 105  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_K3divider_106,        /**< \brief K3-Divider 106  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_K3divider_107,        /**< \brief K3-Divider 107  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   535      IfxScuCcu_K3divider_108,        /**< \brief K3-Divider 108  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   536      IfxScuCcu_K3divider_109,        /**< \brief K3-Divider 109  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   537      IfxScuCcu_K3divider_110,        /**< \brief K3-Divider 110  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   538      IfxScuCcu_K3divider_111,        /**< \brief K3-Divider 111  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   539      IfxScuCcu_K3divider_112,        /**< \brief K3-Divider 112  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   540      IfxScuCcu_K3divider_113,        /**< \brief K3-Divider 113  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   541      IfxScuCcu_K3divider_114,        /**< \brief K3-Divider 114  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   542      IfxScuCcu_K3divider_115,        /**< \brief K3-Divider 115  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   543      IfxScuCcu_K3divider_116,        /**< \brief K3-Divider 116  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   544      IfxScuCcu_K3divider_117,        /**< \brief K3-Divider 117  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   545      IfxScuCcu_K3divider_118,        /**< \brief K3-Divider 118  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   546      IfxScuCcu_K3divider_119,        /**< \brief K3-Divider 119  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   547      IfxScuCcu_K3divider_120,        /**< \brief K3-Divider 120  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   548      IfxScuCcu_K3divider_121,        /**< \brief K3-Divider 121  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   549      IfxScuCcu_K3divider_122,        /**< \brief K3-Divider 122  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   550      IfxScuCcu_K3divider_123,        /**< \brief K3-Divider 123  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   551      IfxScuCcu_K3divider_124,        /**< \brief K3-Divider 124  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   552      IfxScuCcu_K3divider_125,        /**< \brief K3-Divider 125  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   553      IfxScuCcu_K3divider_126,        /**< \brief K3-Divider 126  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   554      IfxScuCcu_K3divider_127,        /**< \brief K3-Divider 127  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   555      IfxScuCcu_K3divider_128         /**< \brief K3-Divider 128  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   556  } IfxScuCcu_K3divider;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   557  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   558  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   562      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   563      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   564      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   565      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   566      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   567      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   568      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   569      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   570      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   571      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   572      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   573      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   574      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   575      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   576      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   577      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   578      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   579      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   580      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   581      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   582      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   583      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   584      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   585      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   586      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   587      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   588      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   589      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   590      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   591      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   595      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   596      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   597      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   598      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   599      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   600      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   601      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   602      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   603      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   604      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   605      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   606      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   607      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   608      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   609      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   610      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   611      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   612      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   613      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   614      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   615      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   616      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   627      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   628      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   629      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   630      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   631      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   632      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   634      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   635      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   636      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   637      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   638      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   639      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   640      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   641      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   642      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   643      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   644      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   645      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   646      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   647      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   648      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   649      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   650      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   653      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   654      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   655      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   656      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   657      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   658      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   659      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   660      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   664      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   665      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   666      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   667      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   668      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   669      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   670      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   671      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   672      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   673      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   674      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   675      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   676      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   677      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   678      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   679      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   680      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   681      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   682      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   683      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   684      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   685      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   686      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   687      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   688      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   689      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   690  } IfxScuCcu_Ndivider;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   691  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   692  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   693   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   694  typedef enum
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   695  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   696      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   697      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   698      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   699      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   700      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   701      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   702      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   703      IfxScuCcu_Pdivider_8,          /**< \brief  P-divider 8  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   704      IfxScuCcu_Pdivider_9,          /**< \brief  P-divider 9  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   705      IfxScuCcu_Pdivider_10,         /**< \brief  P-divider 10  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   706      IfxScuCcu_Pdivider_11,         /**< \brief  P-divider 11  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   707      IfxScuCcu_Pdivider_12,         /**< \brief  P-divider 12  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   708      IfxScuCcu_Pdivider_13,         /**< \brief  P-divider 13  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   709      IfxScuCcu_Pdivider_14,         /**< \brief  P-divider 14  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   710      IfxScuCcu_Pdivider_15,         /**< \brief  P-divider 15  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   711      IfxScuCcu_Pdivider_16          /**< \brief  P-divider 16  */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   712  } IfxScuCcu_Pdivider;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   713  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   714  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   715  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   716  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   717  /*-----------------------------Data Structures--------------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   718  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   719  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   720  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   721   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   722  /** \brief Configuration structure type for CCUCON registers.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   723   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   724  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   725  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   726      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   727      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   728  } IfxScuCcu_CcuconRegConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   729  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   730  /** \brief Configuration structure type for the Pll initial step.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   731   * This structure must be used to configure the P, N and K2 dividers for initial step.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   733  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   734  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   735      uint8   pDivider;        /**< \brief P divider value for basic (initial) step */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   736      uint8   nDivider;        /**< \brief N divider value for basic (initial) step */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   737      uint8   k2Initial;       /**< \brief K2 divider value for basic (initial) step */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   738      float32 waitTime;        /**< \brief Wait time for for basic (initial) step */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   739  } IfxScuCcu_InitialStepConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   740  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   741  /** \brief Configuration structure type for the Pll Steps for current jump control.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   742   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   743  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   744  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   745      uint8                          k2Step;             /**< \brief K2 divider value for this step. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   746      float32                        waitTime;           /**< \brief Wait time for for this step. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   747      IfxScuCcu_PllStepsFunctionHook hookFunction;       /**< \brief Hook function called at the end of this step. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   748  } IfxScuCcu_PllStepsConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   749  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   751  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   752  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   753   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   754  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   755   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   756  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   757  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   758      IfxScuCcu_CcuconRegConfig ccucon0;       /**< \brief CCUCON0 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   759      IfxScuCcu_CcuconRegConfig ccucon1;       /**< \brief CCUCON1 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   760      IfxScuCcu_CcuconRegConfig ccucon2;       /**< \brief CCUCON2 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   761      IfxScuCcu_CcuconRegConfig ccucon5;       /**< \brief CCUCON5 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   762      IfxScuCcu_CcuconRegConfig ccucon6;       /**< \brief CCUCON6 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   763      IfxScuCcu_CcuconRegConfig ccucon7;       /**< \brief CCUCON7 Register configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   764  } IfxScuCcu_ClockDistributionConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   765  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   766  /** \brief Configuration structure type for the Flash waitstate configuration.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   767   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   768  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   769  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   770      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   771      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   772  } IfxScuCcu_FlashWaitstateConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   773  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief Configuration structure type for the System Pll step.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   775   * This structure must be used to configure the P, N and K1 dividers .
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   776   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   777  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   778  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   779      uint8                       numOfPllDividerSteps;       /**< \brief Number of PLL divider steps during clock throttling. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   780      IfxScuCcu_PllStepsConfig   *pllDividerStep;             /**< \brief Pointer to the array of Pll divider step configuration. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   781      IfxScuCcu_InitialStepConfig pllInitialStep;             /**< \brief Configuration of first step which is same as internal osc frequency. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   782  } IfxScuCcu_SysPllConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   783  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   784  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   785  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   786  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   787   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   788  /** \brief Configuration structure SCU module
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   789   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   790  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   791  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   792      IfxScuCcu_SysPllConfig            sysPll;                         /**< \brief System PLL configuration */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   793      IfxScuCcu_ClockDistributionConfig clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   794      IfxScuCcu_FlashWaitstateConfig    flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   795      uint32                            xtalFrequency;                  /**< \brief Xtal Frequency */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   796  } IfxScuCcu_Config;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   797  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   798  /** \brief Configuration structure for E-ray PLL
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   799   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   800  typedef struct
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   801  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   802      IfxScuCcu_InitialStepConfig pllInitialStep;       /**< \brief Configuration of first step which is same as internal osc frequency. */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   803  } IfxScuCcu_ErayPllConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   804  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   806  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   807  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   808   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   809  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   810  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   811  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   812  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   813  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   814  /** \brief API to get EVR Oscillator frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   815   * This API returns the constant which is specific to the ScuCcu of the controller.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   816   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   817   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   818  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   819  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   820  /** \brief API to get actual PLL2 (K3 Divider for ADC clock) frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   821   * This API returns the  PLL2ERAY frequency based on the K3 divider value in PLLERAYCON and the VCO frequency. This frequency is one of the configurable inputs to ADC clock.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   822   * \return PLL2ERAY (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   823   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   824  IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   825  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get actual PLL2 (K3 Divider for ADC clock) frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the  PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency. This frequency is one of the configurable inputs to ADC clock.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return PLL2 (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   831  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief Returns the clock source selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   833   * \return Clock source selection
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   834   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   835  IFX_INLINE IfxScu_CCUCON0_CLKSEL IfxScuCcu_getSourceSelection(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   836  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   837  /** \brief API to get STM divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   838   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   839   * \return STM frequency (fSTM) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   840   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   841  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   842  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   843  /** \brief API to get CAN divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   844   * This API returns the fCAN frequency based on the divider value in CCUCON register and fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   845   * \return STM frequency (fSTM) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   846   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   847  IFX_INLINE float32 IfxScuCcu_getCanFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   848  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   849  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   850  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   851  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   852  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   853  /** \brief API to get BAUD1 divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   854   * This API returns the based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   855   * \return Baud1 frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   856   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   857  IFX_EXTERN float32 IfxScuCcu_getBaud1Frequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   858  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   859  /** \brief API to get BAUD2 divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   860   * This API returns the Baud2 frequency based on the divider value in CCUCON register and the fMAX.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   861   * \return Baud2 frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   862   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   863  IFX_EXTERN float32 IfxScuCcu_getBaud2Frequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   864  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   865  /** \brief API to get BBB divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   866   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   867   * \return BBB frequency (fBBB) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   868   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   869  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   870  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   871  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   872   * \param cpu CPU number for which effective fCPU is sought
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   873   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   874   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   875  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   876  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   877  /** \brief API to get FSI2 divider frequency in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   878   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   879   * \return FSI2 frequency (fFSI2) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   880   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   881  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   882  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   883  /** \brief API to get FSI divider frequency in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   884   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return FSI frequency (fFSI) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   888  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get FMAX divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the fMax frequency based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return Max frequency (fMAX) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getMaxFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   894  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief get source frequency fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Module frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   900  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief API to get Oscillator 0 frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   903   * \return Osc0 frequency (fOSC0) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   904   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   905  IFX_EXTERN float32 IfxScuCcu_getOsc0Frequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   906  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   907  /** \brief API to get Oscillator 0 frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   908   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   909   * \return Osc frequency (fOSC) in Hz.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   910   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   911  IFX_EXTERN float32 IfxScuCcu_getOscFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   912  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   913  /** \brief API to get actual PLL (Eray) frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   914   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   915   * \return frequency of Pll Eray (fPLLERAY) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   916   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   917  IFX_EXTERN float32 IfxScuCcu_getPllErayFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   918  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   919  /** \brief API to get actual ERAY PLL Voltage Controlled Oscillator frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   920   * This API returns the based on the divider values in PLLERAYCON registers and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   921   * \return Pll (Eray) VCO frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   922   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   923  IFX_EXTERN float32 IfxScuCcu_getPllErayVcoFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   924  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   925  /** \brief API to get actual PLL output frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   926   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   927   * \return Pll (fPLL) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   928   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   929  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   930  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   931  /** \brief API to get actual PLL Voltage Controlled Oscillator frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   932   * This API returns the based on the divider values in PLLCON registers and the input oscillator.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   933   * \return Pll VCO frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   934   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   935  IFX_EXTERN float32 IfxScuCcu_getPllVcoFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   936  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   937  /** \brief get source frequency fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   938   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   939   * \return Effective fSOURCE in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   940   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   941  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   942  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   943  /** \brief API to get SPB divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   944   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   945   * \return SPB frequency (fSPB) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   946   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   947  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   948  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   949  /** \brief API to get SRI divider frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   950   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   951   * \return Sri frequency (fSRI) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   952   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   953  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   954  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   955  /** \brief API to set CPU frequency (with CPU divider)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   956   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   957   * \param cpu CPU number for which fCPU to be configured
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param cpuFreq Desired CPU frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   962  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to configure PLL2ERAY (K3 Divider for ADC clock) for desired frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure K3 divider value in CCUCON. The actual frequency always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param pll2ErayFreq PLL2ERAY (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual PLL2 (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   969  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to configure PLL2 (K3 Divider for ADC clock) for desired frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure K3 divider value in CCUCON. The actual frequency always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param pll2Freq PLL2 (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual PLL2 (K3 Divider for ADC clock) frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   976  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set SPB frequency (with SPB divider)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param spbFreq Desired SPB frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual SPB frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   983  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set SRI frequency (with SRI divider)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param sriFreq Sri frequency (fSRI) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual Sri frequency (fSRI) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   990  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   992  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   993  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   994   * \{ */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   995  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   996  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   997  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   998  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	   999  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1000  /** \brief The api calculates the system PLL divider values P, N, K based on given xtal frequency and PLL frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \param cfg Pointer to the configuration structure of the ScuCcu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1002   * \param fPll Desired PLL frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1003   * \return 0- Success, 1 - Failure
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1004   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1005  IFX_EXTERN boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1006  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1007  /** \brief API to initialize the SCU Clock Control Unit.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1008   * This API initialize the PLL with ramp steps, BUS dividers for the configuration provided by the configuration structure.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1009   * \param cfg Pointer to the configuration structure of the ScuCcu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1010   * \return Error status of the ScuCcu initialization process.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1011   * \retval TRUE: If an error occurred during initialization.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1012   * \retval FALSE: If initialization was successful.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1013   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1014  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1015  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1016  /** \brief Initializes the clock configuration with default values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1017   * \param cfg Pointer to the configuration structure of the ScuCcu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1018   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1019   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1020  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1021  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1022  /** \brief API to initialize the SCU Eray Pll
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1023   * This API initialize the Eray PLL for the configuration provided by the configuration structure.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1024   * \param cfg Pointer to the configuration structure of the Eray Pll
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1025   * \return Error status of the ScuCcu Eray Pll initialization process.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1026   * \retval TRUE: If an error occurred during initialization.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1027   * \retval FALSE: If initialization was successful.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1028   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1029  IFX_EXTERN boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1030  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1031  /** \brief Initializes the clock configuration with default values
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1032   * \param cfg Pointer to the configuration structure of the ScuCcuEray Pll
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1033   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1034   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1035  IFX_EXTERN void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1036  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1037  /** \brief API to switch to Backup clock from the current PLL frequency.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1038   * \param cfg Pointer to the configuration structure of the ScuCcu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1039   * \return None
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1040   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1041  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1042  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1043  /** \} */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief API to get GTMdivider frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1050   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1051   * return GTM frequency (fGTM) in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1052   * \return Gtm Frequency
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1053   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1054  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1055  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1056  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1057  /*-------------------------Global Function Prototypes-------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1058  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1060  /** \brief API to set GTM frequency (with GTM divider)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1061   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1062   * \param gtmFreq Desired GTM frequency in Hz
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1063   * \return Actual GTM frequency in HZ
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1064   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1065  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1066  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1067  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1068  /*-------------------Global Exported Variables/Constants----------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1069  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1070  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1071  /** \brief Configuration structure for SCU CCU driver.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1072   * The values of this structure are defined as # defined macros in the implementation of Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1073   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1074  IFX_EXTERN IFX_CONST IfxScuCcu_Config IfxScuCcu_defaultClockConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1075  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1076  /** \brief Configuration structure for SCU CCU driver.
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1077   * The values of this structure are defined as # defined macros in the implementation of Scu
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1078   */
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1079  IFX_EXTERN IFX_CONST IfxScuCcu_ErayPllConfig IfxScuCcu_defaultErayPllConfig;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1080  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1081  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1082  /*---------------------Inline Function Implementations------------------------*/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1083  /******************************************************************************/
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1084  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1086  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1087      return IFXSCU_EVR_OSC_FREQUENCY;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1088  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1089  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1090  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1092  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1093      return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1094  }
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1095  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1096  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1098  {
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1099      float32 pll2ErayFrequency;
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1101      pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
	call	IfxScuCcu_getPllErayVcoFrequency
.L787:
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf003602d)
	and	d15,#15
.L788:
	add	d15,#1
	itof	d15,d15
.L789:
	div.f	d15,d2,d15
.L513:

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1103      return pll2ErayFrequency;      (inlined)
	j	.L98

; G:\Hello_world\TC264\A\workspace\Sig0809\Libraries\BaseSw\iLLD\TC26B\Tricore\Scu\Std\IfxScuCcu.h	  1104  }      (inlined)
.L98:
	div.f	d15,d10,d15
.L343:
	utof	d0,d9
.L514:
	mul.f	d15,d15,d0
.L790:
	movh	d0,#16512
.L791:
	mul.f	d15,d15,d0
	ftouz	d0,d15
.L515:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   457  ct * SCU_CCUCON0.B.BAUD1DIV;
	j	.L99

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   458  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   459          break;
.L78:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   460  
.L79:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   461      case IfxMtu_MbistSel_erayObf:
.L80:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   462      case IfxMtu_MbistSel_erayIbfTbf:
.L81:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   463          waitFact = (IfxScuCcu_getSriFrequency() / IfxScuCcu_getPll2ErayFrequency()) * numInstructions;
.L82:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   464          break;
.L83:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   465  
.L84:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   466      case IfxMtu_MbistSel_erayMbf:
.L85:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   467          waitFact = (IfxScuCcu_getSriFrequency() / IfxScuCcu_getPll2ErayFrequency()) * numInstructions * 4;
.L89:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   468          break;
.L90:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   469  
.L91:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   470      case IfxMtu_MbistSel_emem0:
.L92:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   471      case IfxMtu_MbistSel_emem1:
.L86:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   472      case IfxMtu_MbistSel_emem2:
.L87:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   473      case IfxMtu_MbistSel_emem3:
.L88:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   474      case IfxMtu_MbistSel_emem4:
	movh.a	a15,#61443
	ld.bu	d15,[a15]@los(0xf0036040)
	and	d15,#15
.L792:
	mul	d0,d15
.L793:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   475      case IfxMtu_MbistSel_emem5:
	j	.L100

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   476      case IfxMtu_MbistSel_emem6:
.L65:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   477      case IfxMtu_MbistSel_emem7:
	j	.L101

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   478      case IfxMtu_MbistSel_ememXtm0:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   479      case IfxMtu_MbistSel_ememXtm1:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   480      case IfxMtu_MbistSel_fft0:
.L101:
.L100:
.L99:
.L97:
.L95:
.L94:
.L93:
	jne	d9,#4,.L102
.L517:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   481      case IfxMtu_MbistSel_fft1:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   482      case IfxMtu_MbistSel_cifJpeg1_4:
	mov	d15,#30
.L518:
	madd	d15,d15,d8,d0
.L519:
	st.w	[a10],d15
.L794:
	j	.L103
.L102:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   483      case IfxMtu_MbistSel_cifJpeg3:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   484      case IfxMtu_MbistSel_cifCif:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   485          waitFact = waitFact * SCU_CCUCON2.B.BBBDIV;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   486          break;
	mov	d15,#0
	addih	d15,d15,#16384
.L520:
	mul.u	e2,d8,d15
.L521:
	mov	d15,#30
.L795:
	madd	d15,d15,d3,d0
.L796:
	st.w	[a10],d15
.L103:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   487      default:
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   488          break;
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   489      }
	ld.w	d15,[a10]
.L797:
	mov	d0,#3
.L516:
	div.u	e0,d15,d0
.L798:
	st.w	[a10],d0
.L799:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   490  
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   491      if (numInstructions == 4)
	j	.L104
.L105:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   492      {
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   493          waitTime = (towerDepth * waitFact) + 30;
	nop
.L104:
	ld.w	d15,[a10]
	ld.w	d0,[a10]
.L800:
	add	d0,#-1
	st.w	[a10],d0
.L801:
	jne	d15,#0,.L105
.L802:

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   494      }
; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   495      else
	ret
.L329:
	
__IfxMtu_waitForMbistDone_function_end:
	.size	IfxMtu_waitForMbistDone,__IfxMtu_waitForMbistDone_function_end-IfxMtu_waitForMbistDone
.L186:
	; End of function
	
	.calls	'IfxMtu_clearSram','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxMtu_clearSram','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxMtu_clearSram','IfxMtu_clearSramStart'
	.calls	'IfxMtu_clearSram','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxMtu_clearSram','IfxMtu_waitForMbistDone'
	.calls	'IfxMtu_clearSram','IfxMtu_clearSramContinue'
	.calls	'IfxMtu_clearSramContinue','IfxMtu_readSramAddress'
	.calls	'IfxMtu_readSramAddress','IfxMtu_waitForMbistDone'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxMtu_runNonDestructiveInversionTest','IfxMtu_waitForMbistDone'
	.calls	'IfxMtu_writeSramAddress','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'IfxMtu_writeSramAddress','IfxScuWdt_clearSafetyEndinit'
	.calls	'IfxMtu_writeSramAddress','IfxScuWdt_setSafetyEndinit'
	.calls	'IfxMtu_writeSramAddress','IfxMtu_waitForMbistDone'
	.calls	'IfxMtu_waitForMbistDone','IfxScuCcu_getSriFrequency'
	.calls	'IfxMtu_waitForMbistDone','IfxScuCcu_getPllErayVcoFrequency'
	.calls	'IfxMtu_clearErrorTracking','',0
	.calls	'IfxMtu_clearSram','',0
	.calls	'IfxMtu_clearSramContinue','',0
	.calls	'IfxMtu_clearSramStart','',0
	.calls	'IfxMtu_enableErrorTracking','',0
	.calls	'IfxMtu_getSystemAddress','',0
	.calls	'IfxMtu_getTrackedSramAddresses','',0
	.calls	'IfxMtu_readSramAddress','',0
	.calls	'IfxMtu_runNonDestructiveInversionTest','',0
	.calls	'IfxMtu_writeSramAddress','',0
	.extern	IfxScuWdt_clearSafetyEndinit
	.extern	IfxScuWdt_setSafetyEndinit
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxScuCcu_getPllErayVcoFrequency
	.extern	IfxScuCcu_getSriFrequency
	.extern	IfxMtu_sramTable
	.calls	'IfxMtu_waitForMbistDone','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L129:
	.word	85814
	.half	3
	.word	.L130
	.byte	4
.L128:
	.byte	1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L131
	.byte	2,1,1,3
	.word	165
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,61,17,1,1,5
	.byte	'fun',0,1,61,43
	.word	168
	.byte	6,0,7
	.byte	'__fract',0,4,128,1
.L340:
	.byte	7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,152,2,18
	.word	213
	.byte	1,1,5
	.byte	'a',0,1,152,2,44
	.word	225
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,172,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	337
	.byte	8
	.byte	'__ld64',0,3,2,135,1,19
	.word	311
	.byte	1,1,5
	.byte	'addr',0,2,135,1,32
	.word	343
	.byte	6,0,4
	.byte	'__st64',0,3,2,143,1,17,1,1,5
	.byte	'addr',0,2,143,1,30
	.word	343
	.byte	5
	.byte	'value',0,2,143,1,43
	.word	311
	.byte	6,0,7
	.byte	'unsigned int',0,4,7
.L327:
	.byte	7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,241,8,16,4,11
	.byte	'ENDINIT',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	452
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	452
	.byte	16,0,2,35,0,0,12,4,247,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	468
	.byte	4,2,35,0,0
.L190:
	.byte	7
	.byte	'unsigned char',0,1,8
.L192:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,250,8,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	2,6,2,35,0,11
	.byte	'IR0',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	604
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,12,4,255,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	643
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,137,9,16,4,11
	.byte	'AE',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	604
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	621
	.byte	16,0,2,35,2,0,12,4,135,15,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	887
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,175,15,25,12,13
	.byte	'CON0',0
	.word	564
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	847
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1078
	.byte	4,2,35,8,0,14
	.word	1118
	.byte	3
	.word	1181
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,181,3,17,1,1,5
	.byte	'watchdog',0,3,181,3,65
	.word	1186
	.byte	5
	.byte	'password',0,3,181,3,82
	.word	621
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,140,4,17,1,1,5
	.byte	'watchdog',0,3,140,4,63
	.word	1186
	.byte	5
	.byte	'password',0,3,140,4,80
	.word	621
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,227,3,19
	.word	621
	.byte	1,1,5
	.byte	'watchdog',0,3,227,3,74
	.word	1186
	.byte	6,0
.L194:
	.byte	8
	.byte	'IfxScuWdt_getSafetyWatchdogEndInit',0,3,3,247,3,20
	.word	604
	.byte	1,1
.L196:
	.byte	6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,6,143,3,16,4,11
	.byte	'P0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,12,6,181,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1465
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,6,169,2,16,4,11
	.byte	'PS0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	604
	.byte	1,0,2,35,3,0,12,6,133,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1781
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,6,110,16,4,11
	.byte	'MODREV',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	621
	.byte	16,0,2,35,2,0,12,6,148,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2352
	.byte	4,2,35,0,0,15,4
	.word	604
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,6,140,1,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	604
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	604
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	604
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	604
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	604
	.byte	5,0,2,35,3,0,12,6,164,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2480
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,6,166,1,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	604
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	604
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	604
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	604
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	604
	.byte	5,0,2,35,3,0,12,6,180,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2695
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,6,179,1,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	604
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	604
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	604
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	604
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	604
	.byte	5,0,2,35,3,0,12,6,188,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2910
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,6,153,1,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	604
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	604
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	604
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	604
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	604
	.byte	5,0,2,35,3,0,12,6,172,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3127
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,6,118,16,4,11
	.byte	'P0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,12,6,156,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3347
	.byte	4,2,35,0,0,15,24
	.word	604
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,6,205,3,16,4,11
	.byte	'PD0',0,1
	.word	604
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	604
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'PD2',0,1
	.word	604
	.byte	3,5,2,35,1,11
	.byte	'PL2',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'PD3',0,1
	.word	604
	.byte	3,1,2,35,1,11
	.byte	'PL3',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'PD4',0,1
	.word	604
	.byte	3,5,2,35,2,11
	.byte	'PL4',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'PD5',0,1
	.word	604
	.byte	3,1,2,35,2,11
	.byte	'PL5',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'PD6',0,1
	.word	604
	.byte	3,5,2,35,3,11
	.byte	'PL6',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'PD7',0,1
	.word	604
	.byte	3,1,2,35,3,11
	.byte	'PL7',0,1
	.word	604
	.byte	1,0,2,35,3,0,12,6,205,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3670
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,6,226,3,16,4,11
	.byte	'PD8',0,1
	.word	604
	.byte	3,5,2,35,0,11
	.byte	'PL8',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'PD9',0,1
	.word	604
	.byte	3,1,2,35,0,11
	.byte	'PL9',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'PD10',0,1
	.word	604
	.byte	3,5,2,35,1,11
	.byte	'PL10',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'PD11',0,1
	.word	604
	.byte	3,1,2,35,1,11
	.byte	'PL11',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'PD12',0,1
	.word	604
	.byte	3,5,2,35,2,11
	.byte	'PL12',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'PD13',0,1
	.word	604
	.byte	3,1,2,35,2,11
	.byte	'PL13',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'PD14',0,1
	.word	604
	.byte	3,5,2,35,3,11
	.byte	'PL14',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'PD15',0,1
	.word	604
	.byte	3,1,2,35,3,11
	.byte	'PL15',0,1
	.word	604
	.byte	1,0,2,35,3,0,12,6,213,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3974
	.byte	4,2,35,0,0,15,8
	.word	604
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,6,88,16,4,11
	.byte	'EN0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,12,6,140,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4299
	.byte	4,2,35,0,0,15,12
	.word	604
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,6,183,3,16,4,11
	.byte	'PDIS0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,12,6,197,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4639
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,6,165,3,16,4,11
	.byte	'SEL0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	2,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	429
	.byte	19,1,2,35,0,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,12,6,189,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5005
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,6,206,2,16,4,11
	.byte	'PS0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	28,0,2,35,0,0,12,6,149,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5291
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,6,227,2,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	429
	.byte	24,0,2,35,0,0,12,6,165,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5438
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,6,238,2,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	429
	.byte	20,0,2,35,0,0,12,6,173,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5607
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,6,216,2,16,4,11
	.byte	'reserved_0',0,2
	.word	621
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,12,6,157,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5779
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,6,232,1,16,4,11
	.byte	'reserved_0',0,2
	.word	621
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	621
	.byte	12,0,2,35,2,0,12,6,229,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5954
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,6,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	8,0,2,35,3,0,12,6,245,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6128
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,6,136,2,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	604
	.byte	4,0,2,35,3,0,12,6,253,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6302
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,6,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	604
	.byte	1,0,2,35,3,0,12,6,237,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6478
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,6,249,2,16,4,11
	.byte	'PS0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,12,6,141,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6634
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,6,147,2,16,4,11
	.byte	'reserved_0',0,2
	.word	621
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	604
	.byte	1,0,2,35,3,0,12,6,221,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6967
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR0_Bits',0,6,192,1,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	429
	.byte	30,0,2,35,0,0,12,6,196,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7315
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_Bits',0,6,200,1,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	429
	.byte	30,0,2,35,0,0,10
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,6,208,1,16,4,11
	.byte	'RDIS_CTRL',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'RX_DIS',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	604
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	429
	.byte	24,0,2,35,0,0,12,6,204,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7439
	.byte	4,2,35,0,13
	.byte	'B_P21',0
	.word	7523
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR2_Bits',0,6,218,1,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'LVDSR',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'LVDSRL',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	604
	.byte	2,4,2,35,1,11
	.byte	'TDIS_CTRL',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'TX_DIS',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,12,6,213,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7703
	.byte	4,2,35,0,0,15,76
	.word	604
	.byte	16,75,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,6,82,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,12,6,132,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7956
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,6,45,16,4,11
	.byte	'EN0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	604
	.byte	1,0,2,35,3,0,12,6,252,3,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	8043
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,6,229,5,25,128,2,13
	.byte	'OUT',0
	.word	1741
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2312
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2431
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2471
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2655
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	2870
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3087
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3307
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2471
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3621
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3661
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	3934
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4250
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4290
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4590
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4630
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	4965
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5251
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4290
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5398
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5567
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5739
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	5914
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6088
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6262
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6438
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6594
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	6927
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7275
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4290
	.byte	8,3,35,152,1,13
	.byte	'LPCR0',0
	.word	7399
	.byte	4,3,35,160,1,13
	.byte	'LPCR1',0
	.word	7648
	.byte	4,3,35,164,1,13
	.byte	'LPCR2',0
	.word	7907
	.byte	4,3,35,168,1,13
	.byte	'reserved_A4',0
	.word	7947
	.byte	76,3,35,172,1,13
	.byte	'ACCEN1',0
	.word	8003
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8570
	.byte	4,3,35,252,1,0,14
	.word	8610
	.byte	3
	.word	9213
	.byte	17,5,172,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,5,208,4,17,1,1,5
	.byte	'port',0,5,208,4,44
	.word	9218
	.byte	5
	.byte	'pinIndex',0,5,208,4,56
	.word	604
	.byte	5
	.byte	'action',0,5,208,4,80
	.word	9223
	.byte	6,0
.L336:
	.byte	8
	.byte	'IfxScuCcu_getPll2ErayFrequency',0,3,7,201,8,20
	.word	225
	.byte	1,1
.L339:
	.byte	6,0,17,9,156,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_none',0,2,0,8
	.byte	'IfxCpu_getCoreIndex',0,3,8,141,6,31
	.word	9449
	.byte	1,1,6,0,8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,139,5,20
	.word	604
	.byte	1,1,6,0
.L214:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,161,6,19
	.word	9604
	.byte	1,1,5
	.byte	'address',0,8,161,6,55
	.word	621
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,190,6,20
	.word	604
	.byte	1,1,5
	.byte	'address',0,8,190,6,70
	.word	621
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,172,8,17,1,1,5
	.byte	'address',0,8,172,8,56
	.word	9604
	.byte	5
	.byte	'count',0,8,172,8,72
	.word	9604
	.byte	19,6,0,0
.L188:
	.byte	17,11,86,9,1,18
	.byte	'IfxMtu_MbistSel_none',0,127,18
	.byte	'IfxMtu_MbistSel_cpu1Dspr',0,6,18
	.byte	'IfxMtu_MbistSel_cpu1Dtag',0,8,18
	.byte	'IfxMtu_MbistSel_cpu1Pspr',0,9,18
	.byte	'IfxMtu_MbistSel_cpu1Ptag',0,11,18
	.byte	'IfxMtu_MbistSel_cpu0Dspr',0,14,18
	.byte	'IfxMtu_MbistSel_cpu0Pspr',0,16,18
	.byte	'IfxMtu_MbistSel_cpu0Ptag',0,17,18
	.byte	'IfxMtu_MbistSel_ethermac',0,22,18
	.byte	'IfxMtu_MbistSel_mod4',0,26,18
	.byte	'IfxMtu_MbistSel_gtmFifo',0,28,18
	.byte	'IfxMtu_MbistSel_gtmMcs0',0,29,18
	.byte	'IfxMtu_MbistSel_gtmMcs1',0,30,18
	.byte	'IfxMtu_MbistSel_gtmDpll1a',0,31,18
	.byte	'IfxMtu_MbistSel_gtmDpll1b',0,32,18
	.byte	'IfxMtu_MbistSel_gtmDpll2',0,33,18
	.byte	'IfxMtu_MbistSel_psi5',0,34,18
	.byte	'IfxMtu_MbistSel_mcan',0,36,18
	.byte	'IfxMtu_MbistSel_erayObf',0,38,18
	.byte	'IfxMtu_MbistSel_erayIbfTbf',0,39,18
	.byte	'IfxMtu_MbistSel_erayMbf',0,40,18
	.byte	'IfxMtu_MbistSel_stdbyRam1',0,44,18
	.byte	'IfxMtu_MbistSel_mcds',0,45,18
	.byte	'IfxMtu_MbistSel_emem0',0,46,18
	.byte	'IfxMtu_MbistSel_emem1',0,47,18
	.byte	'IfxMtu_MbistSel_emem2',0,48,18
	.byte	'IfxMtu_MbistSel_emem3',0,49,18
	.byte	'IfxMtu_MbistSel_emem4',0,50,18
	.byte	'IfxMtu_MbistSel_emem5',0,51,18
	.byte	'IfxMtu_MbistSel_emem6',0,52,18
	.byte	'IfxMtu_MbistSel_emem7',0,53,18
	.byte	'IfxMtu_MbistSel_cifJpeg1_4',0,206,0,18
	.byte	'IfxMtu_MbistSel_cifJpeg3',0,208,0,18
	.byte	'IfxMtu_MbistSel_cifCif',0,209,0,18
	.byte	'IfxMtu_MbistSel_stdbyRam2',0,210,0,18
	.byte	'IfxMtu_MbistSel_dma',0,211,0,18
	.byte	'IfxMtu_MbistSel_ememXtm0',0,212,0,18
	.byte	'IfxMtu_MbistSel_ememXtm1',0,213,0,18
	.byte	'IfxMtu_MbistSel_fft0',0,214,0,18
	.byte	'IfxMtu_MbistSel_fft1',0,215,0,0
.L206:
	.byte	4
	.byte	'IfxMtu_disableMbistShell',0,3,10,235,3,17,1,1
.L209:
	.byte	5
	.byte	'mbistSel',0,10,235,3,58
	.word	9835
.L211:
	.byte	6,0
.L225:
	.byte	4
	.byte	'IfxMtu_enableMbistShell',0,3,10,243,3,17,1,1
.L228:
	.byte	5
	.byte	'mbistSel',0,10,243,3,57
	.word	9835
.L230:
	.byte	6,0
.L216:
	.byte	8
	.byte	'IfxMtu_isAutoInitRunning',0,3,10,144,4,20
	.word	604
	.byte	1,1
.L217:
	.byte	5
	.byte	'mbistSel',0,10,144,4,61
	.word	9835
.L219:
	.byte	6,0
.L197:
	.byte	8
	.byte	'IfxMtu_isMbistDone',0,3,10,166,4,20
	.word	604
	.byte	1,1
.L198:
	.byte	5
	.byte	'mbistSel',0,10,166,4,55
	.word	9835
.L200:
	.byte	6,0
.L283:
	.byte	8
	.byte	'IfxMtu_checkErrorFlags',0,3,10,182,4,20
	.word	604
	.byte	1,1
.L285:
	.byte	5
	.byte	'mbistSel',0,10,182,4,59
	.word	9835
.L287:
	.byte	6,0,20
	.word	445
	.byte	21
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	11142
	.byte	0,14
	.word	429
	.byte	3
	.word	429
	.byte	23
	.byte	'__cmpswapw',0
	.word	11184
	.byte	1,1,1,1,24
	.byte	'p',0
	.word	11189
	.byte	24
	.byte	'value',0
	.word	429
	.byte	24
	.byte	'compare',0
	.word	429
	.byte	0,25
	.byte	'__nop',0,1,1,1,1,26
	.word	173
	.byte	27
	.word	199
	.byte	6,0,26
	.word	234
	.byte	27
	.word	266
	.byte	6,0,26
	.word	279
	.byte	6,0,26
	.word	348
	.byte	27
	.word	367
	.byte	6,0,26
	.word	383
	.byte	27
	.word	398
	.byte	27
	.word	412
	.byte	6,0,26
	.word	1191
	.byte	27
	.word	1231
	.byte	27
	.word	1249
	.byte	6,0,26
	.word	1269
	.byte	27
	.word	1307
	.byte	27
	.word	1325
	.byte	6,0,28
	.byte	'IfxScuWdt_clearSafetyEndinit',0,3,229,1,17,1,1,1,1,5
	.byte	'password',0,3,229,1,53
	.word	621
	.byte	0,28
	.byte	'IfxScuWdt_setSafetyEndinit',0,3,249,1,17,1,1,1,1,5
	.byte	'password',0,3,249,1,51
	.word	621
	.byte	0,26
	.word	1345
	.byte	27
	.word	1396
	.byte	6,0,26
	.word	1416
	.byte	6,0,29
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,3,143,3,19
	.word	621
	.byte	1,1,1,1,26
	.word	9326
	.byte	27
	.word	9354
	.byte	27
	.word	9368
	.byte	27
	.word	9386
	.byte	6,0,26
	.word	9404
	.byte	6,0,29
	.byte	'IfxScuCcu_getPllErayVcoFrequency',0,7,155,7,20
	.word	225
	.byte	1,1,1,1,29
	.byte	'IfxScuCcu_getSriFrequency',0,7,185,7,20
	.word	225
	.byte	1,1,1,1,26
	.word	9528
	.byte	6,0,26
	.word	9562
	.byte	6,0,26
	.word	9625
	.byte	27
	.word	9666
	.byte	6,0,26
	.word	9685
	.byte	27
	.word	9740
	.byte	6,0,26
	.word	9759
	.byte	27
	.word	9799
	.byte	27
	.word	9816
	.byte	19,6,0,0,26
	.word	10874
	.byte	27
	.word	10907
	.byte	6,0,26
	.word	10927
	.byte	27
	.word	10959
	.byte	6,0,26
	.word	10979
	.byte	27
	.word	11016
	.byte	6,0,26
	.word	11036
	.byte	27
	.word	11067
	.byte	6,0,7
	.byte	'short int',0,2,5,7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_MC_CONFIG0_Bits',0,12,45,16,2,11
	.byte	'ACCSTYPE',0,2
	.word	11763
	.byte	8,8,2,35,0,11
	.byte	'reserved_8',0,2
	.word	11763
	.byte	4,4,2,35,0,11
	.byte	'NUMACCS',0,2
	.word	11763
	.byte	4,0,2,35,0,0,12,12,150,1,9,2,13
	.byte	'U',0
	.word	621
	.byte	2,2,35,0,13
	.byte	'I',0
	.word	11750
	.byte	2,2,35,0,13
	.byte	'B',0
	.word	11785
	.byte	2,2,35,0,0,10
	.byte	'_Ifx_MC_CONFIG1_Bits',0,12,53,16,2,11
	.byte	'ACCSPAT',0,2
	.word	11763
	.byte	8,8,2,35,0,11
	.byte	'SELFASTB',0,2
	.word	11763
	.byte	4,4,2,35,0,11
	.byte	'AG_MOD',0,2
	.word	11763
	.byte	4,0,2,35,0,0,12,12,158,1,9,2,13
	.byte	'U',0
	.word	621
	.byte	2,2,35,0,13
	.byte	'I',0
	.word	11750
	.byte	2,2,35,0,13
	.byte	'B',0
	.word	11913
	.byte	2,2,35,0,0,10
	.byte	'_Ifx_MC_MCONTROL_Bits',0,12,100,16,2,11
	.byte	'START',0,2
	.word	11763
	.byte	1,15,2,35,0,11
	.byte	'RESUME',0,2
	.word	11763
	.byte	1,14,2,35,0,11
	.byte	'ESTF',0,2
	.word	11763
	.byte	1,13,2,35,0,11
	.byte	'DIR',0,2
	.word	11763
	.byte	1,12,2,35,0,11
	.byte	'DINIT',0,2
	.word	11763
	.byte	1,11,2,35,0,11
	.byte	'RCADR',0,2
	.word	11763
	.byte	1,10,2,35,0,11
	.byte	'ROWTOG',0,2
	.word	11763
	.byte	1,9,2,35,0,11
	.byte	'BITTOG',0,2
	.word	11763
	.byte	1,8,2,35,0,11
	.byte	'GP_BASE',0,2
	.word	11763
	.byte	1,7,2,35,0,11
	.byte	'FAILDMP',0,2
	.word	11763
	.byte	1,6,2,35,0,11
	.byte	'reserved_10',0,2
	.word	11763
	.byte	6,0,2,35,0,0,12,12,190,1,9,2,13
	.byte	'U',0
	.word	621
	.byte	2,2,35,0,13
	.byte	'I',0
	.word	11750
	.byte	2,2,35,0,13
	.byte	'B',0
	.word	12037
	.byte	2,2,35,0,0,10
	.byte	'_Ifx_MC_MSTATUS_Bits',0,12,116,16,2,11
	.byte	'DONE',0,2
	.word	11763
	.byte	1,15,2,35,0,11
	.byte	'FAIL',0,2
	.word	11763
	.byte	1,14,2,35,0,11
	.byte	'FDA',0,2
	.word	11763
	.byte	1,13,2,35,0,11
	.byte	'SFAIL',0,2
	.word	11763
	.byte	1,12,2,35,0,11
	.byte	'reserved_4',0,2
	.word	11763
	.byte	12,0,2,35,0,0,12,12,198,1,9,2,13
	.byte	'U',0
	.word	621
	.byte	2,2,35,0,13
	.byte	'I',0
	.word	11750
	.byte	2,2,35,0,13
	.byte	'B',0
	.word	12302
	.byte	2,2,35,0,0,10
	.byte	'_Ifx_MC_RANGE_Bits',0,12,126,16,2,11
	.byte	'ADDR',0,2
	.word	11763
	.byte	15,1,2,35,0,11
	.byte	'RAEN',0,2
	.word	11763
	.byte	1,0,2,35,0,0,12,12,206,1,9,2,13
	.byte	'U',0
	.word	621
	.byte	2,2,35,0,13
	.byte	'I',0
	.word	11750
	.byte	2,2,35,0,13
	.byte	'B',0
	.word	12455
	.byte	2,2,35,0,0,15,2
	.word	604
	.byte	16,1,0,10
	.byte	'_Ifx_MC_REVID_Bits',0,12,139,1,16,2,11
	.byte	'REV_ID',0,2
	.word	11763
	.byte	16,0,2,35,0,0,12,12,222,1,9,2,13
	.byte	'U',0
	.word	621
	.byte	2,2,35,0,13
	.byte	'I',0
	.word	11750
	.byte	2,2,35,0,13
	.byte	'B',0
	.word	12561
	.byte	2,2,35,0,0,10
	.byte	'_Ifx_MC_ECCS_Bits',0,12,78,16,2,11
	.byte	'CENE',0,2
	.word	11763
	.byte	1,15,2,35,0,11
	.byte	'UENE',0,2
	.word	11763
	.byte	1,14,2,35,0,11
	.byte	'AENE',0,2
	.word	11763
	.byte	1,13,2,35,0,11
	.byte	'ECE',0,2
	.word	11763
	.byte	1,12,2,35,0,11
	.byte	'TRE',0,2
	.word	11763
	.byte	1,11,2,35,0,11
	.byte	'BFLE',0,2
	.word	11763
	.byte	1,10,2,35,0,11
	.byte	'SFLE',0,2
	.word	11763
	.byte	2,8,2,35,0,11
	.byte	'ECCMAP',0,2
	.word	11763
	.byte	2,6,2,35,0,11
	.byte	'TC_WAY_SEL',0,2
	.word	11763
	.byte	2,4,2,35,0,11
	.byte	'reserved_12',0,2
	.word	11763
	.byte	4,0,2,35,0,0,12,12,174,1,9,2,13
	.byte	'U',0
	.word	621
	.byte	2,2,35,0,13
	.byte	'I',0
	.word	11750
	.byte	2,2,35,0,13
	.byte	'B',0
	.word	12645
	.byte	2,2,35,0,0,10
	.byte	'_Ifx_MC_ECCD_Bits',0,12,61,16,2,11
	.byte	'SERR',0,2
	.word	11763
	.byte	1,15,2,35,0,11
	.byte	'CERR',0,2
	.word	11763
	.byte	1,14,2,35,0,11
	.byte	'UERR',0,2
	.word	11763
	.byte	1,13,2,35,0,11
	.byte	'AERR',0,2
	.word	11763
	.byte	1,12,2,35,0,11
	.byte	'TRC',0,2
	.word	11763
	.byte	1,11,2,35,0,11
	.byte	'VAL',0,2
	.word	11763
	.byte	5,6,2,35,0,11
	.byte	'RARVAL',0,2
	.word	11763
	.byte	1,5,2,35,0,11
	.byte	'CENE',0,2
	.word	11763
	.byte	1,4,2,35,0,11
	.byte	'UENE',0,2
	.word	11763
	.byte	1,3,2,35,0,11
	.byte	'AENE',0,2
	.word	11763
	.byte	1,2,2,35,0,11
	.byte	'ECE',0,2
	.word	11763
	.byte	1,1,2,35,0,11
	.byte	'EOV',0,2
	.word	11763
	.byte	1,0,2,35,0,0,12,12,166,1,9,2,13
	.byte	'U',0
	.word	621
	.byte	2,2,35,0,13
	.byte	'I',0
	.word	11750
	.byte	2,2,35,0,13
	.byte	'B',0
	.word	12882
	.byte	2,2,35,0,0,10
	.byte	'_Ifx_MC_ETRR_Bits',0,12,93,16,2,11
	.byte	'ADDR',0,2
	.word	11763
	.byte	13,3,2,35,0,11
	.byte	'MBI',0,2
	.word	11763
	.byte	3,0,2,35,0,0
.L315:
	.byte	12,12,182,1,9,2,13
	.byte	'U',0
	.word	621
	.byte	2,2,35,0,13
	.byte	'I',0
	.word	11750
	.byte	2,2,35,0,13
	.byte	'B',0
	.word	13136
	.byte	2,2,35,0,0,15,10
	.word	13191
	.byte	16,4,0,15,132,1
	.word	604
	.byte	16,131,1,0,10
	.byte	'_Ifx_MC_RDBFL_Bits',0,12,133,1,16,2,11
	.byte	'WDATA',0,2
	.word	11763
	.byte	16,0,2,35,0,0,12,12,214,1,9,2,13
	.byte	'U',0
	.word	621
	.byte	2,2,35,0,13
	.byte	'I',0
	.word	11750
	.byte	2,2,35,0,13
	.byte	'B',0
	.word	13251
	.byte	2,2,35,0,0,15,80
	.word	13294
	.byte	16,39,0,15,16
	.word	604
	.byte	16,15,0,10
	.byte	'_Ifx_MC',0,12,238,1,25,128,2,13
	.byte	'CONFIG0',0
	.word	11873
	.byte	2,2,35,0,13
	.byte	'CONFIG1',0
	.word	11997
	.byte	2,2,35,2,13
	.byte	'MCONTROL',0
	.word	12262
	.byte	2,2,35,4,13
	.byte	'MSTATUS',0
	.word	12415
	.byte	2,2,35,6,13
	.byte	'RANGE',0
	.word	12512
	.byte	2,2,35,8,13
	.byte	'reserved_A',0
	.word	12552
	.byte	2,2,35,10,13
	.byte	'REVID',0
	.word	12605
	.byte	2,2,35,12,13
	.byte	'ECCS',0
	.word	12842
	.byte	2,2,35,14,13
	.byte	'ECCD',0
	.word	13096
	.byte	2,2,35,16,13
	.byte	'ETRR',0
	.word	13231
	.byte	10,2,35,18,13
	.byte	'reserved_1C',0
	.word	13240
	.byte	132,1,2,35,28,13
	.byte	'RDBFL',0
	.word	13334
	.byte	80,3,35,160,1,13
	.byte	'reserved_F0',0
	.word	13343
	.byte	16,3,35,240,1,0,14
	.word	13352
.L201:
	.byte	3
	.word	13589
	.byte	14
	.word	9604
.L212:
	.byte	3
	.word	13599
	.byte	30,11,136,1,9,12,13
	.byte	'numBlocks',0
	.word	604
	.byte	1,2,35,0,13
	.byte	'dataSize',0
	.word	621
	.byte	2,2,35,2,13
	.byte	'eccSize',0
	.word	604
	.byte	1,2,35,4,13
	.byte	'eccInvPos0',0
	.word	604
	.byte	1,2,35,5,13
	.byte	'eccInvPos1',0
	.word	604
	.byte	1,2,35,6,13
	.byte	'mbistDelay',0
	.word	9604
	.byte	4,2,35,8,0,20
	.word	13609
.L237:
	.byte	3
	.word	13730
.L266:
	.byte	3
	.word	621
	.byte	26
	.word	11087
	.byte	27
	.word	11122
	.byte	6,0
.L322:
	.byte	3
	.word	13191
.L334:
	.byte	14
	.word	9604
	.byte	31
	.byte	'__wchar_t',0,13,1,1
	.word	11750
	.byte	31
	.byte	'__size_t',0,13,1,1
	.word	429
	.byte	31
	.byte	'__ptrdiff_t',0,13,1,1
	.word	445
	.byte	32,1,3
	.word	13822
	.byte	31
	.byte	'__codeptr',0,13,1,1
	.word	13824
	.byte	31
	.byte	'boolean',0,14,101,29
	.word	604
	.byte	31
	.byte	'uint8',0,14,105,29
	.word	604
	.byte	31
	.byte	'uint16',0,14,109,29
	.word	621
	.byte	31
	.byte	'uint32',0,14,113,29
	.word	9604
	.byte	31
	.byte	'uint64',0,14,118,29
	.word	311
	.byte	31
	.byte	'sint16',0,14,126,29
	.word	11750
	.byte	7
	.byte	'long int',0,4,5,31
	.byte	'sint32',0,14,131,1,29
	.word	13937
	.byte	7
	.byte	'long long int',0,8,5,31
	.byte	'sint64',0,14,138,1,29
	.word	13965
	.byte	31
	.byte	'float32',0,14,167,1,29
	.word	225
	.byte	31
	.byte	'pvoid',0,15,57,28
	.word	343
	.byte	31
	.byte	'Ifx_TickTime',0,15,79,28
	.word	13965
	.byte	17,15,130,1,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,31
	.byte	'Ifx_RxSel',0,15,140,1,3
	.word	14050
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,16,45,16,4,11
	.byte	'ADDR',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_A_Bits',0,16,48,3
	.word	14188
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,16,51,16,4,11
	.byte	'VSS',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	452
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_BIV_Bits',0,16,55,3
	.word	14249
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,16,58,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	452
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_BTV_Bits',0,16,62,3
	.word	14328
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,16,65,16,4,11
	.byte	'CountValue',0,4
	.word	452
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	452
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_CCNT_Bits',0,16,69,3
	.word	14414
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,16,72,16,4,11
	.byte	'CM',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	452
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	452
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	452
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	452
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_CPU_CCTRL_Bits',0,16,80,3
	.word	14503
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,16,83,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	452
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	452
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_COMPAT_Bits',0,16,89,3
	.word	14649
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,16,92,16,4,11
	.byte	'CORE_ID',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	452
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_CORE_ID_Bits',0,16,96,3
	.word	14776
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,16,99,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	452
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_L_Bits',0,16,103,3
	.word	14874
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,16,106,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	452
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_U_Bits',0,16,110,3
	.word	14967
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,16,113,16,4,11
	.byte	'MODREV',0,4
	.word	452
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	452
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	452
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPU_ID_Bits',0,16,118,3
	.word	15060
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,16,121,16,4,11
	.byte	'XE',0,4
	.word	452
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	452
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_CPXE_Bits',0,16,125,3
	.word	15167
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,16,128,1,16,4,11
	.byte	'EVTA',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	452
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	452
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	452
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	452
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_CREVT_Bits',0,16,136,1,3
	.word	15254
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,16,139,1,16,4,11
	.byte	'CID',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	452
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_CUS_ID_Bits',0,16,143,1,3
	.word	15408
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,16,146,1,16,4,11
	.byte	'DATA',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_D_Bits',0,16,149,1,3
	.word	15502
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,16,152,1,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	452
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	452
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	452
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	452
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	452
	.byte	1,17,2,35,0,11
	.byte	'SME',0,4
	.word	452
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	452
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_DATR_Bits',0,16,163,1,3
	.word	15565
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,16,166,1,16,4,11
	.byte	'DE',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	452
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	452
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	452
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	452
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	452
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	452
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	452
	.byte	19,0,2,35,0,0,31
	.byte	'Ifx_CPU_DBGSR_Bits',0,16,177,1,3
	.word	15783
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,16,180,1,16,4,11
	.byte	'DTA',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	452
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_DBGTCR_Bits',0,16,184,1,3
	.word	15998
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,16,187,1,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	452
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_CPU_DCON0_Bits',0,16,192,1,3
	.word	16092
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,16,195,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	452
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	452
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_DCON2_Bits',0,16,199,1,3
	.word	16208
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,16,202,1,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	6,26,2,35,0,11
	.byte	'DCXValue',0,4
	.word	452
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_CPU_DCX_Bits',0,16,206,1,3
	.word	16309
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,16,209,1,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_DEADD_Bits',0,16,212,1,3
	.word	16402
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,16,215,1,16,4,11
	.byte	'TA',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_DIEAR_Bits',0,16,218,1,3
	.word	16482
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,16,221,1,16,4,11
	.byte	'IED',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	452
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	452
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	452
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	452
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	452
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	452
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	452
	.byte	18,0,2,35,0,0,31
	.byte	'Ifx_CPU_DIETR_Bits',0,16,233,1,3
	.word	16551
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,16,236,1,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'DMSValue',0,4
	.word	452
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_DMS_Bits',0,16,240,1,3
	.word	16780
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,16,243,1,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	452
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_L_Bits',0,16,247,1,3
	.word	16873
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,16,250,1,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	452
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_U_Bits',0,16,254,1,3
	.word	16968
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,16,129,2,16,4,11
	.byte	'RE',0,4
	.word	452
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	452
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPRE_Bits',0,16,133,2,3
	.word	17063
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,16,136,2,16,4,11
	.byte	'WE',0,4
	.word	452
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	452
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_DPWE_Bits',0,16,140,2,3
	.word	17153
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,16,143,2,16,4,11
	.byte	'SRE',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	452
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	452
	.byte	3,26,2,35,0,11
	.byte	'CRE',0,4
	.word	452
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	452
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	452
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	452
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	452
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	452
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	452
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	452
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	452
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	452
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	452
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	452
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_CPU_DSTR_Bits',0,16,161,2,3
	.word	17243
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,16,164,2,16,4,11
	.byte	'EVTA',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	452
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	452
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	452
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	452
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_EXEVT_Bits',0,16,172,2,3
	.word	17567
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,16,175,2,16,4,11
	.byte	'FCXO',0,4
	.word	452
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	452
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	452
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_CPU_FCX_Bits',0,16,180,2,3
	.word	17721
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,16,183,2,16,4,11
	.byte	'TST',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	452
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	452
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	452
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	452
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	452
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	452
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	452
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	452
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	452
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	452
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	452
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	452
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	452
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	452
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	452
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,16,202,2,3
	.word	17827
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,16,205,2,16,4,11
	.byte	'OPC',0,4
	.word	452
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	452
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	452
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	452
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	452
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,16,212,2,3
	.word	18176
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,16,215,2,16,4,11
	.byte	'PC',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,16,218,2,3
	.word	18336
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,16,221,2,16,4,11
	.byte	'SRC1',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,16,224,2,3
	.word	18417
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,16,227,2,16,4,11
	.byte	'SRC2',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,16,230,2,3
	.word	18504
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,16,233,2,16,4,11
	.byte	'SRC3',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,16,236,2,3
	.word	18591
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,16,239,2,16,4,11
	.byte	'CountValue',0,4
	.word	452
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	452
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_ICNT_Bits',0,16,243,2,3
	.word	18678
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,16,246,2,16,4,11
	.byte	'CCPN',0,4
	.word	452
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	452
	.byte	5,17,2,35,0,11
	.byte	'IE',0,4
	.word	452
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	452
	.byte	10,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	452
	.byte	6,0,2,35,0,0,31
	.byte	'Ifx_CPU_ICR_Bits',0,16,253,2,3
	.word	18769
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,16,128,3,16,4,11
	.byte	'ISP',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_ISP_Bits',0,16,131,3,3
	.word	18912
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,16,134,3,16,4,11
	.byte	'LCXO',0,4
	.word	452
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	452
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	452
	.byte	12,0,2,35,0,0,31
	.byte	'Ifx_CPU_LCX_Bits',0,16,139,3,3
	.word	18978
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,16,142,3,16,4,11
	.byte	'CountValue',0,4
	.word	452
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	452
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_M1CNT_Bits',0,16,146,3,3
	.word	19084
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,16,149,3,16,4,11
	.byte	'CountValue',0,4
	.word	452
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	452
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_M2CNT_Bits',0,16,153,3,3
	.word	19177
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,16,156,3,16,4,11
	.byte	'CountValue',0,4
	.word	452
	.byte	31,1,2,35,0,11
	.byte	'SOvf',0,4
	.word	452
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_M3CNT_Bits',0,16,160,3,3
	.word	19270
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,16,163,3,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	452
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_CPU_PC_Bits',0,16,167,3,3
	.word	19363
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,16,170,3,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	452
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCON0_Bits',0,16,175,3,3
	.word	19448
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,16,178,3,16,4,11
	.byte	'PCINV',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	452
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCON1_Bits',0,16,183,3,3
	.word	19564
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,16,186,3,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	452
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	452
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCON2_Bits',0,16,190,3,3
	.word	19675
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,16,193,3,16,4,11
	.byte	'PCXO',0,4
	.word	452
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	452
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	452
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	452
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	452
	.byte	10,0,2,35,0,0,31
	.byte	'Ifx_CPU_PCXI_Bits',0,16,200,3,3
	.word	19776
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,16,203,3,16,4,11
	.byte	'TA',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_PIEAR_Bits',0,16,206,3,3
	.word	19906
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,16,209,3,16,4,11
	.byte	'IED',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	452
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	452
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	452
	.byte	6,21,2,35,0,11
	.byte	'IE_DUAL',0,4
	.word	452
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	452
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	452
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	452
	.byte	18,0,2,35,0,0,31
	.byte	'Ifx_CPU_PIETR_Bits',0,16,221,3,3
	.word	19975
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,16,224,3,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	13,19,2,35,0,11
	.byte	'DAC',0,4
	.word	452
	.byte	3,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	452
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PMA0_Bits',0,16,229,3,3
	.word	20204
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,16,232,3,16,4,11
	.byte	'reserved_0',0,4
	.word	452
	.byte	14,18,2,35,0,11
	.byte	'CAC',0,4
	.word	452
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	452
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PMA1_Bits',0,16,237,3,3
	.word	20317
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,16,240,3,16,4,11
	.byte	'PSI',0,4
	.word	452
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	452
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_CPU_PMA2_Bits',0,16,244,3,3
	.word	20430
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,16,247,3,16,4,11
	.byte	'FRE',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	452
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	452
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	452
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	452
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	452
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	452
	.byte	17,0,2,35,0,0,31
	.byte	'Ifx_CPU_PSTR_Bits',0,16,129,4,3
	.word	20521
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,16,132,4,16,4,11
	.byte	'CDC',0,4
	.word	452
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	452
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	452
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	452
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	452
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	452
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	452
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	452
	.byte	12,5,2,35,0,11
	.byte	'SAV',0,4
	.word	452
	.byte	1,4,2,35,0,11
	.byte	'AV',0,4
	.word	452
	.byte	1,3,2,35,0,11
	.byte	'SV',0,4
	.word	452
	.byte	1,2,2,35,0,11
	.byte	'V',0,4
	.word	452
	.byte	1,1,2,35,0,11
	.byte	'C',0,4
	.word	452
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_PSW_Bits',0,16,147,4,3
	.word	20724
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,16,150,4,16,4,11
	.byte	'ADFLIP',0,4
	.word	452
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	452
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	452
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	452
	.byte	1,0,2,35,0,0,31
	.byte	'Ifx_CPU_SEGEN_Bits',0,16,156,4,3
	.word	20967
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,16,159,4,16,4,11
	.byte	'PC',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'PT',0,4
	.word	452
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	452
	.byte	5,24,2,35,0,11
	.byte	'DC',0,4
	.word	452
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	452
	.byte	1,22,2,35,0,11
	.byte	'DT',0,4
	.word	452
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	452
	.byte	13,8,2,35,0,11
	.byte	'IODT',0,4
	.word	452
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	452
	.byte	7,0,2,35,0,0,31
	.byte	'Ifx_CPU_SMACON_Bits',0,16,171,4,3
	.word	21095
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENA_Bits',0,16,174,4,16,4,11
	.byte	'EN',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_ACCENA_Bits',0,16,177,4,3
	.word	21336
	.byte	10
	.byte	'_Ifx_CPU_SPROT_ACCENB_Bits',0,16,180,4,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_ACCENB_Bits',0,16,183,4,3
	.word	21419
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,16,186,4,16,4,11
	.byte	'EN',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA_Bits',0,16,189,4,3
	.word	21510
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,16,192,4,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB_Bits',0,16,195,4,3
	.word	21601
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_LA_Bits',0,16,198,4,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	429
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_LA_Bits',0,16,202,4,3
	.word	21700
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN_UA_Bits',0,16,205,4,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	429
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_UA_Bits',0,16,209,4,3
	.word	21807
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,16,212,4,16,4,11
	.byte	'EVTA',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	452
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	452
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	452
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	452
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_SWEVT_Bits',0,16,220,4,3
	.word	21914
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,16,223,4,16,4,11
	.byte	'FCDSF',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	452
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'IT',0,4
	.word	452
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	452
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_SYSCON_Bits',0,16,231,4,3
	.word	22068
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,16,234,4,16,4,11
	.byte	'ASI',0,4
	.word	452
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	452
	.byte	27,0,2,35,0,0,31
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,16,238,4,3
	.word	22229
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,16,241,4,16,4,11
	.byte	'TEXP0',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	452
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	452
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	452
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	452
	.byte	15,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_CON_Bits',0,16,249,4,3
	.word	22327
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,16,252,4,16,4,11
	.byte	'Timer',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,16,255,4,3
	.word	22499
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,16,130,5,16,4,11
	.byte	'ADDR',0,4
	.word	452
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_CPU_TR_ADR_Bits',0,16,133,5,3
	.word	22579
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,16,136,5,16,4,11
	.byte	'EVTA',0,4
	.word	452
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	452
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	452
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	452
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	452
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	452
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	452
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	452
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	452
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	452
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	452
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	452
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	452
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	452
	.byte	3,0,2,35,0,0,31
	.byte	'Ifx_CPU_TR_EVT_Bits',0,16,153,5,3
	.word	22652
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,16,156,5,16,4,11
	.byte	'T0',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	452
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	452
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	452
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	452
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	452
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	452
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	452
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,16,167,5,3
	.word	22970
	.byte	12,16,175,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14188
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_A',0,16,180,5,3
	.word	23165
	.byte	12,16,183,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14249
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_BIV',0,16,188,5,3
	.word	23224
	.byte	12,16,191,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14328
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_BTV',0,16,196,5,3
	.word	23285
	.byte	12,16,199,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14414
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CCNT',0,16,204,5,3
	.word	23346
	.byte	12,16,207,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14503
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CCTRL',0,16,212,5,3
	.word	23408
	.byte	12,16,215,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14649
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_COMPAT',0,16,220,5,3
	.word	23471
	.byte	12,16,223,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14776
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CORE_ID',0,16,228,5,3
	.word	23535
	.byte	12,16,231,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14874
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_L',0,16,236,5,3
	.word	23600
	.byte	12,16,239,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	14967
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPR_U',0,16,244,5,3
	.word	23663
	.byte	12,16,247,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15060
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPU_ID',0,16,252,5,3
	.word	23726
	.byte	12,16,255,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15167
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CPXE',0,16,132,6,3
	.word	23790
	.byte	12,16,135,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15254
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CREVT',0,16,140,6,3
	.word	23852
	.byte	12,16,143,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15408
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_CUS_ID',0,16,148,6,3
	.word	23915
	.byte	12,16,151,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15502
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_D',0,16,156,6,3
	.word	23979
	.byte	12,16,159,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15565
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DATR',0,16,164,6,3
	.word	24038
	.byte	12,16,167,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15783
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DBGSR',0,16,172,6,3
	.word	24100
	.byte	12,16,175,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	15998
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DBGTCR',0,16,180,6,3
	.word	24163
	.byte	12,16,183,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16092
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DCON0',0,16,188,6,3
	.word	24227
	.byte	12,16,191,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16208
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DCON2',0,16,196,6,3
	.word	24290
	.byte	12,16,199,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16309
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DCX',0,16,204,6,3
	.word	24353
	.byte	12,16,207,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16402
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DEADD',0,16,212,6,3
	.word	24414
	.byte	12,16,215,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16482
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DIEAR',0,16,220,6,3
	.word	24477
	.byte	12,16,223,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16551
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DIETR',0,16,228,6,3
	.word	24540
	.byte	12,16,231,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16780
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DMS',0,16,236,6,3
	.word	24603
	.byte	12,16,239,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16873
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_L',0,16,244,6,3
	.word	24664
	.byte	12,16,247,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16968
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPR_U',0,16,252,6,3
	.word	24727
	.byte	12,16,255,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17063
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPRE',0,16,132,7,3
	.word	24790
	.byte	12,16,135,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17153
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DPWE',0,16,140,7,3
	.word	24852
	.byte	12,16,143,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17243
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_DSTR',0,16,148,7,3
	.word	24914
	.byte	12,16,151,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17567
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_EXEVT',0,16,156,7,3
	.word	24976
	.byte	12,16,159,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17721
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FCX',0,16,164,7,3
	.word	25039
	.byte	12,16,167,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17827
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,16,172,7,3
	.word	25100
	.byte	12,16,175,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18176
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,16,180,7,3
	.word	25170
	.byte	12,16,183,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18336
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,16,188,7,3
	.word	25240
	.byte	12,16,191,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18417
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,16,196,7,3
	.word	25309
	.byte	12,16,199,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18504
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,16,204,7,3
	.word	25380
	.byte	12,16,207,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18591
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,16,212,7,3
	.word	25451
	.byte	12,16,215,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18678
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_ICNT',0,16,220,7,3
	.word	25522
	.byte	12,16,223,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18769
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_ICR',0,16,228,7,3
	.word	25584
	.byte	12,16,231,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18912
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_ISP',0,16,236,7,3
	.word	25645
	.byte	12,16,239,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18978
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_LCX',0,16,244,7,3
	.word	25706
	.byte	12,16,247,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19084
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_M1CNT',0,16,252,7,3
	.word	25767
	.byte	12,16,255,7,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19177
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_M2CNT',0,16,132,8,3
	.word	25830
	.byte	12,16,135,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19270
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_M3CNT',0,16,140,8,3
	.word	25893
	.byte	12,16,143,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19363
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PC',0,16,148,8,3
	.word	25956
	.byte	12,16,151,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19448
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCON0',0,16,156,8,3
	.word	26016
	.byte	12,16,159,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19564
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCON1',0,16,164,8,3
	.word	26079
	.byte	12,16,167,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19675
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCON2',0,16,172,8,3
	.word	26142
	.byte	12,16,175,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19776
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PCXI',0,16,180,8,3
	.word	26205
	.byte	12,16,183,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19906
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PIEAR',0,16,188,8,3
	.word	26267
	.byte	12,16,191,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19975
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PIETR',0,16,196,8,3
	.word	26330
	.byte	12,16,199,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20204
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PMA0',0,16,204,8,3
	.word	26393
	.byte	12,16,207,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20317
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PMA1',0,16,212,8,3
	.word	26455
	.byte	12,16,215,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20430
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PMA2',0,16,220,8,3
	.word	26517
	.byte	12,16,223,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20521
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PSTR',0,16,228,8,3
	.word	26579
	.byte	12,16,231,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20724
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_PSW',0,16,236,8,3
	.word	26641
	.byte	12,16,239,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20967
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SEGEN',0,16,244,8,3
	.word	26702
	.byte	12,16,247,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21095
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SMACON',0,16,252,8,3
	.word	26765
	.byte	12,16,255,8,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21336
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_ACCENA',0,16,132,9,3
	.word	26829
	.byte	12,16,135,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21419
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_ACCENB',0,16,140,9,3
	.word	26899
	.byte	12,16,143,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21510
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_ACCENA',0,16,148,9,3
	.word	26969
	.byte	12,16,151,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21601
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_ACCENB',0,16,156,9,3
	.word	27043
	.byte	12,16,159,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21700
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_LA',0,16,164,9,3
	.word	27117
	.byte	12,16,167,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21807
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SPROT_RGN_UA',0,16,172,9,3
	.word	27187
	.byte	12,16,175,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21914
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SWEVT',0,16,180,9,3
	.word	27257
	.byte	12,16,183,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22068
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_SYSCON',0,16,188,9,3
	.word	27320
	.byte	12,16,191,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22229
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TASK_ASI',0,16,196,9,3
	.word	27384
	.byte	12,16,199,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22327
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_CON',0,16,204,9,3
	.word	27450
	.byte	12,16,207,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22499
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TPS_TIMER',0,16,212,9,3
	.word	27515
	.byte	12,16,215,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22579
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TR_ADR',0,16,220,9,3
	.word	27582
	.byte	12,16,223,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22652
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TR_EVT',0,16,228,9,3
	.word	27646
	.byte	12,16,231,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22970
	.byte	4,2,35,0,0,31
	.byte	'Ifx_CPU_TRIG_ACC',0,16,236,9,3
	.word	27710
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,16,247,9,25,8,13
	.byte	'L',0
	.word	23600
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	23663
	.byte	4,2,35,4,0,14
	.word	27776
	.byte	31
	.byte	'Ifx_CPU_CPR',0,16,251,9,3
	.word	27818
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,16,254,9,25,8,13
	.byte	'L',0
	.word	24664
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	24727
	.byte	4,2,35,4,0,14
	.word	27844
	.byte	31
	.byte	'Ifx_CPU_DPR',0,16,130,10,3
	.word	27886
	.byte	10
	.byte	'_Ifx_CPU_SPROT_RGN',0,16,133,10,25,16,13
	.byte	'LA',0
	.word	27117
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	27187
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	26969
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	27043
	.byte	4,2,35,12,0,14
	.word	27912
	.byte	31
	.byte	'Ifx_CPU_SPROT_RGN',0,16,139,10,3
	.word	27994
	.byte	15,12
	.word	27515
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,16,142,10,25,16,13
	.byte	'CON',0
	.word	27450
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	28026
	.byte	12,2,35,4,0,14
	.word	28035
	.byte	31
	.byte	'Ifx_CPU_TPS',0,16,146,10,3
	.word	28083
	.byte	10
	.byte	'_Ifx_CPU_TR',0,16,149,10,25,8,13
	.byte	'EVT',0
	.word	27646
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	27582
	.byte	4,2,35,4,0,14
	.word	28109
	.byte	31
	.byte	'Ifx_CPU_TR',0,16,153,10,3
	.word	28154
	.byte	15,176,32
	.word	604
	.byte	16,175,32,0,15,208,223,1
	.word	604
	.byte	16,207,223,1,0,15,248,1
	.word	604
	.byte	16,247,1,0,15,244,29
	.word	604
	.byte	16,243,29,0,15,188,3
	.word	604
	.byte	16,187,3,0,15,232,3
	.word	604
	.byte	16,231,3,0,15,252,23
	.word	604
	.byte	16,251,23,0,15,228,63
	.word	604
	.byte	16,227,63,0,15,128,1
	.word	27844
	.byte	16,15,0,14
	.word	28269
	.byte	15,128,31
	.word	604
	.byte	16,255,30,0,15,64
	.word	27776
	.byte	16,7,0,14
	.word	28295
	.byte	15,192,31
	.word	604
	.byte	16,191,31,0,15,16
	.word	23790
	.byte	16,3,0,15,16
	.word	24790
	.byte	16,3,0,15,16
	.word	24852
	.byte	16,3,0,15,208,7
	.word	604
	.byte	16,207,7,0,14
	.word	28035
	.byte	15,240,23
	.word	604
	.byte	16,239,23,0,15,64
	.word	28109
	.byte	16,7,0,14
	.word	28374
	.byte	15,192,23
	.word	604
	.byte	16,191,23,0,15,232,1
	.word	604
	.byte	16,231,1,0,15,28
	.word	604
	.byte	16,27,0,15,180,1
	.word	604
	.byte	16,179,1,0,15,172,1
	.word	604
	.byte	16,171,1,0,15,64
	.word	23979
	.byte	16,15,0,15,64
	.word	604
	.byte	16,63,0,15,64
	.word	23165
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,16,166,10,25,128,128,4,13
	.byte	'reserved_0',0
	.word	28179
	.byte	176,32,2,35,0,13
	.byte	'SEGEN',0
	.word	26702
	.byte	4,3,35,176,32,13
	.byte	'reserved_1034',0
	.word	28190
	.byte	208,223,1,3,35,180,32,13
	.byte	'TASK_ASI',0
	.word	27384
	.byte	4,4,35,132,128,2,13
	.byte	'reserved_8008',0
	.word	28203
	.byte	248,1,4,35,136,128,2,13
	.byte	'PMA0',0
	.word	26393
	.byte	4,4,35,128,130,2,13
	.byte	'PMA1',0
	.word	26455
	.byte	4,4,35,132,130,2,13
	.byte	'PMA2',0
	.word	26517
	.byte	4,4,35,136,130,2,13
	.byte	'reserved_810C',0
	.word	28214
	.byte	244,29,4,35,140,130,2,13
	.byte	'DCON2',0
	.word	24290
	.byte	4,4,35,128,160,2,13
	.byte	'reserved_9004',0
	.word	4290
	.byte	8,4,35,132,160,2,13
	.byte	'SMACON',0
	.word	26765
	.byte	4,4,35,140,160,2,13
	.byte	'DSTR',0
	.word	24914
	.byte	4,4,35,144,160,2,13
	.byte	'reserved_9014',0
	.word	2471
	.byte	4,4,35,148,160,2,13
	.byte	'DATR',0
	.word	24038
	.byte	4,4,35,152,160,2,13
	.byte	'DEADD',0
	.word	24414
	.byte	4,4,35,156,160,2,13
	.byte	'DIEAR',0
	.word	24477
	.byte	4,4,35,160,160,2,13
	.byte	'DIETR',0
	.word	24540
	.byte	4,4,35,164,160,2,13
	.byte	'reserved_9028',0
	.word	3661
	.byte	24,4,35,168,160,2,13
	.byte	'DCON0',0
	.word	24227
	.byte	4,4,35,192,160,2,13
	.byte	'reserved_9044',0
	.word	28225
	.byte	188,3,4,35,196,160,2,13
	.byte	'PSTR',0
	.word	26579
	.byte	4,4,35,128,164,2,13
	.byte	'PCON1',0
	.word	26079
	.byte	4,4,35,132,164,2,13
	.byte	'PCON2',0
	.word	26142
	.byte	4,4,35,136,164,2,13
	.byte	'PCON0',0
	.word	26016
	.byte	4,4,35,140,164,2,13
	.byte	'PIEAR',0
	.word	26267
	.byte	4,4,35,144,164,2,13
	.byte	'PIETR',0
	.word	26330
	.byte	4,4,35,148,164,2,13
	.byte	'reserved_9218',0
	.word	28236
	.byte	232,3,4,35,152,164,2,13
	.byte	'COMPAT',0
	.word	23471
	.byte	4,4,35,128,168,2,13
	.byte	'reserved_9404',0
	.word	28247
	.byte	252,23,4,35,132,168,2,13
	.byte	'FPU_TRAP_CON',0
	.word	25100
	.byte	4,4,35,128,192,2,13
	.byte	'FPU_TRAP_PC',0
	.word	25240
	.byte	4,4,35,132,192,2,13
	.byte	'FPU_TRAP_OPC',0
	.word	25170
	.byte	4,4,35,136,192,2,13
	.byte	'reserved_A00C',0
	.word	2471
	.byte	4,4,35,140,192,2,13
	.byte	'FPU_TRAP_SRC1',0
	.word	25309
	.byte	4,4,35,144,192,2,13
	.byte	'FPU_TRAP_SRC2',0
	.word	25380
	.byte	4,4,35,148,192,2,13
	.byte	'FPU_TRAP_SRC3',0
	.word	25451
	.byte	4,4,35,152,192,2,13
	.byte	'reserved_A01C',0
	.word	28258
	.byte	228,63,4,35,156,192,2,13
	.byte	'DPR',0
	.word	28279
	.byte	128,1,4,35,128,128,3,13
	.byte	'reserved_C080',0
	.word	28284
	.byte	128,31,4,35,128,129,3,13
	.byte	'CPR',0
	.word	28304
	.byte	64,4,35,128,160,3,13
	.byte	'reserved_D040',0
	.word	28309
	.byte	192,31,4,35,192,160,3,13
	.byte	'CPXE',0
	.word	28320
	.byte	16,4,35,128,192,3,13
	.byte	'DPRE',0
	.word	28329
	.byte	16,4,35,144,192,3,13
	.byte	'DPWE',0
	.word	28338
	.byte	16,4,35,160,192,3,13
	.byte	'reserved_E030',0
	.word	28347
	.byte	208,7,4,35,176,192,3,13
	.byte	'TPS',0
	.word	28358
	.byte	16,4,35,128,200,3,13
	.byte	'reserved_E410',0
	.word	28363
	.byte	240,23,4,35,144,200,3,13
	.byte	'TR',0
	.word	28383
	.byte	64,4,35,128,224,3,13
	.byte	'reserved_F040',0
	.word	28388
	.byte	192,23,4,35,192,224,3,13
	.byte	'CCTRL',0
	.word	23408
	.byte	4,4,35,128,248,3,13
	.byte	'CCNT',0
	.word	23346
	.byte	4,4,35,132,248,3,13
	.byte	'ICNT',0
	.word	25522
	.byte	4,4,35,136,248,3,13
	.byte	'M1CNT',0
	.word	25767
	.byte	4,4,35,140,248,3,13
	.byte	'M2CNT',0
	.word	25830
	.byte	4,4,35,144,248,3,13
	.byte	'M3CNT',0
	.word	25893
	.byte	4,4,35,148,248,3,13
	.byte	'reserved_FC18',0
	.word	28399
	.byte	232,1,4,35,152,248,3,13
	.byte	'DBGSR',0
	.word	24100
	.byte	4,4,35,128,250,3,13
	.byte	'reserved_FD04',0
	.word	2471
	.byte	4,4,35,132,250,3,13
	.byte	'EXEVT',0
	.word	24976
	.byte	4,4,35,136,250,3,13
	.byte	'CREVT',0
	.word	23852
	.byte	4,4,35,140,250,3,13
	.byte	'SWEVT',0
	.word	27257
	.byte	4,4,35,144,250,3,13
	.byte	'reserved_FD14',0
	.word	28410
	.byte	28,4,35,148,250,3,13
	.byte	'TRIG_ACC',0
	.word	27710
	.byte	4,4,35,176,250,3,13
	.byte	'reserved_FD34',0
	.word	4630
	.byte	12,4,35,180,250,3,13
	.byte	'DMS',0
	.word	24603
	.byte	4,4,35,192,250,3,13
	.byte	'DCX',0
	.word	24353
	.byte	4,4,35,196,250,3,13
	.byte	'DBGTCR',0
	.word	24163
	.byte	4,4,35,200,250,3,13
	.byte	'reserved_FD4C',0
	.word	28419
	.byte	180,1,4,35,204,250,3,13
	.byte	'PCXI',0
	.word	26205
	.byte	4,4,35,128,252,3,13
	.byte	'PSW',0
	.word	26641
	.byte	4,4,35,132,252,3,13
	.byte	'PC',0
	.word	25956
	.byte	4,4,35,136,252,3,13
	.byte	'reserved_FE0C',0
	.word	4290
	.byte	8,4,35,140,252,3,13
	.byte	'SYSCON',0
	.word	27320
	.byte	4,4,35,148,252,3,13
	.byte	'CPU_ID',0
	.word	23726
	.byte	4,4,35,152,252,3,13
	.byte	'CORE_ID',0
	.word	23535
	.byte	4,4,35,156,252,3,13
	.byte	'BIV',0
	.word	23224
	.byte	4,4,35,160,252,3,13
	.byte	'BTV',0
	.word	23285
	.byte	4,4,35,164,252,3,13
	.byte	'ISP',0
	.word	25645
	.byte	4,4,35,168,252,3,13
	.byte	'ICR',0
	.word	25584
	.byte	4,4,35,172,252,3,13
	.byte	'reserved_FE30',0
	.word	4290
	.byte	8,4,35,176,252,3,13
	.byte	'FCX',0
	.word	25039
	.byte	4,4,35,184,252,3,13
	.byte	'LCX',0
	.word	25706
	.byte	4,4,35,188,252,3,13
	.byte	'reserved_FE40',0
	.word	13343
	.byte	16,4,35,192,252,3,13
	.byte	'CUS_ID',0
	.word	23915
	.byte	4,4,35,208,252,3,13
	.byte	'reserved_FE54',0
	.word	28430
	.byte	172,1,4,35,212,252,3,13
	.byte	'D',0
	.word	28441
	.byte	64,4,35,128,254,3,13
	.byte	'reserved_FF40',0
	.word	28450
	.byte	64,4,35,192,254,3,13
	.byte	'A',0
	.word	28459
	.byte	64,4,35,128,255,3,13
	.byte	'reserved_FFC0',0
	.word	28450
	.byte	64,4,35,192,255,3,0,14
	.word	28468
	.byte	31
	.byte	'Ifx_CPU',0,16,130,11,3
	.word	30259
	.byte	17,9,127,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_none',0,2,0,31
	.byte	'IfxCpu_Id',0,9,132,1,3
	.word	30281
	.byte	31
	.byte	'IfxCpu_ResourceCpu',0,9,161,1,3
	.word	9449
	.byte	10
	.byte	'_Ifx_SRC_SRCR_Bits',0,17,45,16,4,11
	.byte	'SRPN',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	604
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	604
	.byte	3,0,2,35,1,11
	.byte	'ECC',0,1
	.word	604
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	604
	.byte	2,0,2,35,2,11
	.byte	'SRR',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SRC_SRCR_Bits',0,17,62,3
	.word	30379
	.byte	12,17,70,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30379
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SRC_SRCR',0,17,75,3
	.word	30695
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,17,86,25,4,13
	.byte	'SR',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	30755
	.byte	31
	.byte	'Ifx_SRC_AGBT',0,17,89,3
	.word	30787
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,17,92,25,12,13
	.byte	'TX',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	30695
	.byte	4,2,35,8,0,14
	.word	30813
	.byte	31
	.byte	'Ifx_SRC_ASCLIN',0,17,97,3
	.word	30872
	.byte	10
	.byte	'_Ifx_SRC_BCUSPB',0,17,100,25,4,13
	.byte	'SBSRC',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	30900
	.byte	31
	.byte	'Ifx_SRC_BCUSPB',0,17,103,3
	.word	30937
	.byte	15,64
	.word	30695
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN',0,17,106,25,64,13
	.byte	'INT',0
	.word	30965
	.byte	64,2,35,0,0,14
	.word	30974
	.byte	31
	.byte	'Ifx_SRC_CAN',0,17,109,3
	.word	31006
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,17,112,25,16,13
	.byte	'SR0',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	30695
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	30695
	.byte	4,2,35,12,0,14
	.word	31031
	.byte	31
	.byte	'Ifx_SRC_CCU6',0,17,118,3
	.word	31103
	.byte	15,8
	.word	30695
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS',0,17,121,25,8,13
	.byte	'SR',0
	.word	31129
	.byte	8,2,35,0,0,14
	.word	31138
	.byte	31
	.byte	'Ifx_SRC_CERBERUS',0,17,124,3
	.word	31174
	.byte	10
	.byte	'_Ifx_SRC_CIF',0,17,127,25,16,13
	.byte	'MI',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'MIEP',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'ISP',0
	.word	30695
	.byte	4,2,35,8,13
	.byte	'MJPEG',0
	.word	30695
	.byte	4,2,35,12,0,14
	.word	31204
	.byte	31
	.byte	'Ifx_SRC_CIF',0,17,133,1,3
	.word	31277
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,17,136,1,25,4,13
	.byte	'SBSRC',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	31303
	.byte	31
	.byte	'Ifx_SRC_CPU',0,17,139,1,3
	.word	31338
	.byte	15,192,1
	.word	30695
	.byte	16,47,0,10
	.byte	'_Ifx_SRC_DMA',0,17,142,1,25,208,1,13
	.byte	'ERR',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	4630
	.byte	12,2,35,4,13
	.byte	'CH',0
	.word	31364
	.byte	192,1,2,35,16,0,14
	.word	31374
	.byte	31
	.byte	'Ifx_SRC_DMA',0,17,147,1,3
	.word	31441
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,17,150,1,25,8,13
	.byte	'SRM',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	30695
	.byte	4,2,35,4,0,14
	.word	31467
	.byte	31
	.byte	'Ifx_SRC_DSADC',0,17,154,1,3
	.word	31515
	.byte	10
	.byte	'_Ifx_SRC_EMEM',0,17,157,1,25,4,13
	.byte	'SR',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	31543
	.byte	31
	.byte	'Ifx_SRC_EMEM',0,17,160,1,3
	.word	31576
	.byte	15,40
	.word	604
	.byte	16,39,0,10
	.byte	'_Ifx_SRC_ERAY',0,17,163,1,25,80,13
	.byte	'INT',0
	.word	31129
	.byte	8,2,35,0,13
	.byte	'TINT',0
	.word	31129
	.byte	8,2,35,8,13
	.byte	'NDAT',0
	.word	31129
	.byte	8,2,35,16,13
	.byte	'MBSC',0
	.word	31129
	.byte	8,2,35,24,13
	.byte	'OBUSY',0
	.word	30695
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	30695
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	31603
	.byte	40,2,35,40,0,14
	.word	31612
	.byte	31
	.byte	'Ifx_SRC_ERAY',0,17,172,1,3
	.word	31739
	.byte	10
	.byte	'_Ifx_SRC_ETH',0,17,175,1,25,4,13
	.byte	'SR',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	31766
	.byte	31
	.byte	'Ifx_SRC_ETH',0,17,178,1,3
	.word	31798
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,17,181,1,25,4,13
	.byte	'SR',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	31824
	.byte	31
	.byte	'Ifx_SRC_FCE',0,17,184,1,3
	.word	31856
	.byte	10
	.byte	'_Ifx_SRC_FFT',0,17,187,1,25,12,13
	.byte	'DONE',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'RFS',0
	.word	30695
	.byte	4,2,35,8,0,14
	.word	31882
	.byte	31
	.byte	'Ifx_SRC_FFT',0,17,192,1,3
	.word	31942
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,17,195,1,25,32,13
	.byte	'SR0',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	30695
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	30695
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	13343
	.byte	16,2,35,16,0,14
	.word	31968
	.byte	31
	.byte	'Ifx_SRC_GPSR',0,17,202,1,3
	.word	32062
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,17,205,1,25,48,13
	.byte	'CIRQ',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	30695
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	30695
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	30695
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	30695
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	3661
	.byte	24,2,35,24,0,14
	.word	32089
	.byte	31
	.byte	'Ifx_SRC_GPT12',0,17,214,1,3
	.word	32206
	.byte	15,12
	.word	30695
	.byte	16,2,0,15,32
	.word	30695
	.byte	16,7,0,15,32
	.word	32243
	.byte	16,0,0,15,88
	.word	604
	.byte	16,87,0,15,108
	.word	30695
	.byte	16,26,0,15,96
	.word	604
	.byte	16,95,0,15,96
	.word	32243
	.byte	16,2,0,15,160,3
	.word	604
	.byte	16,159,3,0,15,64
	.word	32243
	.byte	16,1,0,15,192,3
	.word	604
	.byte	16,191,3,0,15,16
	.word	30695
	.byte	16,3,0,15,64
	.word	32328
	.byte	16,3,0,15,192,2
	.word	604
	.byte	16,191,2,0,15,52
	.word	604
	.byte	16,51,0,10
	.byte	'_Ifx_SRC_GTM',0,17,217,1,25,204,18,13
	.byte	'AEIIRQ',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'ARUIRQ',0
	.word	32234
	.byte	12,2,35,4,13
	.byte	'reserved_10',0
	.word	2471
	.byte	4,2,35,16,13
	.byte	'BRCIRQ',0
	.word	30695
	.byte	4,2,35,20,13
	.byte	'CMPIRQ',0
	.word	30695
	.byte	4,2,35,24,13
	.byte	'SPEIRQ',0
	.word	31129
	.byte	8,2,35,28,13
	.byte	'reserved_24',0
	.word	4290
	.byte	8,2,35,36,13
	.byte	'PSM',0
	.word	32252
	.byte	32,2,35,44,13
	.byte	'reserved_4C',0
	.word	32261
	.byte	88,2,35,76,13
	.byte	'DPLL',0
	.word	32270
	.byte	108,3,35,164,1,13
	.byte	'reserved_110',0
	.word	32279
	.byte	96,3,35,144,2,13
	.byte	'ERR',0
	.word	30695
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	4630
	.byte	12,3,35,244,2,13
	.byte	'TIM',0
	.word	32288
	.byte	96,3,35,128,3,13
	.byte	'reserved_1E0',0
	.word	32297
	.byte	160,3,3,35,224,3,13
	.byte	'MCS',0
	.word	32288
	.byte	96,3,35,128,7,13
	.byte	'reserved_3E0',0
	.word	32297
	.byte	160,3,3,35,224,7,13
	.byte	'TOM',0
	.word	32308
	.byte	64,3,35,128,11,13
	.byte	'reserved_5C0',0
	.word	32317
	.byte	192,3,3,35,192,11,13
	.byte	'ATOM',0
	.word	32337
	.byte	64,3,35,128,15,13
	.byte	'reserved_7C0',0
	.word	32346
	.byte	192,2,3,35,192,15,13
	.byte	'MCSW0',0
	.word	32234
	.byte	12,3,35,128,18,13
	.byte	'reserved_90C',0
	.word	32357
	.byte	52,3,35,140,18,13
	.byte	'MCSW1',0
	.word	32234
	.byte	12,3,35,192,18,0,14
	.word	32366
	.byte	31
	.byte	'Ifx_SRC_GTM',0,17,243,1,3
	.word	32826
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,17,246,1,25,4,13
	.byte	'SR',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	32852
	.byte	31
	.byte	'Ifx_SRC_HSCT',0,17,249,1,3
	.word	32885
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,17,252,1,25,16,13
	.byte	'COK',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	30695
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	30695
	.byte	4,2,35,12,0,14
	.word	32912
	.byte	31
	.byte	'Ifx_SRC_HSSL',0,17,130,2,3
	.word	32985
	.byte	15,56
	.word	604
	.byte	16,55,0,10
	.byte	'_Ifx_SRC_I2C',0,17,133,2,25,80,13
	.byte	'BREQ',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'LBREQ',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'SREQ',0
	.word	30695
	.byte	4,2,35,8,13
	.byte	'LSREQ',0
	.word	30695
	.byte	4,2,35,12,13
	.byte	'ERR',0
	.word	30695
	.byte	4,2,35,16,13
	.byte	'P',0
	.word	30695
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	33012
	.byte	56,2,35,24,0,14
	.word	33021
	.byte	31
	.byte	'Ifx_SRC_I2C',0,17,142,2,3
	.word	33144
	.byte	10
	.byte	'_Ifx_SRC_LMU',0,17,145,2,25,4,13
	.byte	'SR',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	33170
	.byte	31
	.byte	'Ifx_SRC_LMU',0,17,148,2,3
	.word	33202
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,17,151,2,25,20,13
	.byte	'SR0',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	30695
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	30695
	.byte	4,2,35,12,13
	.byte	'SR4',0
	.word	30695
	.byte	4,2,35,16,0,14
	.word	33228
	.byte	31
	.byte	'Ifx_SRC_MSC',0,17,158,2,3
	.word	33313
	.byte	10
	.byte	'_Ifx_SRC_PMU',0,17,161,2,25,4,13
	.byte	'SR',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	33339
	.byte	31
	.byte	'Ifx_SRC_PMU',0,17,164,2,3
	.word	33371
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,17,167,2,25,32,13
	.byte	'SR',0
	.word	32243
	.byte	32,2,35,0,0,14
	.word	33397
	.byte	31
	.byte	'Ifx_SRC_PSI5',0,17,170,2,3
	.word	33430
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,17,173,2,25,32,13
	.byte	'SR',0
	.word	32243
	.byte	32,2,35,0,0,14
	.word	33457
	.byte	31
	.byte	'Ifx_SRC_PSI5S',0,17,176,2,3
	.word	33491
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,17,179,2,25,24,13
	.byte	'TX',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	30695
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	30695
	.byte	4,2,35,12,13
	.byte	'HC',0
	.word	30695
	.byte	4,2,35,16,13
	.byte	'U',0
	.word	30695
	.byte	4,2,35,20,0,14
	.word	33519
	.byte	31
	.byte	'Ifx_SRC_QSPI',0,17,187,2,3
	.word	33612
	.byte	10
	.byte	'_Ifx_SRC_SCR',0,17,190,2,25,4,13
	.byte	'SR',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	33639
	.byte	31
	.byte	'Ifx_SRC_SCR',0,17,193,2,3
	.word	33671
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,17,196,2,25,20,13
	.byte	'DTS',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'ERU',0
	.word	32328
	.byte	16,2,35,4,0,14
	.word	33697
	.byte	31
	.byte	'Ifx_SRC_SCU',0,17,200,2,3
	.word	33743
	.byte	15,24
	.word	30695
	.byte	16,5,0,10
	.byte	'_Ifx_SRC_SENT',0,17,203,2,25,24,13
	.byte	'SR',0
	.word	33769
	.byte	24,2,35,0,0,14
	.word	33778
	.byte	31
	.byte	'Ifx_SRC_SENT',0,17,206,2,3
	.word	33811
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,17,209,2,25,12,13
	.byte	'SR',0
	.word	32234
	.byte	12,2,35,0,0,14
	.word	33838
	.byte	31
	.byte	'Ifx_SRC_SMU',0,17,212,2,3
	.word	33870
	.byte	10
	.byte	'_Ifx_SRC_STM',0,17,215,2,25,8,13
	.byte	'SR0',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	30695
	.byte	4,2,35,4,0,14
	.word	33896
	.byte	31
	.byte	'Ifx_SRC_STM',0,17,219,2,3
	.word	33942
	.byte	10
	.byte	'_Ifx_SRC_VADCCG',0,17,222,2,25,16,13
	.byte	'SR0',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	30695
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	30695
	.byte	4,2,35,12,0,14
	.word	33968
	.byte	31
	.byte	'Ifx_SRC_VADCCG',0,17,228,2,3
	.word	34043
	.byte	10
	.byte	'_Ifx_SRC_VADCG',0,17,231,2,25,16,13
	.byte	'SR0',0
	.word	30695
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	30695
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	30695
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	30695
	.byte	4,2,35,12,0,14
	.word	34072
	.byte	31
	.byte	'Ifx_SRC_VADCG',0,17,237,2,3
	.word	34146
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,17,240,2,25,4,13
	.byte	'SRC',0
	.word	30695
	.byte	4,2,35,0,0,14
	.word	34174
	.byte	31
	.byte	'Ifx_SRC_XBAR',0,17,243,2,3
	.word	34208
	.byte	15,4
	.word	30755
	.byte	16,0,0,14
	.word	34235
	.byte	10
	.byte	'_Ifx_SRC_GAGBT',0,17,128,3,25,4,13
	.byte	'AGBT',0
	.word	34244
	.byte	4,2,35,0,0,14
	.word	34249
	.byte	31
	.byte	'Ifx_SRC_GAGBT',0,17,131,3,3
	.word	34285
	.byte	15,48
	.word	30813
	.byte	16,3,0,14
	.word	34313
	.byte	10
	.byte	'_Ifx_SRC_GASCLIN',0,17,134,3,25,48,13
	.byte	'ASCLIN',0
	.word	34322
	.byte	48,2,35,0,0,14
	.word	34327
	.byte	31
	.byte	'Ifx_SRC_GASCLIN',0,17,137,3,3
	.word	34367
	.byte	14
	.word	30900
	.byte	10
	.byte	'_Ifx_SRC_GBCU',0,17,140,3,25,4,13
	.byte	'SPB',0
	.word	34397
	.byte	4,2,35,0,0,14
	.word	34402
	.byte	31
	.byte	'Ifx_SRC_GBCU',0,17,143,3,3
	.word	34436
	.byte	15,64
	.word	30974
	.byte	16,0,0,14
	.word	34463
	.byte	10
	.byte	'_Ifx_SRC_GCAN',0,17,146,3,25,64,13
	.byte	'CAN',0
	.word	34472
	.byte	64,2,35,0,0,14
	.word	34477
	.byte	31
	.byte	'Ifx_SRC_GCAN',0,17,149,3,3
	.word	34511
	.byte	15,32
	.word	31031
	.byte	16,1,0,14
	.word	34538
	.byte	10
	.byte	'_Ifx_SRC_GCCU6',0,17,152,3,25,32,13
	.byte	'CCU6',0
	.word	34547
	.byte	32,2,35,0,0,14
	.word	34552
	.byte	31
	.byte	'Ifx_SRC_GCCU6',0,17,155,3,3
	.word	34588
	.byte	14
	.word	31138
	.byte	10
	.byte	'_Ifx_SRC_GCERBERUS',0,17,158,3,25,8,13
	.byte	'CERBERUS',0
	.word	34616
	.byte	8,2,35,0,0,14
	.word	34621
	.byte	31
	.byte	'Ifx_SRC_GCERBERUS',0,17,161,3,3
	.word	34665
	.byte	15,16
	.word	31204
	.byte	16,0,0,14
	.word	34697
	.byte	10
	.byte	'_Ifx_SRC_GCIF',0,17,164,3,25,16,13
	.byte	'CIF',0
	.word	34706
	.byte	16,2,35,0,0,14
	.word	34711
	.byte	31
	.byte	'Ifx_SRC_GCIF',0,17,167,3,3
	.word	34745
	.byte	15,8
	.word	31303
	.byte	16,1,0,14
	.word	34772
	.byte	10
	.byte	'_Ifx_SRC_GCPU',0,17,170,3,25,8,13
	.byte	'CPU',0
	.word	34781
	.byte	8,2,35,0,0,14
	.word	34786
	.byte	31
	.byte	'Ifx_SRC_GCPU',0,17,173,3,3
	.word	34820
	.byte	15,208,1
	.word	31374
	.byte	16,0,0,14
	.word	34847
	.byte	10
	.byte	'_Ifx_SRC_GDMA',0,17,176,3,25,208,1,13
	.byte	'DMA',0
	.word	34857
	.byte	208,1,2,35,0,0,14
	.word	34862
	.byte	31
	.byte	'Ifx_SRC_GDMA',0,17,179,3,3
	.word	34898
	.byte	14
	.word	31467
	.byte	14
	.word	31467
	.byte	14
	.word	31467
	.byte	10
	.byte	'_Ifx_SRC_GDSADC',0,17,182,3,25,32,13
	.byte	'DSADC0',0
	.word	34925
	.byte	8,2,35,0,13
	.byte	'reserved_8',0
	.word	4290
	.byte	8,2,35,8,13
	.byte	'DSADC2',0
	.word	34930
	.byte	8,2,35,16,13
	.byte	'DSADC3',0
	.word	34935
	.byte	8,2,35,24,0,14
	.word	34940
	.byte	31
	.byte	'Ifx_SRC_GDSADC',0,17,188,3,3
	.word	35031
	.byte	15,4
	.word	31543
	.byte	16,0,0,14
	.word	35060
	.byte	10
	.byte	'_Ifx_SRC_GEMEM',0,17,191,3,25,4,13
	.byte	'EMEM',0
	.word	35069
	.byte	4,2,35,0,0,14
	.word	35074
	.byte	31
	.byte	'Ifx_SRC_GEMEM',0,17,194,3,3
	.word	35110
	.byte	15,80
	.word	31612
	.byte	16,0,0,14
	.word	35138
	.byte	10
	.byte	'_Ifx_SRC_GERAY',0,17,197,3,25,80,13
	.byte	'ERAY',0
	.word	35147
	.byte	80,2,35,0,0,14
	.word	35152
	.byte	31
	.byte	'Ifx_SRC_GERAY',0,17,200,3,3
	.word	35188
	.byte	15,4
	.word	31766
	.byte	16,0,0,14
	.word	35216
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,17,203,3,25,4,13
	.byte	'ETH',0
	.word	35225
	.byte	4,2,35,0,0,14
	.word	35230
	.byte	31
	.byte	'Ifx_SRC_GETH',0,17,206,3,3
	.word	35264
	.byte	15,4
	.word	31824
	.byte	16,0,0,14
	.word	35291
	.byte	10
	.byte	'_Ifx_SRC_GFCE',0,17,209,3,25,4,13
	.byte	'FCE',0
	.word	35300
	.byte	4,2,35,0,0,14
	.word	35305
	.byte	31
	.byte	'Ifx_SRC_GFCE',0,17,212,3,3
	.word	35339
	.byte	15,12
	.word	31882
	.byte	16,0,0,14
	.word	35366
	.byte	10
	.byte	'_Ifx_SRC_GFFT',0,17,215,3,25,12,13
	.byte	'FFT',0
	.word	35375
	.byte	12,2,35,0,0,14
	.word	35380
	.byte	31
	.byte	'Ifx_SRC_GFFT',0,17,218,3,3
	.word	35414
	.byte	15,64
	.word	31968
	.byte	16,1,0,14
	.word	35441
	.byte	10
	.byte	'_Ifx_SRC_GGPSR',0,17,221,3,25,64,13
	.byte	'GPSR',0
	.word	35450
	.byte	64,2,35,0,0,14
	.word	35455
	.byte	31
	.byte	'Ifx_SRC_GGPSR',0,17,224,3,3
	.word	35491
	.byte	15,48
	.word	32089
	.byte	16,0,0,14
	.word	35519
	.byte	10
	.byte	'_Ifx_SRC_GGPT12',0,17,227,3,25,48,13
	.byte	'GPT12',0
	.word	35528
	.byte	48,2,35,0,0,14
	.word	35533
	.byte	31
	.byte	'Ifx_SRC_GGPT12',0,17,230,3,3
	.word	35571
	.byte	15,204,18
	.word	32366
	.byte	16,0,0,14
	.word	35600
	.byte	10
	.byte	'_Ifx_SRC_GGTM',0,17,233,3,25,204,18,13
	.byte	'GTM',0
	.word	35610
	.byte	204,18,2,35,0,0,14
	.word	35615
	.byte	31
	.byte	'Ifx_SRC_GGTM',0,17,236,3,3
	.word	35651
	.byte	15,4
	.word	32852
	.byte	16,0,0,14
	.word	35678
	.byte	10
	.byte	'_Ifx_SRC_GHSCT',0,17,239,3,25,4,13
	.byte	'HSCT',0
	.word	35687
	.byte	4,2,35,0,0,14
	.word	35692
	.byte	31
	.byte	'Ifx_SRC_GHSCT',0,17,242,3,3
	.word	35728
	.byte	15,64
	.word	32912
	.byte	16,3,0,14
	.word	35756
	.byte	10
	.byte	'_Ifx_SRC_GHSSL',0,17,245,3,25,68,13
	.byte	'HSSL',0
	.word	35765
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	30695
	.byte	4,2,35,64,0,14
	.word	35770
	.byte	31
	.byte	'Ifx_SRC_GHSSL',0,17,249,3,3
	.word	35819
	.byte	15,80
	.word	33021
	.byte	16,0,0,14
	.word	35847
	.byte	10
	.byte	'_Ifx_SRC_GI2C',0,17,252,3,25,80,13
	.byte	'I2C',0
	.word	35856
	.byte	80,2,35,0,0,14
	.word	35861
	.byte	31
	.byte	'Ifx_SRC_GI2C',0,17,255,3,3
	.word	35895
	.byte	15,4
	.word	33170
	.byte	16,0,0,14
	.word	35922
	.byte	10
	.byte	'_Ifx_SRC_GLMU',0,17,130,4,25,4,13
	.byte	'LMU',0
	.word	35931
	.byte	4,2,35,0,0,14
	.word	35936
	.byte	31
	.byte	'Ifx_SRC_GLMU',0,17,133,4,3
	.word	35970
	.byte	15,40
	.word	33228
	.byte	16,1,0,14
	.word	35997
	.byte	10
	.byte	'_Ifx_SRC_GMSC',0,17,136,4,25,40,13
	.byte	'MSC',0
	.word	36006
	.byte	40,2,35,0,0,14
	.word	36011
	.byte	31
	.byte	'Ifx_SRC_GMSC',0,17,139,4,3
	.word	36045
	.byte	15,8
	.word	33339
	.byte	16,1,0,14
	.word	36072
	.byte	10
	.byte	'_Ifx_SRC_GPMU',0,17,142,4,25,8,13
	.byte	'PMU',0
	.word	36081
	.byte	8,2,35,0,0,14
	.word	36086
	.byte	31
	.byte	'Ifx_SRC_GPMU',0,17,145,4,3
	.word	36120
	.byte	15,32
	.word	33397
	.byte	16,0,0,14
	.word	36147
	.byte	10
	.byte	'_Ifx_SRC_GPSI5',0,17,148,4,25,32,13
	.byte	'PSI5',0
	.word	36156
	.byte	32,2,35,0,0,14
	.word	36161
	.byte	31
	.byte	'Ifx_SRC_GPSI5',0,17,151,4,3
	.word	36197
	.byte	15,32
	.word	33457
	.byte	16,0,0,14
	.word	36225
	.byte	10
	.byte	'_Ifx_SRC_GPSI5S',0,17,154,4,25,32,13
	.byte	'PSI5S',0
	.word	36234
	.byte	32,2,35,0,0,14
	.word	36239
	.byte	31
	.byte	'Ifx_SRC_GPSI5S',0,17,157,4,3
	.word	36277
	.byte	15,96
	.word	33519
	.byte	16,3,0,14
	.word	36306
	.byte	10
	.byte	'_Ifx_SRC_GQSPI',0,17,160,4,25,96,13
	.byte	'QSPI',0
	.word	36315
	.byte	96,2,35,0,0,14
	.word	36320
	.byte	31
	.byte	'Ifx_SRC_GQSPI',0,17,163,4,3
	.word	36356
	.byte	15,4
	.word	33639
	.byte	16,0,0,14
	.word	36384
	.byte	10
	.byte	'_Ifx_SRC_GSCR',0,17,166,4,25,4,13
	.byte	'SCR',0
	.word	36393
	.byte	4,2,35,0,0,14
	.word	36398
	.byte	31
	.byte	'Ifx_SRC_GSCR',0,17,169,4,3
	.word	36432
	.byte	14
	.word	33697
	.byte	10
	.byte	'_Ifx_SRC_GSCU',0,17,172,4,25,20,13
	.byte	'SCU',0
	.word	36459
	.byte	20,2,35,0,0,14
	.word	36464
	.byte	31
	.byte	'Ifx_SRC_GSCU',0,17,175,4,3
	.word	36498
	.byte	15,24
	.word	33778
	.byte	16,0,0,14
	.word	36525
	.byte	10
	.byte	'_Ifx_SRC_GSENT',0,17,178,4,25,24,13
	.byte	'SENT',0
	.word	36534
	.byte	24,2,35,0,0,14
	.word	36539
	.byte	31
	.byte	'Ifx_SRC_GSENT',0,17,181,4,3
	.word	36575
	.byte	15,12
	.word	33838
	.byte	16,0,0,14
	.word	36603
	.byte	10
	.byte	'_Ifx_SRC_GSMU',0,17,184,4,25,12,13
	.byte	'SMU',0
	.word	36612
	.byte	12,2,35,0,0,14
	.word	36617
	.byte	31
	.byte	'Ifx_SRC_GSMU',0,17,187,4,3
	.word	36651
	.byte	15,16
	.word	33896
	.byte	16,1,0,14
	.word	36678
	.byte	10
	.byte	'_Ifx_SRC_GSTM',0,17,190,4,25,16,13
	.byte	'STM',0
	.word	36687
	.byte	16,2,35,0,0,14
	.word	36692
	.byte	31
	.byte	'Ifx_SRC_GSTM',0,17,193,4,3
	.word	36726
	.byte	15,64
	.word	34072
	.byte	16,3,0,14
	.word	36753
	.byte	15,224,1
	.word	604
	.byte	16,223,1,0,15,32
	.word	33968
	.byte	16,1,0,14
	.word	36778
	.byte	10
	.byte	'_Ifx_SRC_GVADC',0,17,196,4,25,192,2,13
	.byte	'G',0
	.word	36762
	.byte	64,2,35,0,13
	.byte	'reserved_40',0
	.word	36767
	.byte	224,1,2,35,64,13
	.byte	'CG',0
	.word	36787
	.byte	32,3,35,160,2,0,14
	.word	36792
	.byte	31
	.byte	'Ifx_SRC_GVADC',0,17,201,4,3
	.word	36861
	.byte	14
	.word	34174
	.byte	10
	.byte	'_Ifx_SRC_GXBAR',0,17,204,4,25,4,13
	.byte	'XBAR',0
	.word	36889
	.byte	4,2,35,0,0,14
	.word	36894
	.byte	31
	.byte	'Ifx_SRC_GXBAR',0,17,207,4,3
	.word	36930
	.byte	10
	.byte	'_Ifx_SCU_ACCEN0_Bits',0,4,45,16,4,11
	.byte	'EN0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_ACCEN0_Bits',0,4,79,3
	.word	36958
	.byte	10
	.byte	'_Ifx_SCU_ACCEN1_Bits',0,4,82,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN1_Bits',0,4,85,3
	.word	37515
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,88,16,4,11
	.byte	'STM0DIS',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	429
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,94,3
	.word	37592
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,97,16,4,11
	.byte	'BAUD1DIV',0,1
	.word	604
	.byte	4,4,2,35,0,11
	.byte	'BAUD2DIV',0,1
	.word	604
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	604
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	604
	.byte	4,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	604
	.byte	4,4,2,35,2,11
	.byte	'FSI2DIV',0,1
	.word	604
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	604
	.byte	2,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	604
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	604
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	604
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,111,3
	.word	37728
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,114,16,4,11
	.byte	'CANDIV',0,1
	.word	604
	.byte	4,4,2,35,0,11
	.byte	'ERAYDIV',0,1
	.word	604
	.byte	4,0,2,35,0,11
	.byte	'STMDIV',0,1
	.word	604
	.byte	4,4,2,35,1,11
	.byte	'GTMDIV',0,1
	.word	604
	.byte	4,0,2,35,1,11
	.byte	'ETHDIV',0,1
	.word	604
	.byte	4,4,2,35,2,11
	.byte	'ASCLINFDIV',0,1
	.word	604
	.byte	4,0,2,35,2,11
	.byte	'ASCLINSDIV',0,1
	.word	604
	.byte	4,4,2,35,3,11
	.byte	'INSEL',0,1
	.word	604
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,126,3
	.word	38008
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,129,1,16,4,11
	.byte	'BBBDIV',0,1
	.word	604
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,135,1,3
	.word	38246
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,138,1,16,4,11
	.byte	'PLLDIV',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'PLLSEL',0,1
	.word	604
	.byte	2,0,2,35,0,11
	.byte	'PLLERAYDIV',0,1
	.word	604
	.byte	6,2,2,35,1,11
	.byte	'PLLERAYSEL',0,1
	.word	604
	.byte	2,0,2,35,1,11
	.byte	'SRIDIV',0,1
	.word	604
	.byte	6,2,2,35,2,11
	.byte	'SRISEL',0,1
	.word	604
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,150,1,3
	.word	38374
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,153,1,16,4,11
	.byte	'SPBDIV',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'SPBSEL',0,1
	.word	604
	.byte	2,0,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	604
	.byte	6,2,2,35,1,11
	.byte	'GTMSEL',0,1
	.word	604
	.byte	2,0,2,35,1,11
	.byte	'STMDIV',0,1
	.word	604
	.byte	6,2,2,35,2,11
	.byte	'STMSEL',0,1
	.word	604
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	5,3,2,35,3,11
	.byte	'SLCK',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'UP',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,165,1,3
	.word	38617
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,168,1,16,4,11
	.byte	'MAXDIV',0,1
	.word	604
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	26,2,2,35,0,11
	.byte	'UP',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,174,1,3
	.word	38852
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,177,1,16,4,11
	.byte	'CPU0DIV',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	429
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,181,1,3
	.word	38980
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,184,1,16,4,11
	.byte	'CPU1DIV',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	429
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,188,1,3
	.word	39080
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,191,1,16,4,11
	.byte	'CHREV',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	604
	.byte	2,0,2,35,0,11
	.byte	'CHID',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'EEA',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	604
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	604
	.byte	4,4,2,35,3,11
	.byte	'SP',0,1
	.word	604
	.byte	2,2,2,35,3,11
	.byte	'SEC',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,202,1,3
	.word	39180
	.byte	10
	.byte	'_Ifx_SCU_DTSCON_Bits',0,4,205,1,16,4,11
	.byte	'PWD',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'START',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	2,4,2,35,0,11
	.byte	'CAL',0,4
	.word	429
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'SLCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_DTSCON_Bits',0,4,213,1,3
	.word	39388
	.byte	10
	.byte	'_Ifx_SCU_DTSLIM_Bits',0,4,216,1,16,4,11
	.byte	'LOWER',0,2
	.word	621
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	604
	.byte	5,1,2,35,1,11
	.byte	'LLU',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	621
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	604
	.byte	4,2,2,35,3,11
	.byte	'SLCK',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_DTSLIM_Bits',0,4,225,1,3
	.word	39553
	.byte	10
	.byte	'_Ifx_SCU_DTSSTAT_Bits',0,4,228,1,16,4,11
	.byte	'RESULT',0,2
	.word	621
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	604
	.byte	4,2,2,35,1,11
	.byte	'RDY',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'BUSY',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_DTSSTAT_Bits',0,4,235,1,3
	.word	39736
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,238,1,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	604
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	604
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	429
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	604
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	604
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EICR_Bits',0,4,129,2,3
	.word	39890
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,132,2,16,4,11
	.byte	'INTF0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	429
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_EIFR_Bits',0,4,143,2,3
	.word	40254
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,146,2,16,4,11
	.byte	'POL',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	621
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	604
	.byte	6,0,2,35,2,11
	.byte	'EMSFM',0,1
	.word	604
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	604
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	604
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_EMSR_Bits',0,4,159,2,3
	.word	40465
	.byte	10
	.byte	'_Ifx_SCU_ESRCFG_Bits',0,4,162,2,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	621
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	429
	.byte	23,0,2,35,0,0,31
	.byte	'Ifx_SCU_ESRCFG_Bits',0,4,167,2,3
	.word	40717
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,170,2,16,4,11
	.byte	'ARI',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	429
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,175,2,3
	.word	40835
	.byte	10
	.byte	'_Ifx_SCU_EVR13CON_Bits',0,4,178,2,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	28,4,2,35,0,11
	.byte	'EVR13OFF',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'BPEVR13OFF',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVR13CON_Bits',0,4,185,2,3
	.word	40946
	.byte	10
	.byte	'_Ifx_SCU_EVR33CON_Bits',0,4,188,2,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	28,4,2,35,0,11
	.byte	'EVR33OFF',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'BPEVR33OFF',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVR33CON_Bits',0,4,195,2,3
	.word	41109
	.byte	10
	.byte	'_Ifx_SCU_EVRADCSTAT_Bits',0,4,198,2,16,4,11
	.byte	'ADC13V',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'ADC33V',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'ADCSWDV',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRADCSTAT_Bits',0,4,205,2,3
	.word	41272
	.byte	10
	.byte	'_Ifx_SCU_EVRDVSTAT_Bits',0,4,208,2,16,4,11
	.byte	'DVS13TRIM',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'DVS33TRIM',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'VAL',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRDVSTAT_Bits',0,4,215,2,3
	.word	41430
	.byte	10
	.byte	'_Ifx_SCU_EVRMONCTRL_Bits',0,4,218,2,16,4,11
	.byte	'EVR13OVMOD',0,1
	.word	604
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	2,4,2,35,0,11
	.byte	'EVR13UVMOD',0,1
	.word	604
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	604
	.byte	2,0,2,35,0,11
	.byte	'EVR33OVMOD',0,1
	.word	604
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	604
	.byte	2,4,2,35,1,11
	.byte	'EVR33UVMOD',0,1
	.word	604
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	604
	.byte	2,0,2,35,1,11
	.byte	'SWDOVMOD',0,1
	.word	604
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	604
	.byte	2,4,2,35,2,11
	.byte	'SWDUVMOD',0,1
	.word	604
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	621
	.byte	10,0,2,35,2,0,31
	.byte	'Ifx_SCU_EVRMONCTRL_Bits',0,4,232,2,3
	.word	41595
	.byte	10
	.byte	'_Ifx_SCU_EVROSCCTRL_Bits',0,4,235,2,16,4,11
	.byte	'OSCTRIM',0,2
	.word	621
	.byte	10,6,2,35,0,11
	.byte	'OSCPTAT',0,1
	.word	604
	.byte	6,0,2,35,1,11
	.byte	'OSCANASEL',0,1
	.word	604
	.byte	4,4,2,35,2,11
	.byte	'HPBGTRIM',0,2
	.word	621
	.byte	7,5,2,35,2,11
	.byte	'HPBGCLKEN',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'OSC3V3',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	604
	.byte	2,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVROSCCTRL_Bits',0,4,245,2,3
	.word	41924
	.byte	10
	.byte	'_Ifx_SCU_EVROVMON_Bits',0,4,248,2,16,4,11
	.byte	'EVR13OVVAL',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'EVR33OVVAL',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'SWDOVVAL',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVROVMON_Bits',0,4,255,2,3
	.word	42145
	.byte	10
	.byte	'_Ifx_SCU_EVRRSTCON_Bits',0,4,130,3,16,4,11
	.byte	'RST13TRIM',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	429
	.byte	16,8,2,35,0,11
	.byte	'RST13OFF',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'BPRST13OFF',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'RST33OFF',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'BPRST33OFF',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'RSTSWDOFF',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'BPRSTSWDOFF',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRRSTCON_Bits',0,4,142,3,3
	.word	42308
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF1_Bits',0,4,145,3,16,4,11
	.byte	'SD5P',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'SD5I',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'SD5D',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF1_Bits',0,4,152,3,3
	.word	42580
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF2_Bits',0,4,155,3,16,4,11
	.byte	'SD33P',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'SD33I',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'SD33D',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF2_Bits',0,4,162,3,3
	.word	42733
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF3_Bits',0,4,165,3,16,4,11
	.byte	'CT5REG0',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'CT5REG1',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'CT5REG2',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF3_Bits',0,4,172,3,3
	.word	42889
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF4_Bits',0,4,175,3,16,4,11
	.byte	'CT5REG3',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'CT5REG4',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF4_Bits',0,4,181,3,3
	.word	43051
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF5_Bits',0,4,184,3,16,4,11
	.byte	'CT33REG0',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'CT33REG1',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'CT33REG2',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF5_Bits',0,4,191,3,3
	.word	43194
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCOEFF6_Bits',0,4,194,3,16,4,11
	.byte	'CT33REG3',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'CT33REG4',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF6_Bits',0,4,200,3,3
	.word	43359
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL1_Bits',0,4,203,3,16,4,11
	.byte	'SDFREQSPRD',0,2
	.word	621
	.byte	16,0,2,35,0,11
	.byte	'SDFREQ',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'SDSTEP',0,1
	.word	604
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	604
	.byte	2,2,2,35,3,11
	.byte	'SDSAMPLE',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCTRL1_Bits',0,4,211,3,3
	.word	43504
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL2_Bits',0,4,214,3,16,4,11
	.byte	'DRVP',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'SDMINMAXDC',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'DRVN',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'SDLUT',0,1
	.word	604
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCTRL2_Bits',0,4,222,3,3
	.word	43685
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL3_Bits',0,4,225,3,16,4,11
	.byte	'SDPWMPRE',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'SDPID',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'SDVOKLVL',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCTRL3_Bits',0,4,232,3,3
	.word	43859
	.byte	10
	.byte	'_Ifx_SCU_EVRSDCTRL4_Bits',0,4,235,3,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'SYNCDIV',0,1
	.word	604
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	429
	.byte	20,1,2,35,0,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRSDCTRL4_Bits',0,4,241,3,3
	.word	44019
	.byte	10
	.byte	'_Ifx_SCU_EVRSTAT_Bits',0,4,244,3,16,4,11
	.byte	'EVR13',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'OV13',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'EVR33',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'OV33',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'OVSWD',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'UV13',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'UV33',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'UVSWD',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'EXTPASS13',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'EXTPASS33',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'BGPROK',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	429
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSTAT_Bits',0,4,130,4,3
	.word	44163
	.byte	10
	.byte	'_Ifx_SCU_EVRTRIM_Bits',0,4,133,4,16,4,11
	.byte	'EVR13TRIM',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'SDVOUTSEL',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRTRIM_Bits',0,4,139,4,3
	.word	44437
	.byte	10
	.byte	'_Ifx_SCU_EVRUVMON_Bits',0,4,142,4,16,4,11
	.byte	'EVR13UVVAL',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'EVR33UVVAL',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'SWDUVVAL',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_EVRUVMON_Bits',0,4,149,4,3
	.word	44576
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,152,4,16,4,11
	.byte	'EN0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	604
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	621
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	604
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	604
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	604
	.byte	8,0,2,35,3,0,31
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,163,4,3
	.word	44739
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,166,4,16,4,11
	.byte	'STEP',0,2
	.word	621
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	604
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	604
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	621
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	604
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_FDR_Bits',0,4,174,4,3
	.word	44957
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,177,4,16,4,11
	.byte	'FS0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	8,0,2,35,3,0,31
	.byte	'Ifx_SCU_FMR_Bits',0,4,197,4,3
	.word	45120
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,200,4,16,4,11
	.byte	'MODREV',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_ID_Bits',0,4,205,4,3
	.word	45456
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,208,4,16,4,11
	.byte	'IPEN00',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	604
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	604
	.byte	2,0,2,35,3,0,31
	.byte	'Ifx_SCU_IGCR_Bits',0,4,232,4,3
	.word	45563
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,235,4,16,4,11
	.byte	'P0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	429
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_IN_Bits',0,4,240,4,3
	.word	46015
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,243,4,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	604
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	604
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_IOCR_Bits',0,4,250,4,3
	.word	46114
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,253,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'LBISTREQP',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,2
	.word	621
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,131,5,3
	.word	46264
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,134,5,16,4,11
	.byte	'SEED',0,4
	.word	429
	.byte	23,9,2,35,0,11
	.byte	'reserved_23',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	604
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	604
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,141,5,3
	.word	46413
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,144,5,16,4,11
	.byte	'SIGNATURE',0,4
	.word	429
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	7,1,2,35,3,11
	.byte	'LBISTDONE',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,149,5,3
	.word	46574
	.byte	10
	.byte	'_Ifx_SCU_LCLCON_Bits',0,4,152,5,16,4,11
	.byte	'reserved_0',0,2
	.word	621
	.byte	16,0,2,35,0,11
	.byte	'LS',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	621
	.byte	14,1,2,35,2,11
	.byte	'LSEN',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_LCLCON_Bits',0,4,158,5,3
	.word	46704
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,161,5,16,4,11
	.byte	'LCLT0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	429
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,166,5,3
	.word	46836
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,169,5,16,4,11
	.byte	'DEPT',0,1
	.word	604
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	621
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_MANID_Bits',0,4,174,5,3
	.word	46951
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,177,5,16,4,11
	.byte	'PS0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	621
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	621
	.byte	14,0,2,35,2,0,31
	.byte	'Ifx_SCU_OMR_Bits',0,4,185,5,3
	.word	47062
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,188,5,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	604
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	604
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'X1D',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'X1DEN',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	604
	.byte	4,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	604
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	604
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	604
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,209,5,3
	.word	47220
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,212,5,16,4,11
	.byte	'P0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	429
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_OUT_Bits',0,4,217,5,3
	.word	47632
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,220,5,16,4,11
	.byte	'CSEL0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	621
	.byte	13,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	604
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	604
	.byte	6,0,2,35,3,0,31
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,233,5,3
	.word	47733
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,236,5,16,4,11
	.byte	'OVEN0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	429
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,242,5,3
	.word	48000
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,245,5,16,4,11
	.byte	'PDIS0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	429
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_PDISC_Bits',0,4,250,5,3
	.word	48136
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,253,5,16,4,11
	.byte	'PD0',0,1
	.word	604
	.byte	3,5,2,35,0,11
	.byte	'PL0',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'PD1',0,1
	.word	604
	.byte	3,1,2,35,0,11
	.byte	'PL1',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	429
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_PDR_Bits',0,4,132,6,3
	.word	48247
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,135,6,16,4,11
	.byte	'PDR0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	429
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_PDRR_Bits',0,4,146,6,3
	.word	48380
	.byte	10
	.byte	'_Ifx_SCU_PLLCON0_Bits',0,4,149,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	621
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	604
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	604
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	604
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	604
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_PLLCON0_Bits',0,4,166,6,3
	.word	48583
	.byte	10
	.byte	'_Ifx_SCU_PLLCON1_Bits',0,4,169,6,16,4,11
	.byte	'K2DIV',0,1
	.word	604
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	604
	.byte	7,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	604
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	621
	.byte	9,0,2,35,2,0,31
	.byte	'Ifx_SCU_PLLCON1_Bits',0,4,177,6,3
	.word	48939
	.byte	10
	.byte	'_Ifx_SCU_PLLCON2_Bits',0,4,180,6,16,4,11
	.byte	'MODCFG',0,2
	.word	621
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_PLLCON2_Bits',0,4,184,6,3
	.word	49117
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON0_Bits',0,4,187,6,16,4,11
	.byte	'VCOBYP',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'VCOPWD',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	2,4,2,35,0,11
	.byte	'SETFINDIS',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'CLRFINDIS',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'OSCDISCDIS',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	621
	.byte	2,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	604
	.byte	5,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	604
	.byte	2,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	604
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	604
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	604
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_PLLERAYCON0_Bits',0,4,204,6,3
	.word	49217
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYCON1_Bits',0,4,207,6,16,4,11
	.byte	'K2DIV',0,1
	.word	604
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	604
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	604
	.byte	4,0,2,35,1,11
	.byte	'K1DIV',0,1
	.word	604
	.byte	7,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	621
	.byte	9,0,2,35,2,0,31
	.byte	'Ifx_SCU_PLLERAYCON1_Bits',0,4,215,6,3
	.word	49587
	.byte	10
	.byte	'_Ifx_SCU_PLLERAYSTAT_Bits',0,4,218,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	429
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_SCU_PLLERAYSTAT_Bits',0,4,227,6,3
	.word	49773
	.byte	10
	.byte	'_Ifx_SCU_PLLSTAT_Bits',0,4,230,6,16,4,11
	.byte	'VCOBYST',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'VCOLOCK',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'FINDIS',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'K1RDY',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	429
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_SCU_PLLSTAT_Bits',0,4,241,6,3
	.word	49971
	.byte	10
	.byte	'_Ifx_SCU_PMCSR_Bits',0,4,244,6,16,4,11
	.byte	'REQSLP',0,1
	.word	604
	.byte	2,6,2,35,0,11
	.byte	'SMUSLP',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	604
	.byte	5,0,2,35,0,11
	.byte	'PMST',0,1
	.word	604
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	429
	.byte	21,0,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR_Bits',0,4,251,6,3
	.word	50204
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR0_Bits',0,4,254,6,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'ESR1WKEN',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'PINAWKEN',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'PINBWKEN',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'ESR0DFEN',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'ESR0EDCON',0,1
	.word	604
	.byte	2,1,2,35,0,11
	.byte	'ESR1DFEN',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'ESR1EDCON',0,1
	.word	604
	.byte	2,6,2,35,1,11
	.byte	'PINADFEN',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'PINAEDCON',0,1
	.word	604
	.byte	2,3,2,35,1,11
	.byte	'PINBDFEN',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'PINBEDCON',0,1
	.word	604
	.byte	2,0,2,35,1,11
	.byte	'SCREN',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'STBYRAMSEL',0,1
	.word	604
	.byte	2,5,2,35,2,11
	.byte	'SCRCLKSEL',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'TRISTEN',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'TRISTREQ',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'PORSTDF',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'DCDCSYNC',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	604
	.byte	3,3,2,35,3,11
	.byte	'ESR0TRIST',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMSWCR0_Bits',0,4,153,7,3
	.word	50356
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,156,7,16,4,11
	.byte	'SCRSTEN',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'SCRSTREQ',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	6,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	604
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	604
	.byte	3,0,2,35,1,11
	.byte	'SCRCFG',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'CPUSEL',0,1
	.word	604
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	604
	.byte	3,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,170,7,3
	.word	50923
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR2_Bits',0,4,173,7,16,4,11
	.byte	'SCRINT',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'BUSY',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'SCRECC',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'SCRWDT',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'SCRRST',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	604
	.byte	4,0,2,35,1,11
	.byte	'TCINT',0,1
	.word	604
	.byte	8,0,2,35,2,11
	.byte	'TCINTREQ',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'SMURST',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'RST',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	604
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMSWCR2_Bits',0,4,187,7,3
	.word	51217
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTAT_Bits',0,4,190,7,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKP',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUN',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'PINAWKP',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUN',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'PINBWKP',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUN',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'PORSTDF',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'HWCFGEVR',0,1
	.word	604
	.byte	3,3,2,35,1,11
	.byte	'STBYRAM',0,1
	.word	604
	.byte	2,1,2,35,1,11
	.byte	'TRIST',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'SCRST',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'SCRWKP',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'SCR',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'SCRWKEN',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'ESR1WKEN',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'PINAWKEN',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'PINBWKEN',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	621
	.byte	4,5,2,35,2,11
	.byte	'ESR0TRIST',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	604
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_SCU_PMSWSTAT_Bits',0,4,214,7,3
	.word	51495
	.byte	10
	.byte	'_Ifx_SCU_PMSWSTATCLR_Bits',0,4,217,7,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	2,6,2,35,0,11
	.byte	'ESR1WKPCLR',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'ESR1OVRUNCLR',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'PINAWKPCLR',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'PINAOVRUNCLR',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'PINBWKPCLR',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PINBOVRUNCLR',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'SCRSTCLR',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'SCRWKPCLR',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	621
	.byte	14,0,2,35,2,0,31
	.byte	'Ifx_SCU_PMSWSTATCLR_Bits',0,4,230,7,3
	.word	51991
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,233,7,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	621
	.byte	10,4,2,35,0,11
	.byte	'CSS0',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'CSS1',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'CSS2',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,243,7,3
	.word	52304
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,246,7,16,4,11
	.byte	'ESR0',0,1
	.word	604
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	604
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	604
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	604
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	604
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	604
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	604
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	604
	.byte	2,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,129,8,3
	.word	52513
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,132,8,16,4,11
	.byte	'ESR0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'PORST',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	604
	.byte	2,1,2,35,2,11
	.byte	'EVR13',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	604
	.byte	2,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	604
	.byte	3,0,2,35,3,0,31
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,155,8,3
	.word	52724
	.byte	10
	.byte	'_Ifx_SCU_SAFECON_Bits',0,4,158,8,16,4,11
	.byte	'HBT',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	429
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_SCU_SAFECON_Bits',0,4,162,8,3
	.word	53156
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,165,8,16,4,11
	.byte	'HWCFG',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	604
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	604
	.byte	3,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	604
	.byte	7,0,2,35,3,0,31
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,178,8,3
	.word	53252
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	429
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,186,8,3
	.word	53512
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,189,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	604
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	604
	.byte	3,0,2,35,0,11
	.byte	'DATM',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	429
	.byte	23,0,2,35,0,0,31
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,198,8,3
	.word	53637
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,201,8,16,4,11
	.byte	'ESR0T',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,208,8,3
	.word	53834
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS_Bits',0,4,211,8,16,4,11
	.byte	'ESR0T',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPDIS_Bits',0,4,218,8,3
	.word	53987
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,221,8,16,4,11
	.byte	'ESR0T',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,228,8,3
	.word	54140
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,231,8,16,4,11
	.byte	'ESR0T',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,238,8,3
	.word	54293
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,247,8,3
	.word	468
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,134,9,3
	.word	643
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,150,9,3
	.word	887
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,153,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	452
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	452
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	452
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	452
	.byte	16,0,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,159,9,3
	.word	54548
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,162,9,16,4,11
	.byte	'CLRIRF',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	604
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,175,9,3
	.word	54674
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,178,9,16,4,11
	.byte	'AE',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	604
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,191,9,3
	.word	54926
	.byte	12,4,199,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36958
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN0',0,4,204,9,3
	.word	55145
	.byte	12,4,207,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37515
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ACCEN1',0,4,212,9,3
	.word	55209
	.byte	12,4,215,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37592
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ARSTDIS',0,4,220,9,3
	.word	55273
	.byte	12,4,223,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37728
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON0',0,4,228,9,3
	.word	55338
	.byte	12,4,231,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38008
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON1',0,4,236,9,3
	.word	55403
	.byte	12,4,239,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38246
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON2',0,4,244,9,3
	.word	55468
	.byte	12,4,247,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38374
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON3',0,4,252,9,3
	.word	55533
	.byte	12,4,255,9,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38617
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON4',0,4,132,10,3
	.word	55598
	.byte	12,4,135,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38852
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON5',0,4,140,10,3
	.word	55663
	.byte	12,4,143,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38980
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON6',0,4,148,10,3
	.word	55728
	.byte	12,4,151,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39080
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CCUCON7',0,4,156,10,3
	.word	55793
	.byte	12,4,159,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39180
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_CHIPID',0,4,164,10,3
	.word	55858
	.byte	12,4,167,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39388
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_DTSCON',0,4,172,10,3
	.word	55922
	.byte	12,4,175,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39553
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_DTSLIM',0,4,180,10,3
	.word	55986
	.byte	12,4,183,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39736
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_DTSSTAT',0,4,188,10,3
	.word	56050
	.byte	12,4,191,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39890
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EICR',0,4,196,10,3
	.word	56115
	.byte	12,4,199,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40254
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EIFR',0,4,204,10,3
	.word	56177
	.byte	12,4,207,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40465
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EMSR',0,4,212,10,3
	.word	56239
	.byte	12,4,215,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40717
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ESRCFG',0,4,220,10,3
	.word	56301
	.byte	12,4,223,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40835
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ESROCFG',0,4,228,10,3
	.word	56365
	.byte	12,4,231,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40946
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVR13CON',0,4,236,10,3
	.word	56430
	.byte	12,4,239,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41109
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVR33CON',0,4,244,10,3
	.word	56496
	.byte	12,4,247,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41272
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRADCSTAT',0,4,252,10,3
	.word	56562
	.byte	12,4,255,10,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41430
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRDVSTAT',0,4,132,11,3
	.word	56630
	.byte	12,4,135,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41595
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRMONCTRL',0,4,140,11,3
	.word	56697
	.byte	12,4,143,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41924
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVROSCCTRL',0,4,148,11,3
	.word	56765
	.byte	12,4,151,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42145
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVROVMON',0,4,156,11,3
	.word	56833
	.byte	12,4,159,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42308
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRRSTCON',0,4,164,11,3
	.word	56899
	.byte	12,4,167,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42580
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF1',0,4,172,11,3
	.word	56966
	.byte	12,4,175,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42733
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF2',0,4,180,11,3
	.word	57035
	.byte	12,4,183,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	42889
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF3',0,4,188,11,3
	.word	57104
	.byte	12,4,191,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43051
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF4',0,4,196,11,3
	.word	57173
	.byte	12,4,199,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43194
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF5',0,4,204,11,3
	.word	57242
	.byte	12,4,207,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43359
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCOEFF6',0,4,212,11,3
	.word	57311
	.byte	12,4,215,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43504
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCTRL1',0,4,220,11,3
	.word	57380
	.byte	12,4,223,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43685
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCTRL2',0,4,228,11,3
	.word	57448
	.byte	12,4,231,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	43859
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCTRL3',0,4,236,11,3
	.word	57516
	.byte	12,4,239,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44019
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSDCTRL4',0,4,244,11,3
	.word	57584
	.byte	12,4,247,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44163
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRSTAT',0,4,252,11,3
	.word	57652
	.byte	12,4,255,11,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44437
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRTRIM',0,4,132,12,3
	.word	57717
	.byte	12,4,135,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44576
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EVRUVMON',0,4,140,12,3
	.word	57782
	.byte	12,4,143,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44739
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_EXTCON',0,4,148,12,3
	.word	57848
	.byte	12,4,151,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	44957
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_FDR',0,4,156,12,3
	.word	57912
	.byte	12,4,159,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45120
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_FMR',0,4,164,12,3
	.word	57973
	.byte	12,4,167,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45456
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_ID',0,4,172,12,3
	.word	58034
	.byte	12,4,175,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	45563
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_IGCR',0,4,180,12,3
	.word	58094
	.byte	12,4,183,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46015
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_IN',0,4,188,12,3
	.word	58156
	.byte	12,4,191,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46114
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_IOCR',0,4,196,12,3
	.word	58216
	.byte	12,4,199,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46264
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,204,12,3
	.word	58278
	.byte	12,4,207,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46413
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,212,12,3
	.word	58346
	.byte	12,4,215,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46574
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,220,12,3
	.word	58414
	.byte	12,4,223,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46704
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LCLCON',0,4,228,12,3
	.word	58482
	.byte	12,4,231,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46836
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_LCLTEST',0,4,236,12,3
	.word	58546
	.byte	12,4,239,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	46951
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_MANID',0,4,244,12,3
	.word	58611
	.byte	12,4,247,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47062
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OMR',0,4,252,12,3
	.word	58674
	.byte	12,4,255,12,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47220
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OSCCON',0,4,132,13,3
	.word	58735
	.byte	12,4,135,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47632
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OUT',0,4,140,13,3
	.word	58799
	.byte	12,4,143,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	47733
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OVCCON',0,4,148,13,3
	.word	58860
	.byte	12,4,151,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48000
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_OVCENABLE',0,4,156,13,3
	.word	58924
	.byte	12,4,159,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48136
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PDISC',0,4,164,13,3
	.word	58991
	.byte	12,4,167,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48247
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PDR',0,4,172,13,3
	.word	59054
	.byte	12,4,175,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48380
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PDRR',0,4,180,13,3
	.word	59115
	.byte	12,4,183,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48583
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLCON0',0,4,188,13,3
	.word	59177
	.byte	12,4,191,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	48939
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLCON1',0,4,196,13,3
	.word	59242
	.byte	12,4,199,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49117
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLCON2',0,4,204,13,3
	.word	59307
	.byte	12,4,207,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49217
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLERAYCON0',0,4,212,13,3
	.word	59372
	.byte	12,4,215,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49587
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLERAYCON1',0,4,220,13,3
	.word	59441
	.byte	12,4,223,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49773
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLERAYSTAT',0,4,228,13,3
	.word	59510
	.byte	12,4,231,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	49971
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PLLSTAT',0,4,236,13,3
	.word	59579
	.byte	12,4,239,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50204
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMCSR',0,4,244,13,3
	.word	59644
	.byte	12,4,247,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50356
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWCR0',0,4,252,13,3
	.word	59707
	.byte	12,4,255,13,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	50923
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWCR1',0,4,132,14,3
	.word	59772
	.byte	12,4,135,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51217
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWCR2',0,4,140,14,3
	.word	59837
	.byte	12,4,143,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51495
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWSTAT',0,4,148,14,3
	.word	59902
	.byte	12,4,151,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	51991
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_PMSWSTATCLR',0,4,156,14,3
	.word	59968
	.byte	12,4,159,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52513
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_RSTCON',0,4,164,14,3
	.word	60037
	.byte	12,4,167,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52304
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_RSTCON2',0,4,172,14,3
	.word	60101
	.byte	12,4,175,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	52724
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_RSTSTAT',0,4,180,14,3
	.word	60166
	.byte	12,4,183,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53156
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SAFECON',0,4,188,14,3
	.word	60231
	.byte	12,4,191,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53252
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_STSTAT',0,4,196,14,3
	.word	60296
	.byte	12,4,199,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53512
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SWRSTCON',0,4,204,14,3
	.word	60360
	.byte	12,4,207,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53637
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_SYSCON',0,4,212,14,3
	.word	60426
	.byte	12,4,215,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53834
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPCLR',0,4,220,14,3
	.word	60490
	.byte	12,4,223,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	53987
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPDIS',0,4,228,14,3
	.word	60555
	.byte	12,4,231,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54140
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSET',0,4,236,14,3
	.word	60620
	.byte	12,4,239,14,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54293
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_TRAPSTAT',0,4,244,14,3
	.word	60685
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,252,14,3
	.word	564
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,132,15,3
	.word	847
	.byte	31
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,140,15,3
	.word	1078
	.byte	12,4,143,15,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54548
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_CON0',0,4,148,15,3
	.word	60836
	.byte	12,4,151,15,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54674
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_CON1',0,4,156,15,3
	.word	60903
	.byte	12,4,159,15,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	54926
	.byte	4,2,35,0,0,31
	.byte	'Ifx_SCU_WDTS_SR',0,4,164,15,3
	.word	60970
	.byte	14
	.word	1118
	.byte	31
	.byte	'Ifx_SCU_WDTCPU',0,4,180,15,3
	.word	61035
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,183,15,25,12,13
	.byte	'CON0',0
	.word	60836
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	60903
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	60970
	.byte	4,2,35,8,0,14
	.word	61064
	.byte	31
	.byte	'Ifx_SCU_WDTS',0,4,188,15,3
	.word	61125
	.byte	15,8
	.word	56301
	.byte	16,1,0,15,20
	.word	604
	.byte	16,19,0,15,8
	.word	59644
	.byte	16,1,0,14
	.word	61064
	.byte	15,24
	.word	1118
	.byte	16,1,0,14
	.word	61184
	.byte	15,16
	.word	56115
	.byte	16,3,0,15,16
	.word	58094
	.byte	16,3,0,15,180,3
	.word	604
	.byte	16,179,3,0,10
	.byte	'_Ifx_SCU',0,4,201,15,25,128,8,13
	.byte	'reserved_0',0
	.word	4290
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	58034
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2471
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	58735
	.byte	4,2,35,16,13
	.byte	'PLLSTAT',0
	.word	59579
	.byte	4,2,35,20,13
	.byte	'PLLCON0',0
	.word	59177
	.byte	4,2,35,24,13
	.byte	'PLLCON1',0
	.word	59242
	.byte	4,2,35,28,13
	.byte	'PLLCON2',0
	.word	59307
	.byte	4,2,35,32,13
	.byte	'PLLERAYSTAT',0
	.word	59510
	.byte	4,2,35,36,13
	.byte	'PLLERAYCON0',0
	.word	59372
	.byte	4,2,35,40,13
	.byte	'PLLERAYCON1',0
	.word	59441
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	55338
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	55403
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	57912
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	57848
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	55468
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	55533
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	55598
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	55663
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	60166
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2471
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	60037
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	55273
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	60360
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	60101
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	2471
	.byte	4,2,35,104,13
	.byte	'EVRRSTCON',0
	.word	56899
	.byte	4,2,35,108,13
	.byte	'ESRCFG',0
	.word	61152
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	56365
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	60426
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	55728
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	55793
	.byte	4,3,35,132,1,13
	.byte	'reserved_88',0
	.word	61161
	.byte	20,3,35,136,1,13
	.byte	'PDR',0
	.word	59054
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	58216
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	58799
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	58674
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	58156
	.byte	4,3,35,172,1,13
	.byte	'EVRSTAT',0
	.word	57652
	.byte	4,3,35,176,1,13
	.byte	'EVRDVSTAT',0
	.word	56630
	.byte	4,3,35,180,1,13
	.byte	'EVR13CON',0
	.word	56430
	.byte	4,3,35,184,1,13
	.byte	'EVR33CON',0
	.word	56496
	.byte	4,3,35,188,1,13
	.byte	'STSTAT',0
	.word	60296
	.byte	4,3,35,192,1,13
	.byte	'reserved_C4',0
	.word	2471
	.byte	4,3,35,196,1,13
	.byte	'PMSWCR0',0
	.word	59707
	.byte	4,3,35,200,1,13
	.byte	'PMSWSTAT',0
	.word	59902
	.byte	4,3,35,204,1,13
	.byte	'PMSWSTATCLR',0
	.word	59968
	.byte	4,3,35,208,1,13
	.byte	'PMCSR',0
	.word	61170
	.byte	8,3,35,212,1,13
	.byte	'reserved_DC',0
	.word	2471
	.byte	4,3,35,220,1,13
	.byte	'DTSSTAT',0
	.word	56050
	.byte	4,3,35,224,1,13
	.byte	'DTSCON',0
	.word	55922
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	59772
	.byte	4,3,35,232,1,13
	.byte	'PMSWCR2',0
	.word	59837
	.byte	4,3,35,236,1,13
	.byte	'WDTS',0
	.word	61179
	.byte	12,3,35,240,1,13
	.byte	'EMSR',0
	.word	56239
	.byte	4,3,35,252,1,13
	.byte	'WDTCPU',0
	.word	61193
	.byte	24,3,35,128,2,13
	.byte	'reserved_118',0
	.word	4630
	.byte	12,3,35,152,2,13
	.byte	'TRAPSTAT',0
	.word	60685
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	60620
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	60490
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS',0
	.word	60555
	.byte	4,3,35,176,2,13
	.byte	'reserved_134',0
	.word	2471
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	58482
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	58546
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	55858
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	58611
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	4290
	.byte	8,3,35,200,2,13
	.byte	'SAFECON',0
	.word	60231
	.byte	4,3,35,208,2,13
	.byte	'reserved_154',0
	.word	13343
	.byte	16,3,35,212,2,13
	.byte	'LBISTCTRL0',0
	.word	58278
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	58346
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	58414
	.byte	4,3,35,236,2,13
	.byte	'reserved_170',0
	.word	28410
	.byte	28,3,35,240,2,13
	.byte	'PDISC',0
	.word	58991
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4290
	.byte	8,3,35,144,3,13
	.byte	'EVRTRIM',0
	.word	57717
	.byte	4,3,35,152,3,13
	.byte	'EVRADCSTAT',0
	.word	56562
	.byte	4,3,35,156,3,13
	.byte	'EVRUVMON',0
	.word	57782
	.byte	4,3,35,160,3,13
	.byte	'EVROVMON',0
	.word	56833
	.byte	4,3,35,164,3,13
	.byte	'EVRMONCTRL',0
	.word	56697
	.byte	4,3,35,168,3,13
	.byte	'reserved_1AC',0
	.word	2471
	.byte	4,3,35,172,3,13
	.byte	'EVRSDCTRL1',0
	.word	57380
	.byte	4,3,35,176,3,13
	.byte	'EVRSDCTRL2',0
	.word	57448
	.byte	4,3,35,180,3,13
	.byte	'EVRSDCTRL3',0
	.word	57516
	.byte	4,3,35,184,3,13
	.byte	'EVRSDCTRL4',0
	.word	57584
	.byte	4,3,35,188,3,13
	.byte	'EVRSDCOEFF1',0
	.word	56966
	.byte	4,3,35,192,3,13
	.byte	'EVRSDCOEFF2',0
	.word	57035
	.byte	4,3,35,196,3,13
	.byte	'EVRSDCOEFF3',0
	.word	57104
	.byte	4,3,35,200,3,13
	.byte	'EVRSDCOEFF4',0
	.word	57173
	.byte	4,3,35,204,3,13
	.byte	'EVRSDCOEFF5',0
	.word	57242
	.byte	4,3,35,208,3,13
	.byte	'EVRSDCOEFF6',0
	.word	57311
	.byte	4,3,35,212,3,13
	.byte	'EVROSCCTRL',0
	.word	56765
	.byte	4,3,35,216,3,13
	.byte	'reserved_1DC',0
	.word	2471
	.byte	4,3,35,220,3,13
	.byte	'OVCENABLE',0
	.word	58924
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	58860
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	31603
	.byte	40,3,35,232,3,13
	.byte	'EICR',0
	.word	61198
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	56177
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	57973
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	59115
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	61207
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	2471
	.byte	4,3,35,188,4,13
	.byte	'DTSLIM',0
	.word	55986
	.byte	4,3,35,192,4,13
	.byte	'reserved_244',0
	.word	61216
	.byte	180,3,3,35,196,4,13
	.byte	'ACCEN1',0
	.word	55209
	.byte	4,3,35,248,7,13
	.byte	'ACCEN0',0
	.word	55145
	.byte	4,3,35,252,7,0,14
	.word	61227
	.byte	31
	.byte	'Ifx_SCU',0,4,181,16,3
	.word	63217
	.byte	10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,18,45,16,4,11
	.byte	'EN0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_STM_ACCEN0_Bits',0,18,79,3
	.word	63239
	.byte	10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,18,82,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_ACCEN1_Bits',0,18,85,3
	.word	63796
	.byte	10
	.byte	'_Ifx_STM_CAP_Bits',0,18,88,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_CAP_Bits',0,18,91,3
	.word	63873
	.byte	10
	.byte	'_Ifx_STM_CAPSV_Bits',0,18,94,16,4,11
	.byte	'STMCAP63_32',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_CAPSV_Bits',0,18,97,3
	.word	63945
	.byte	10
	.byte	'_Ifx_STM_CLC_Bits',0,18,100,16,4,11
	.byte	'DISR',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_STM_CLC_Bits',0,18,107,3
	.word	64021
	.byte	10
	.byte	'_Ifx_STM_CMCON_Bits',0,18,110,16,4,11
	.byte	'MSIZE0',0,1
	.word	604
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	604
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	604
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	604
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	604
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	604
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	604
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	604
	.byte	3,0,2,35,3,0,31
	.byte	'Ifx_STM_CMCON_Bits',0,18,120,3
	.word	64162
	.byte	10
	.byte	'_Ifx_STM_CMP_Bits',0,18,123,16,4,11
	.byte	'CMPVAL',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_CMP_Bits',0,18,126,3
	.word	64380
	.byte	10
	.byte	'_Ifx_STM_ICR_Bits',0,18,129,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	429
	.byte	25,0,2,35,0,0,31
	.byte	'Ifx_STM_ICR_Bits',0,18,139,1,3
	.word	64447
	.byte	10
	.byte	'_Ifx_STM_ID_Bits',0,18,142,1,16,4,11
	.byte	'MODREV',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_STM_ID_Bits',0,18,147,1,3
	.word	64650
	.byte	10
	.byte	'_Ifx_STM_ISCR_Bits',0,18,150,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_STM_ISCR_Bits',0,18,157,1,3
	.word	64757
	.byte	10
	.byte	'_Ifx_STM_KRST0_Bits',0,18,160,1,16,4,11
	.byte	'RST',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	429
	.byte	30,0,2,35,0,0,31
	.byte	'Ifx_STM_KRST0_Bits',0,18,165,1,3
	.word	64908
	.byte	10
	.byte	'_Ifx_STM_KRST1_Bits',0,18,168,1,16,4,11
	.byte	'RST',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	429
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_STM_KRST1_Bits',0,18,172,1,3
	.word	65019
	.byte	10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,18,175,1,16,4,11
	.byte	'CLR',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	429
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_STM_KRSTCLR_Bits',0,18,179,1,3
	.word	65111
	.byte	10
	.byte	'_Ifx_STM_OCS_Bits',0,18,182,1,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	24,8,2,35,0,11
	.byte	'SUS',0,1
	.word	604
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	604
	.byte	2,0,2,35,3,0,31
	.byte	'Ifx_STM_OCS_Bits',0,18,189,1,3
	.word	65207
	.byte	10
	.byte	'_Ifx_STM_TIM0_Bits',0,18,192,1,16,4,11
	.byte	'STM31_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM0_Bits',0,18,195,1,3
	.word	65353
	.byte	10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,18,198,1,16,4,11
	.byte	'STM31_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM0SV_Bits',0,18,201,1,3
	.word	65425
	.byte	10
	.byte	'_Ifx_STM_TIM1_Bits',0,18,204,1,16,4,11
	.byte	'STM35_4',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM1_Bits',0,18,207,1,3
	.word	65501
	.byte	10
	.byte	'_Ifx_STM_TIM2_Bits',0,18,210,1,16,4,11
	.byte	'STM39_8',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM2_Bits',0,18,213,1,3
	.word	65573
	.byte	10
	.byte	'_Ifx_STM_TIM3_Bits',0,18,216,1,16,4,11
	.byte	'STM43_12',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM3_Bits',0,18,219,1,3
	.word	65645
	.byte	10
	.byte	'_Ifx_STM_TIM4_Bits',0,18,222,1,16,4,11
	.byte	'STM47_16',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM4_Bits',0,18,225,1,3
	.word	65718
	.byte	10
	.byte	'_Ifx_STM_TIM5_Bits',0,18,228,1,16,4,11
	.byte	'STM51_20',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM5_Bits',0,18,231,1,3
	.word	65791
	.byte	10
	.byte	'_Ifx_STM_TIM6_Bits',0,18,234,1,16,4,11
	.byte	'STM63_32',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_STM_TIM6_Bits',0,18,237,1,3
	.word	65864
	.byte	12,18,245,1,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63239
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ACCEN0',0,18,250,1,3
	.word	65937
	.byte	12,18,253,1,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63796
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ACCEN1',0,18,130,2,3
	.word	66001
	.byte	12,18,133,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63873
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CAP',0,18,138,2,3
	.word	66065
	.byte	12,18,141,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63945
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CAPSV',0,18,146,2,3
	.word	66126
	.byte	12,18,149,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64021
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CLC',0,18,154,2,3
	.word	66189
	.byte	12,18,157,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64162
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CMCON',0,18,162,2,3
	.word	66250
	.byte	12,18,165,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64380
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_CMP',0,18,170,2,3
	.word	66313
	.byte	12,18,173,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64447
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ICR',0,18,178,2,3
	.word	66374
	.byte	12,18,181,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64650
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ID',0,18,186,2,3
	.word	66435
	.byte	12,18,189,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64757
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_ISCR',0,18,194,2,3
	.word	66495
	.byte	12,18,197,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64908
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_KRST0',0,18,202,2,3
	.word	66557
	.byte	12,18,205,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65019
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_KRST1',0,18,210,2,3
	.word	66620
	.byte	12,18,213,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65111
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_KRSTCLR',0,18,218,2,3
	.word	66683
	.byte	12,18,221,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65207
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_OCS',0,18,226,2,3
	.word	66748
	.byte	12,18,229,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65353
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM0',0,18,234,2,3
	.word	66809
	.byte	12,18,237,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65425
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM0SV',0,18,242,2,3
	.word	66871
	.byte	12,18,245,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65501
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM1',0,18,250,2,3
	.word	66935
	.byte	12,18,253,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65573
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM2',0,18,130,3,3
	.word	66997
	.byte	12,18,133,3,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65645
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM3',0,18,138,3,3
	.word	67059
	.byte	12,18,141,3,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65718
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM4',0,18,146,3,3
	.word	67121
	.byte	12,18,149,3,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65791
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM5',0,18,154,3,3
	.word	67183
	.byte	12,18,157,3,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65864
	.byte	4,2,35,0,0,31
	.byte	'Ifx_STM_TIM6',0,18,162,3,3
	.word	67245
	.byte	17,19,240,10,9,1,18
	.byte	'IfxScu_CCUCON0_CLKSEL_fBack',0,0,18
	.byte	'IfxScu_CCUCON0_CLKSEL_fPll',0,1,0,31
	.byte	'IfxScu_CCUCON0_CLKSEL',0,19,244,10,3
	.word	67307
	.byte	17,19,254,10,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,31
	.byte	'IfxScu_WDTCON1_IR',0,19,131,11,3
	.word	67404
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN0_Bits',0,20,45,16,4,11
	.byte	'EN0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_ACCEN0_Bits',0,20,79,3
	.word	67526
	.byte	10
	.byte	'_Ifx_FLASH_ACCEN1_Bits',0,20,82,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_FLASH_ACCEN1_Bits',0,20,85,3
	.word	68087
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_CFG_Bits',0,20,88,16,4,11
	.byte	'SEL',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	604
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	429
	.byte	22,0,2,35,0,0,31
	.byte	'Ifx_FLASH_CBAB_CFG_Bits',0,20,95,3
	.word	68168
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_STAT_Bits',0,20,98,16,4,11
	.byte	'VLD0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'VLD1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'VLD2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'VLD3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'VLD4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'VLD5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'VLD6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'VLD7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'VLD8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'VLD9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	429
	.byte	22,0,2,35,0,0,31
	.byte	'Ifx_FLASH_CBAB_STAT_Bits',0,20,111,3
	.word	68321
	.byte	10
	.byte	'_Ifx_FLASH_CBAB_TOP_Bits',0,20,114,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	429
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	604
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_CBAB_TOP_Bits',0,20,121,3
	.word	68569
	.byte	10
	.byte	'_Ifx_FLASH_COMM0_Bits',0,20,124,16,4,11
	.byte	'STATUS',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	429
	.byte	24,0,2,35,0,0,31
	.byte	'Ifx_FLASH_COMM0_Bits',0,20,128,1,3
	.word	68715
	.byte	10
	.byte	'_Ifx_FLASH_COMM1_Bits',0,20,131,1,16,4,11
	.byte	'STATUS',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_COMM1_Bits',0,20,136,1,3
	.word	68813
	.byte	10
	.byte	'_Ifx_FLASH_COMM2_Bits',0,20,139,1,16,4,11
	.byte	'STATUS',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'DATA',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_COMM2_Bits',0,20,144,1,3
	.word	68929
	.byte	10
	.byte	'_Ifx_FLASH_ECCRD_Bits',0,20,147,1,16,4,11
	.byte	'RCODE',0,4
	.word	429
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	621
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_ECCRD_Bits',0,20,153,1,3
	.word	69045
	.byte	10
	.byte	'_Ifx_FLASH_ECCRP_Bits',0,20,156,1,16,4,11
	.byte	'RCODE',0,4
	.word	429
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	621
	.byte	8,2,2,35,2,11
	.byte	'EDCERRINJ',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'ECCORDIS',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_ECCRP_Bits',0,20,162,1,3
	.word	69185
	.byte	10
	.byte	'_Ifx_FLASH_ECCW_Bits',0,20,165,1,16,4,11
	.byte	'WCODE',0,4
	.word	429
	.byte	22,10,2,35,0,11
	.byte	'reserved_22',0,2
	.word	621
	.byte	8,2,2,35,2,11
	.byte	'DECENCDIS',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'PECENCDIS',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_ECCW_Bits',0,20,171,1,3
	.word	69325
	.byte	10
	.byte	'_Ifx_FLASH_FCON_Bits',0,20,174,1,16,4,11
	.byte	'WSPFLASH',0,1
	.word	604
	.byte	4,4,2,35,0,11
	.byte	'WSECPF',0,1
	.word	604
	.byte	2,2,2,35,0,11
	.byte	'WSDFLASH',0,2
	.word	621
	.byte	6,4,2,35,0,11
	.byte	'WSECDF',0,1
	.word	604
	.byte	3,1,2,35,1,11
	.byte	'IDLE',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'ESLDIS',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'SLEEP',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'NSAFECC',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'STALL',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'RES21',0,1
	.word	604
	.byte	2,2,2,35,2,11
	.byte	'RES23',0,1
	.word	604
	.byte	2,0,2,35,2,11
	.byte	'VOPERM',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'SQERM',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'PROERM',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	604
	.byte	3,2,2,35,3,11
	.byte	'PR5V',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'EOBM',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_FCON_Bits',0,20,193,1,3
	.word	69464
	.byte	10
	.byte	'_Ifx_FLASH_FPRO_Bits',0,20,196,1,16,4,11
	.byte	'PROINP',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'PRODISP',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'PROIND',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'PRODISD',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'PROINHSMCOTP',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'PROINOTP',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'RES7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'PROINDBG',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'PRODISDBG',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'PROINHSM',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	604
	.byte	5,0,2,35,1,11
	.byte	'DCFP',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'DDFP',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'DDFPX',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'DDFD',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'ENPE',0,1
	.word	604
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	8,0,2,35,3,0,31
	.byte	'Ifx_FLASH_FPRO_Bits',0,20,218,1,3
	.word	69826
	.byte	10
	.byte	'_Ifx_FLASH_FSR_Bits',0,20,221,1,16,4,11
	.byte	'FABUSY',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'D0BUSY',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'RES1',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'P0BUSY',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'P1BUSY',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'RES5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'RES6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'PROG',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'ERASE',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'PFPAGE',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'DFPAGE',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'OPER',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'SQER',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'PROER',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'PFSBER',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'PFDBER',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'PFMBER',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'RES17',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'DFSBER',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'DFDBER',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'DFTBER',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'DFMBER',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'SRIADDERR',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	621
	.byte	2,7,2,35,2,11
	.byte	'PVER',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'EVER',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'SPND',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'SLM',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'ORIER',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_FSR_Bits',0,20,254,1,3
	.word	70267
	.byte	10
	.byte	'_Ifx_FLASH_ID_Bits',0,20,129,2,16,4,11
	.byte	'MODREV',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_ID_Bits',0,20,134,2,3
	.word	70873
	.byte	10
	.byte	'_Ifx_FLASH_MARD_Bits',0,20,137,2,16,4,11
	.byte	'HMARGIN',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'SELD0',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'SPND',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'SPNDERR',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	621
	.byte	10,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_MARD_Bits',0,20,147,2,3
	.word	70984
	.byte	10
	.byte	'_Ifx_FLASH_MARP_Bits',0,20,150,2,16,4,11
	.byte	'SELP0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'SELP1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'RES2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'RES3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	621
	.byte	11,1,2,35,0,11
	.byte	'TRAPDIS',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_MARP_Bits',0,20,159,2,3
	.word	71198
	.byte	10
	.byte	'_Ifx_FLASH_PROCOND_Bits',0,20,162,2,16,4,11
	.byte	'L',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'NSAFECC',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'RAMIN',0,1
	.word	604
	.byte	2,4,2,35,0,11
	.byte	'RAMINSEL',0,1
	.word	604
	.byte	4,0,2,35,0,11
	.byte	'OSCCFG',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'MODE',0,1
	.word	604
	.byte	2,5,2,35,1,11
	.byte	'APREN',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'CAP0EN',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'CAP1EN',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'CAP2EN',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'CAP3EN',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'ESR0CNT',0,2
	.word	621
	.byte	12,4,2,35,2,11
	.byte	'RES29',0,1
	.word	604
	.byte	2,2,2,35,3,11
	.byte	'RES30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_PROCOND_Bits',0,20,179,2,3
	.word	71385
	.byte	10
	.byte	'_Ifx_FLASH_PROCONDBG_Bits',0,20,182,2,16,4,11
	.byte	'OCDSDIS',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'EDM',0,1
	.word	604
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONDBG_Bits',0,20,188,2,3
	.word	71709
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSM_Bits',0,20,191,2,16,4,11
	.byte	'HSMDBGDIS',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'DBGIFLCK',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'TSTIFLCK',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'HSMTSTDIS',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'RES15',0,2
	.word	621
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_PROCONHSM_Bits',0,20,199,2,3
	.word	71852
	.byte	10
	.byte	'_Ifx_FLASH_PROCONHSMCOTP_Bits',0,20,202,2,16,4,11
	.byte	'HSMBOOTEN',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'SSWWAIT',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'HSMDX',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'HSM6X',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'HSM16X',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'HSM17X',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'HSMENPINS',0,2
	.word	621
	.byte	2,7,2,35,0,11
	.byte	'HSMENRES',0,1
	.word	604
	.byte	2,5,2,35,1,11
	.byte	'DESTDBG',0,1
	.word	604
	.byte	2,3,2,35,1,11
	.byte	'BLKFLAN',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	604
	.byte	2,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	621
	.byte	14,0,2,35,2,0,31
	.byte	'Ifx_FLASH_PROCONHSMCOTP_Bits',0,20,219,2,3
	.word	72041
	.byte	10
	.byte	'_Ifx_FLASH_PROCONOTP_Bits',0,20,222,2,16,4,11
	.byte	'S0ROM',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'S1ROM',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'S2ROM',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'S3ROM',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'S4ROM',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'S5ROM',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'S6ROM',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'S7ROM',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'S8ROM',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'S9ROM',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'S10ROM',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'S11ROM',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'S12ROM',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'S13ROM',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'S14ROM',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'S15ROM',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'S16ROM',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'S17ROM',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'S18ROM',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'S19ROM',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'S20ROM',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'S21ROM',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'S22ROM',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'S23ROM',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'S24ROM',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'S25ROM',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'S26ROM',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	604
	.byte	2,3,2,35,3,11
	.byte	'BML',0,1
	.word	604
	.byte	2,1,2,35,3,11
	.byte	'TP',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_PROCONOTP_Bits',0,20,254,2,3
	.word	72404
	.byte	10
	.byte	'_Ifx_FLASH_PROCONP_Bits',0,20,129,3,16,4,11
	.byte	'S0L',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'S1L',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'S2L',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'S3L',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'S4L',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'S5L',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'S6L',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'S7L',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'S8L',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'S9L',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'S10L',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'S11L',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'S12L',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'S13L',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'S14L',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'S15L',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'S16L',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'S17L',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'S18L',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'S19L',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'S20L',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'S21L',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'S22L',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'S23L',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'S24L',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'S25L',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'S26L',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	604
	.byte	4,1,2,35,3,11
	.byte	'RPRO',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_PROCONP_Bits',0,20,160,3,3
	.word	72999
	.byte	10
	.byte	'_Ifx_FLASH_PROCONWOP_Bits',0,20,163,3,16,4,11
	.byte	'S0WOP',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'S1WOP',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'S2WOP',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'S3WOP',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'S4WOP',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'S5WOP',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'S6WOP',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'S7WOP',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'S8WOP',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'S9WOP',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'S10WOP',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'S11WOP',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'S12WOP',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'S13WOP',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'S14WOP',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'S15WOP',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'S16WOP',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'S17WOP',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'S18WOP',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'S19WOP',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'S20WOP',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'S21WOP',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'S22WOP',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'S23WOP',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'S24WOP',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'S25WOP',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'S26WOP',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	604
	.byte	4,1,2,35,3,11
	.byte	'DATM',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_PROCONWOP_Bits',0,20,194,3,3
	.word	73523
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG0_Bits',0,20,197,3,16,4,11
	.byte	'TAG',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	429
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG0_Bits',0,20,201,3,3
	.word	74105
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG1_Bits',0,20,204,3,16,4,11
	.byte	'TAG',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	429
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG1_Bits',0,20,208,3,3
	.word	74207
	.byte	10
	.byte	'_Ifx_FLASH_RDB_CFG2_Bits',0,20,211,3,16,4,11
	.byte	'TAG',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	429
	.byte	26,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG2_Bits',0,20,215,3,3
	.word	74309
	.byte	10
	.byte	'_Ifx_FLASH_RRAD_Bits',0,20,218,3,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	3,5,2,35,0,11
	.byte	'ADD',0,4
	.word	429
	.byte	29,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RRAD_Bits',0,20,222,3,3
	.word	74411
	.byte	10
	.byte	'_Ifx_FLASH_RRCT_Bits',0,20,225,3,16,4,11
	.byte	'STRT',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'STP',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'BUSY',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'DONE',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'ERR',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	604
	.byte	3,0,2,35,0,11
	.byte	'EOBM',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	604
	.byte	7,0,2,35,1,11
	.byte	'CNT',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_FLASH_RRCT_Bits',0,20,236,3,3
	.word	74505
	.byte	10
	.byte	'_Ifx_FLASH_RRD0_Bits',0,20,239,3,16,4,11
	.byte	'DATA',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RRD0_Bits',0,20,242,3,3
	.word	74715
	.byte	10
	.byte	'_Ifx_FLASH_RRD1_Bits',0,20,245,3,16,4,11
	.byte	'DATA',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_FLASH_RRD1_Bits',0,20,248,3,3
	.word	74788
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_CFG_Bits',0,20,251,3,16,4,11
	.byte	'SEL',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	604
	.byte	2,0,2,35,0,11
	.byte	'CLR',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'DIS',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	429
	.byte	22,0,2,35,0,0,31
	.byte	'Ifx_FLASH_UBAB_CFG_Bits',0,20,130,4,3
	.word	74861
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_STAT_Bits',0,20,133,4,16,4,11
	.byte	'VLD0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	429
	.byte	31,0,2,35,0,0,31
	.byte	'Ifx_FLASH_UBAB_STAT_Bits',0,20,137,4,3
	.word	75016
	.byte	10
	.byte	'_Ifx_FLASH_UBAB_TOP_Bits',0,20,140,4,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	5,3,2,35,0,11
	.byte	'ADDR',0,4
	.word	429
	.byte	19,8,2,35,0,11
	.byte	'ERR',0,1
	.word	604
	.byte	6,2,2,35,3,11
	.byte	'VLD',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'CLR',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_FLASH_UBAB_TOP_Bits',0,20,147,4,3
	.word	75121
	.byte	12,20,155,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67526
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ACCEN0',0,20,160,4,3
	.word	75269
	.byte	12,20,163,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68087
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ACCEN1',0,20,168,4,3
	.word	75335
	.byte	12,20,171,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68168
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_CBAB_CFG',0,20,176,4,3
	.word	75401
	.byte	12,20,179,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68321
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_CBAB_STAT',0,20,184,4,3
	.word	75469
	.byte	12,20,187,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68569
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_CBAB_TOP',0,20,192,4,3
	.word	75538
	.byte	12,20,195,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68715
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_COMM0',0,20,200,4,3
	.word	75606
	.byte	12,20,203,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68813
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_COMM1',0,20,208,4,3
	.word	75671
	.byte	12,20,211,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68929
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_COMM2',0,20,216,4,3
	.word	75736
	.byte	12,20,219,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69045
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ECCRD',0,20,224,4,3
	.word	75801
	.byte	12,20,227,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69185
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ECCRP',0,20,232,4,3
	.word	75866
	.byte	12,20,235,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69325
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ECCW',0,20,240,4,3
	.word	75931
	.byte	12,20,243,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69464
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_FCON',0,20,248,4,3
	.word	75995
	.byte	12,20,251,4,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69826
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_FPRO',0,20,128,5,3
	.word	76059
	.byte	12,20,131,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70267
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_FSR',0,20,136,5,3
	.word	76123
	.byte	12,20,139,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70873
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_ID',0,20,144,5,3
	.word	76186
	.byte	12,20,147,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70984
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_MARD',0,20,152,5,3
	.word	76248
	.byte	12,20,155,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71198
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_MARP',0,20,160,5,3
	.word	76312
	.byte	12,20,163,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71385
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCOND',0,20,168,5,3
	.word	76376
	.byte	12,20,171,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71709
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONDBG',0,20,176,5,3
	.word	76443
	.byte	12,20,179,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71852
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONHSM',0,20,184,5,3
	.word	76512
	.byte	12,20,187,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72041
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONHSMCOTP',0,20,192,5,3
	.word	76581
	.byte	12,20,195,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72404
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONOTP',0,20,200,5,3
	.word	76654
	.byte	12,20,203,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72999
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONP',0,20,208,5,3
	.word	76723
	.byte	12,20,211,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73523
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_PROCONWOP',0,20,216,5,3
	.word	76790
	.byte	12,20,219,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74105
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG0',0,20,224,5,3
	.word	76859
	.byte	12,20,227,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74207
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG1',0,20,232,5,3
	.word	76927
	.byte	12,20,235,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74309
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RDB_CFG2',0,20,240,5,3
	.word	76995
	.byte	12,20,243,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74411
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RRAD',0,20,248,5,3
	.word	77063
	.byte	12,20,251,5,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74505
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RRCT',0,20,128,6,3
	.word	77127
	.byte	12,20,131,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74715
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RRD0',0,20,136,6,3
	.word	77191
	.byte	12,20,139,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74788
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_RRD1',0,20,144,6,3
	.word	77255
	.byte	12,20,147,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74861
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_UBAB_CFG',0,20,152,6,3
	.word	77319
	.byte	12,20,155,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75016
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_UBAB_STAT',0,20,160,6,3
	.word	77387
	.byte	12,20,163,6,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75121
	.byte	4,2,35,0,0,31
	.byte	'Ifx_FLASH_UBAB_TOP',0,20,168,6,3
	.word	77456
	.byte	10
	.byte	'_Ifx_FLASH_CBAB',0,20,179,6,25,12,13
	.byte	'CFG',0
	.word	75401
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	75469
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	75538
	.byte	4,2,35,8,0,14
	.word	77524
	.byte	31
	.byte	'Ifx_FLASH_CBAB',0,20,184,6,3
	.word	77587
	.byte	10
	.byte	'_Ifx_FLASH_RDB',0,20,187,6,25,12,13
	.byte	'CFG0',0
	.word	76859
	.byte	4,2,35,0,13
	.byte	'CFG1',0
	.word	76927
	.byte	4,2,35,4,13
	.byte	'CFG2',0
	.word	76995
	.byte	4,2,35,8,0,14
	.word	77616
	.byte	31
	.byte	'Ifx_FLASH_RDB',0,20,192,6,3
	.word	77680
	.byte	10
	.byte	'_Ifx_FLASH_UBAB',0,20,195,6,25,12,13
	.byte	'CFG',0
	.word	77319
	.byte	4,2,35,0,13
	.byte	'STAT',0
	.word	77387
	.byte	4,2,35,4,13
	.byte	'TOP',0
	.word	77456
	.byte	4,2,35,8,0,14
	.word	77708
	.byte	31
	.byte	'Ifx_FLASH_UBAB',0,20,200,6,3
	.word	77771
	.byte	31
	.byte	'Ifx_P_ACCEN0_Bits',0,6,79,3
	.word	8043
	.byte	31
	.byte	'Ifx_P_ACCEN1_Bits',0,6,85,3
	.word	7956
	.byte	31
	.byte	'Ifx_P_ESR_Bits',0,6,107,3
	.word	4299
	.byte	31
	.byte	'Ifx_P_ID_Bits',0,6,115,3
	.word	2352
	.byte	31
	.byte	'Ifx_P_IN_Bits',0,6,137,1,3
	.word	3347
	.byte	31
	.byte	'Ifx_P_IOCR0_Bits',0,6,150,1,3
	.word	2480
	.byte	31
	.byte	'Ifx_P_IOCR12_Bits',0,6,163,1,3
	.word	3127
	.byte	31
	.byte	'Ifx_P_IOCR4_Bits',0,6,176,1,3
	.word	2695
	.byte	31
	.byte	'Ifx_P_IOCR8_Bits',0,6,189,1,3
	.word	2910
	.byte	31
	.byte	'Ifx_P_LPCR0_Bits',0,6,197,1,3
	.word	7315
	.byte	31
	.byte	'Ifx_P_LPCR1_Bits',0,6,205,1,3
	.word	7439
	.byte	31
	.byte	'Ifx_P_LPCR1_P21_Bits',0,6,215,1,3
	.word	7523
	.byte	31
	.byte	'Ifx_P_LPCR2_Bits',0,6,229,1,3
	.word	7703
	.byte	31
	.byte	'Ifx_P_OMCR0_Bits',0,6,240,1,3
	.word	5954
	.byte	31
	.byte	'Ifx_P_OMCR12_Bits',0,6,250,1,3
	.word	6478
	.byte	31
	.byte	'Ifx_P_OMCR4_Bits',0,6,133,2,3
	.word	6128
	.byte	31
	.byte	'Ifx_P_OMCR8_Bits',0,6,144,2,3
	.word	6302
	.byte	31
	.byte	'Ifx_P_OMCR_Bits',0,6,166,2,3
	.word	6967
	.byte	31
	.byte	'Ifx_P_OMR_Bits',0,6,203,2,3
	.word	1781
	.byte	31
	.byte	'Ifx_P_OMSR0_Bits',0,6,213,2,3
	.word	5291
	.byte	31
	.byte	'Ifx_P_OMSR12_Bits',0,6,224,2,3
	.word	5779
	.byte	31
	.byte	'Ifx_P_OMSR4_Bits',0,6,235,2,3
	.word	5438
	.byte	31
	.byte	'Ifx_P_OMSR8_Bits',0,6,246,2,3
	.word	5607
	.byte	31
	.byte	'Ifx_P_OMSR_Bits',0,6,140,3,3
	.word	6634
	.byte	31
	.byte	'Ifx_P_OUT_Bits',0,6,162,3,3
	.word	1465
	.byte	31
	.byte	'Ifx_P_PCSR_Bits',0,6,180,3,3
	.word	5005
	.byte	31
	.byte	'Ifx_P_PDISC_Bits',0,6,202,3,3
	.word	4639
	.byte	31
	.byte	'Ifx_P_PDR0_Bits',0,6,223,3,3
	.word	3670
	.byte	31
	.byte	'Ifx_P_PDR1_Bits',0,6,244,3,3
	.word	3974
	.byte	31
	.byte	'Ifx_P_ACCEN0',0,6,129,4,3
	.word	8570
	.byte	31
	.byte	'Ifx_P_ACCEN1',0,6,137,4,3
	.word	8003
	.byte	31
	.byte	'Ifx_P_ESR',0,6,145,4,3
	.word	4590
	.byte	31
	.byte	'Ifx_P_ID',0,6,153,4,3
	.word	2431
	.byte	31
	.byte	'Ifx_P_IN',0,6,161,4,3
	.word	3621
	.byte	31
	.byte	'Ifx_P_IOCR0',0,6,169,4,3
	.word	2655
	.byte	31
	.byte	'Ifx_P_IOCR12',0,6,177,4,3
	.word	3307
	.byte	31
	.byte	'Ifx_P_IOCR4',0,6,185,4,3
	.word	2870
	.byte	31
	.byte	'Ifx_P_IOCR8',0,6,193,4,3
	.word	3087
	.byte	31
	.byte	'Ifx_P_LPCR0',0,6,201,4,3
	.word	7399
	.byte	31
	.byte	'Ifx_P_LPCR1',0,6,210,4,3
	.word	7648
	.byte	31
	.byte	'Ifx_P_LPCR2',0,6,218,4,3
	.word	7907
	.byte	31
	.byte	'Ifx_P_OMCR',0,6,226,4,3
	.word	7275
	.byte	31
	.byte	'Ifx_P_OMCR0',0,6,234,4,3
	.word	6088
	.byte	31
	.byte	'Ifx_P_OMCR12',0,6,242,4,3
	.word	6594
	.byte	31
	.byte	'Ifx_P_OMCR4',0,6,250,4,3
	.word	6262
	.byte	31
	.byte	'Ifx_P_OMCR8',0,6,130,5,3
	.word	6438
	.byte	31
	.byte	'Ifx_P_OMR',0,6,138,5,3
	.word	2312
	.byte	31
	.byte	'Ifx_P_OMSR',0,6,146,5,3
	.word	6927
	.byte	31
	.byte	'Ifx_P_OMSR0',0,6,154,5,3
	.word	5398
	.byte	31
	.byte	'Ifx_P_OMSR12',0,6,162,5,3
	.word	5914
	.byte	31
	.byte	'Ifx_P_OMSR4',0,6,170,5,3
	.word	5567
	.byte	31
	.byte	'Ifx_P_OMSR8',0,6,178,5,3
	.word	5739
	.byte	31
	.byte	'Ifx_P_OUT',0,6,186,5,3
	.word	1741
	.byte	31
	.byte	'Ifx_P_PCSR',0,6,194,5,3
	.word	5251
	.byte	31
	.byte	'Ifx_P_PDISC',0,6,202,5,3
	.word	4965
	.byte	31
	.byte	'Ifx_P_PDR0',0,6,210,5,3
	.word	3934
	.byte	31
	.byte	'Ifx_P_PDR1',0,6,218,5,3
	.word	4250
	.byte	14
	.word	8610
	.byte	31
	.byte	'Ifx_P',0,6,139,6,3
	.word	79118
	.byte	17,5,83,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,31
	.byte	'IfxPort_InputMode',0,5,89,3
	.word	79138
	.byte	17,5,120,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,31
	.byte	'IfxPort_OutputIdx',0,5,130,1,3
	.word	79289
	.byte	17,5,134,1,9,1,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,31
	.byte	'IfxPort_OutputMode',0,5,138,1,3
	.word	79533
	.byte	17,5,144,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_lvdsSpeed1',0,4,18
	.byte	'IfxPort_PadDriver_lvdsSpeed2',0,5,18
	.byte	'IfxPort_PadDriver_lvdsSpeed3',0,6,18
	.byte	'IfxPort_PadDriver_lvdsSpeed4',0,7,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,0,31
	.byte	'IfxPort_PadDriver',0,5,158,1,3
	.word	79631
	.byte	31
	.byte	'IfxPort_State',0,5,178,1,3
	.word	9223
	.byte	30,5,190,1,9,8,13
	.byte	'port',0
	.word	9218
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	604
	.byte	1,2,35,4,0,31
	.byte	'IfxPort_Pin',0,5,194,1,3
	.word	80096
	.byte	31
	.byte	'IfxScuCcu_PllStepsFunctionHook',0,7,148,1,16
	.word	168
	.byte	30,7,212,5,9,8,13
	.byte	'value',0
	.word	9604
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9604
	.byte	4,2,35,4,0,31
	.byte	'IfxScuCcu_CcuconRegConfig',0,7,216,5,3
	.word	80196
	.byte	30,7,221,5,9,8,13
	.byte	'pDivider',0
	.word	604
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	604
	.byte	1,2,35,1,13
	.byte	'k2Initial',0
	.word	604
	.byte	1,2,35,2,13
	.byte	'waitTime',0
	.word	225
	.byte	4,2,35,4,0,31
	.byte	'IfxScuCcu_InitialStepConfig',0,7,227,5,3
	.word	80267
	.byte	30,7,231,5,9,12,13
	.byte	'k2Step',0
	.word	604
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	225
	.byte	4,2,35,2,13
	.byte	'hookFunction',0
	.word	80156
	.byte	4,2,35,8,0,31
	.byte	'IfxScuCcu_PllStepsConfig',0,7,236,5,3
	.word	80384
	.byte	3
	.word	165
	.byte	30,7,244,5,9,48,13
	.byte	'ccucon0',0
	.word	80196
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	80196
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	80196
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	80196
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	80196
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	80196
	.byte	8,2,35,40,0,31
	.byte	'IfxScuCcu_ClockDistributionConfig',0,7,252,5,3
	.word	80486
	.byte	30,7,128,6,9,8,13
	.byte	'value',0
	.word	9604
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9604
	.byte	4,2,35,4,0,31
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,7,132,6,3
	.word	80638
	.byte	3
	.word	80384
	.byte	30,7,137,6,9,16,13
	.byte	'numOfPllDividerSteps',0
	.word	604
	.byte	1,2,35,0,13
	.byte	'pllDividerStep',0
	.word	80714
	.byte	4,2,35,4,13
	.byte	'pllInitialStep',0
	.word	80267
	.byte	8,2,35,8,0,31
	.byte	'IfxScuCcu_SysPllConfig',0,7,142,6,3
	.word	80719
	.byte	17,8,144,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,31
	.byte	'IfxCpu_CounterMode',0,8,148,1,3
	.word	80836
	.byte	30,8,160,1,9,6,13
	.byte	'counter',0
	.word	9604
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	604
	.byte	1,2,35,4,0,31
	.byte	'IfxCpu_Counter',0,8,164,1,3
	.word	80925
	.byte	30,8,172,1,9,32,13
	.byte	'instruction',0
	.word	80925
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	80925
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	80925
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	80925
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	80925
	.byte	6,2,35,24,0,31
	.byte	'IfxCpu_Perf',0,8,179,1,3
	.word	80991
	.byte	10
	.byte	'_Ifx_MTU_ACCEN0_Bits',0,21,45,16,4,11
	.byte	'EN0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_MTU_ACCEN0_Bits',0,21,79,3
	.word	81109
	.byte	10
	.byte	'_Ifx_MTU_ACCEN1_Bits',0,21,82,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_MTU_ACCEN1_Bits',0,21,85,3
	.word	81666
	.byte	10
	.byte	'_Ifx_MTU_CLC_Bits',0,21,88,16,4,11
	.byte	'DISR',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'Resvd',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	429
	.byte	28,0,2,35,0,0,31
	.byte	'Ifx_MTU_CLC_Bits',0,21,95,3
	.word	81743
	.byte	10
	.byte	'_Ifx_MTU_ID_Bits',0,21,98,16,4,11
	.byte	'MODREV',0,1
	.word	604
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	604
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	621
	.byte	16,0,2,35,2,0,31
	.byte	'Ifx_MTU_ID_Bits',0,21,103,3
	.word	81879
	.byte	10
	.byte	'_Ifx_MTU_MEMMAP_Bits',0,21,106,16,4,11
	.byte	'reserved_0',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'CPU2DxMAP',0,1
	.word	604
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'CPU2PxMAP',0,1
	.word	604
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'CPU1DCMAP',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'CPU1DTMAP',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'CPU1PCMAP',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'CPU1PTMAP',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	604
	.byte	3,1,2,35,1,11
	.byte	'CPU0PCMAP',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'CPU0PTMAP',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'CPU0DxMAP',0,1
	.word	604
	.byte	2,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	621
	.byte	12,0,2,35,2,0,31
	.byte	'Ifx_MTU_MEMMAP_Bits',0,21,124,3
	.word	81984
	.byte	10
	.byte	'_Ifx_MTU_MEMSTAT0_Bits',0,21,127,16,4,11
	.byte	'CPU2DSAIU',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'CPU2DTAIU',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'CPU2PSAIU',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'CPU2PTAIU',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'CPU1DSAIU',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'CPU1DTAIU',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'CPU1PSAIU',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'CPU1PTAIU',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	604
	.byte	2,2,2,35,1,11
	.byte	'CPU0DSAIU',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'CPU0PSAIU',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'CPU0PTAIU',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'CPU0DxAIU',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'CPU1DS2AIU',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'CPU2DS2AIU',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'HSMCAIU',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'HSMTAIU',0,1
	.word	604
	.byte	1,7,2,35,3,11
	.byte	'HSMRAIU',0,1
	.word	604
	.byte	1,6,2,35,3,11
	.byte	'FSI0AIU',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'CPU0DS2AIU',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	604
	.byte	4,0,2,35,3,0,31
	.byte	'Ifx_MTU_MEMSTAT0_Bits',0,21,157,1,3
	.word	82385
	.byte	10
	.byte	'_Ifx_MTU_MEMSTAT1_Bits',0,21,160,1,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_MTU_MEMSTAT1_Bits',0,21,163,1,3
	.word	83043
	.byte	10
	.byte	'_Ifx_MTU_MEMSTAT2_Bits',0,21,166,1,16,4,11
	.byte	'reserved_0',0,4
	.word	429
	.byte	32,0,2,35,0,0,31
	.byte	'Ifx_MTU_MEMSTAT2_Bits',0,21,169,1,3
	.word	83126
	.byte	10
	.byte	'_Ifx_MTU_MEMTEST0_Bits',0,21,172,1,16,4,11
	.byte	'CPU2XEN',0,1
	.word	604
	.byte	6,2,2,35,0,11
	.byte	'CPU1DSEN',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'Res',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'CPU1DTEN',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'CPU1PSEN',0,1
	.word	604
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	604
	.byte	1,5,2,35,1,11
	.byte	'CPU1PTEN',0,1
	.word	604
	.byte	1,4,2,35,1,11
	.byte	'LMUEN',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'MMCDSEN',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'CPU0DSEN',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'CPU0PSEN',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'CPU0PTEN',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'CPU0DTEN',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'CPUXDS2EN',0,1
	.word	604
	.byte	2,2,2,35,2,11
	.byte	'ETHEN',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	621
	.byte	3,6,2,35,2,11
	.byte	'FSI0EN',0,1
	.word	604
	.byte	1,5,2,35,3,11
	.byte	'CPU0DS2EN',0,1
	.word	604
	.byte	1,4,2,35,3,11
	.byte	'GTMFEN',0,1
	.word	604
	.byte	1,3,2,35,3,11
	.byte	'GTMM0EN',0,1
	.word	604
	.byte	1,2,2,35,3,11
	.byte	'GTMM1EN',0,1
	.word	604
	.byte	1,1,2,35,3,11
	.byte	'GTM1AEN',0,1
	.word	604
	.byte	1,0,2,35,3,0,31
	.byte	'Ifx_MTU_MEMTEST0_Bits',0,21,198,1,3
	.word	83209
	.byte	10
	.byte	'_Ifx_MTU_MEMTEST1_Bits',0,21,201,1,16,4,11
	.byte	'GTM1BEN',0,1
	.word	604
	.byte	1,7,2,35,0,11
	.byte	'GTM2EN',0,1
	.word	604
	.byte	1,6,2,35,0,11
	.byte	'PSI5EN',0,1
	.word	604
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	604
	.byte	1,4,2,35,0,11
	.byte	'MCAN0EN',0,1
	.word	604
	.byte	1,3,2,35,0,11
	.byte	'MCAN1EN',0,1
	.word	604
	.byte	1,2,2,35,0,11
	.byte	'ERAY0OEN',0,1
	.word	604
	.byte	1,1,2,35,0,11
	.byte	'ERAY0TEN',0,1
	.word	604
	.byte	1,0,2,35,0,11
	.byte	'ERAY0MEN',0,1
	.word	604
	.byte	1,7,2,35,1,11
	.byte	'ERAY1XEN',0,1
	.word	604
	.byte	3,4,2,35,1,11
	.byte	'STBY1EN',0,1
	.word	604
	.byte	1,3,2,35,1,11
	.byte	'MCDSEN',0,1
	.word	604
	.byte	1,2,2,35,1,11
	.byte	'EMEML0EN',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'EMEML1EN',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'EMEML2EN',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'EMEML3EN',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'EMEML4EN',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'EMEML5EN',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'EMEML6EN',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'EMEML7EN',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'EMEMLXEN',0,2
	.word	621
	.byte	8,2,2,35,2,11
	.byte	'EMEMUXEN',0,1
	.word	604
	.byte	2,0,2,35,3,0,31
	.byte	'Ifx_MTU_MEMTEST1_Bits',0,21,225,1,3
	.word	83744
	.byte	10
	.byte	'_Ifx_MTU_MEMTEST2_Bits',0,21,228,1,16,4,11
	.byte	'EMEMUxEN',0,2
	.word	621
	.byte	14,2,2,35,0,11
	.byte	'CIF0EN',0,1
	.word	604
	.byte	1,1,2,35,1,11
	.byte	'DAMEN',0,1
	.word	604
	.byte	1,0,2,35,1,11
	.byte	'CIF1EN',0,1
	.word	604
	.byte	1,7,2,35,2,11
	.byte	'CIF2EN',0,1
	.word	604
	.byte	1,6,2,35,2,11
	.byte	'STBY2EN',0,1
	.word	604
	.byte	1,5,2,35,2,11
	.byte	'DMAEN',0,1
	.word	604
	.byte	1,4,2,35,2,11
	.byte	'XTM0EN',0,1
	.word	604
	.byte	1,3,2,35,2,11
	.byte	'XTM1EN',0,1
	.word	604
	.byte	1,2,2,35,2,11
	.byte	'FFT0EN',0,1
	.word	604
	.byte	1,1,2,35,2,11
	.byte	'FFT1EN',0,1
	.word	604
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	604
	.byte	8,0,2,35,3,0,31
	.byte	'Ifx_MTU_MEMTEST2_Bits',0,21,242,1,3
	.word	84237
	.byte	12,21,250,1,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81109
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_ACCEN0',0,21,255,1,3
	.word	84520
	.byte	12,21,130,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81666
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_ACCEN1',0,21,135,2,3
	.word	84584
	.byte	12,21,138,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81743
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_CLC',0,21,143,2,3
	.word	84648
	.byte	12,21,146,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81879
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_ID',0,21,151,2,3
	.word	84709
	.byte	12,21,154,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	81984
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_MEMMAP',0,21,159,2,3
	.word	84769
	.byte	12,21,162,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	82385
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_MEMSTAT0',0,21,167,2,3
	.word	84833
	.byte	12,21,170,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83043
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_MEMSTAT1',0,21,175,2,3
	.word	84899
	.byte	12,21,178,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83126
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_MEMSTAT2',0,21,183,2,3
	.word	84965
	.byte	12,21,186,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83209
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_MEMTEST0',0,21,191,2,3
	.word	85031
	.byte	12,21,194,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	83744
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_MEMTEST1',0,21,199,2,3
	.word	85097
	.byte	12,21,202,2,9,4,13
	.byte	'U',0
	.word	429
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	445
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	84237
	.byte	4,2,35,0,0,31
	.byte	'Ifx_MTU_MEMTEST2',0,21,207,2,3
	.word	85163
	.byte	31
	.byte	'Ifx_MC_CONFIG0_Bits',0,12,50,3
	.word	11785
	.byte	31
	.byte	'Ifx_MC_CONFIG1_Bits',0,12,58,3
	.word	11913
	.byte	31
	.byte	'Ifx_MC_ECCD_Bits',0,12,75,3
	.word	12882
	.byte	31
	.byte	'Ifx_MC_ECCS_Bits',0,12,90,3
	.word	12645
	.byte	31
	.byte	'Ifx_MC_ETRR_Bits',0,12,97,3
	.word	13136
	.byte	31
	.byte	'Ifx_MC_MCONTROL_Bits',0,12,113,3
	.word	12037
	.byte	31
	.byte	'Ifx_MC_MSTATUS_Bits',0,12,123,3
	.word	12302
	.byte	31
	.byte	'Ifx_MC_RANGE_Bits',0,12,130,1,3
	.word	12455
	.byte	31
	.byte	'Ifx_MC_RDBFL_Bits',0,12,136,1,3
	.word	13251
	.byte	31
	.byte	'Ifx_MC_REVID_Bits',0,12,142,1,3
	.word	12561
	.byte	31
	.byte	'Ifx_MC_CONFIG0',0,12,155,1,3
	.word	11873
	.byte	31
	.byte	'Ifx_MC_CONFIG1',0,12,163,1,3
	.word	11997
	.byte	31
	.byte	'Ifx_MC_ECCD',0,12,171,1,3
	.word	13096
	.byte	31
	.byte	'Ifx_MC_ECCS',0,12,179,1,3
	.word	12842
	.byte	31
	.byte	'Ifx_MC_ETRR',0,12,187,1,3
	.word	13191
	.byte	31
	.byte	'Ifx_MC_MCONTROL',0,12,195,1,3
	.word	12262
	.byte	31
	.byte	'Ifx_MC_MSTATUS',0,12,203,1,3
	.word	12415
	.byte	31
	.byte	'Ifx_MC_RANGE',0,12,211,1,3
	.word	12512
	.byte	31
	.byte	'Ifx_MC_RDBFL',0,12,219,1,3
	.word	13294
	.byte	31
	.byte	'Ifx_MC_REVID',0,12,227,1,3
	.word	12605
	.byte	31
	.byte	'IfxMtu_MbistSel',0,11,128,1,3
	.word	9835
	.byte	31
	.byte	'IfxMtu_SramItem',0,11,144,1,3
	.word	13609
	.byte	15,160,8
	.word	13609
	.byte	16,87,0,20
	.word	85774
	.byte	33
	.byte	'IfxMtu_sramTable',0,11,150,1,34
	.word	85784
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L130:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,38,0,73,19,0,0,21,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,22,5,0,73,19,0,0,23,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,24,5,0,3,8,73,19,0,0,25,46,0,3,8
	.byte	54,15,39,12,63,12,60,12,0,0,26,46,1,49,19,0,0,27,5,0,49,19,0,0,28,46,1,3,8,58,15,59,15,57,15,54,15,39
	.byte	12,63,12,60,12,0,0,29,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,30,19,1,58,15,59,15
	.byte	57,15,11,15,0,0,31,22,0,3,8,58,15,59,15,57,15,73,19,0,0,32,21,0,54,15,0,0,33,52,0,3,8,58,15,59,15,57,15
	.byte	73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L131:
	.word	.L523-.L522
.L522:
	.half	3
	.word	.L525-.L524
.L524:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Cpu\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\Infra\\Sfr\\TC26B\\_Reg',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Port\\Std',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\_Impl',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,4,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.h',0,0,0,0
	.byte	'IfxMtu_cfg.h',0,5,0,0
	.byte	'IfxMc_regdef.h',0,3,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'IfxFlash_regdef.h',0,3,0,0
	.byte	'IfxMtu_regdef.h',0,3,0,0,0
.L525:
.L523:
	.sdecl	'.debug_info',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_info'
.L132:
	.word	389
	.half	3
	.word	.L133
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L135,.L134
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_clearSram',0,1,80,6,1,1,1
	.word	.L109,.L187,.L108
	.byte	4
	.byte	'mbistSel',0,1,80,39
	.word	.L188,.L189
	.byte	5
	.word	.L109,.L187
	.byte	6
	.byte	'isEndInitEnabled',0,1,82,12
	.word	.L190,.L191
	.byte	6
	.byte	'password',0,1,83,12
	.word	.L192,.L193
	.byte	7
	.word	.L194,.L195,.L2
	.byte	8
	.word	.L196,.L195,.L2
	.byte	0,7
	.word	.L197,.L4,.L6
	.byte	9
	.word	.L198,.L199
	.byte	10
	.word	.L200,.L4,.L6
	.byte	6
	.byte	'mc',0,2,168,4,13
	.word	.L201,.L202
	.byte	6
	.byte	'status',0,2,169,4,13
	.word	.L192,.L203
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_abbrev'
.L133:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,0,49,16,17,1,18,1,0,0,9,5,0,49,16,2
	.byte	6,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_line'
.L134:
	.word	.L527-.L526
.L526:
	.half	3
	.word	.L529-.L528
.L528:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.h',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L529:
	.byte	5,6,7,0,5,2
	.word	.L109
	.byte	3,207,0,1,5,29,9
	.half	.L349-.L109
	.byte	3,2,1,5,51,9
	.half	.L350-.L349
	.byte	3,3,1,5,14,9
	.half	.L348-.L350
	.byte	1,4,3,5,43,9
	.half	.L195-.L348
	.byte	3,164,3,1,5,5,9
	.half	.L530-.L195
	.byte	1,4,1,9
	.half	.L2-.L530
	.byte	3,223,124,1,5,38,7,9
	.half	.L531-.L2
	.byte	3,3,1,5,26,9
	.half	.L352-.L531
	.byte	3,1,1,5,27,9
	.half	.L3-.L352
	.byte	3,3,1,5,32,9
	.half	.L354-.L3
	.byte	3,3,1,5,45,9
	.half	.L356-.L354
	.byte	3,3,1,5,29,9
	.half	.L532-.L356
	.byte	1,5,45,9
	.half	.L533-.L532
	.byte	1,5,55,9
	.half	.L534-.L533
	.byte	1,5,68,9
	.half	.L535-.L534
	.byte	1,5,71,9
	.half	.L536-.L535
	.byte	1,5,41,9
	.half	.L358-.L536
	.byte	3,3,1,5,14,9
	.half	.L5-.L358
	.byte	3,2,1,4,2,5,54,9
	.half	.L4-.L5
	.byte	3,190,3,1,5,60,9
	.half	.L537-.L4
	.byte	1,5,29,9
	.half	.L538-.L537
	.byte	1,5,52,9
	.half	.L359-.L538
	.byte	1,5,16,9
	.half	.L539-.L359
	.byte	1,5,25,9
	.half	.L361-.L539
	.byte	3,3,1,5,29,9
	.half	.L362-.L361
	.byte	3,1,1,5,5,9
	.half	.L363-.L362
	.byte	1,4,1,5,13,9
	.half	.L6-.L363
	.byte	3,188,124,1,5,34,7,9
	.half	.L540-.L6
	.byte	3,6,1,5,30,9
	.half	.L360-.L540
	.byte	3,2,1,5,5,9
	.half	.L366-.L360
	.byte	3,2,1,5,36,7,9
	.half	.L541-.L366
	.byte	3,3,1,5,1,9
	.half	.L7-.L541
	.byte	3,2,1,7,9
	.half	.L136-.L7
	.byte	0,1,1
.L527:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_ranges'
.L135:
	.word	-1,.L109,0,.L136-.L109,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_info'
.L137:
	.word	405
	.half	3
	.word	.L138
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L140,.L139
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_clearSramContinue',0,1,122,6,1,1,1
	.word	.L111,.L204,.L110
	.byte	4
	.byte	'mbistSel',0,1,122,47
	.word	.L188,.L205
	.byte	5
	.word	.L111,.L204
	.byte	6
	.word	.L206,.L207,.L208
	.byte	7
	.word	.L209,.L210
	.byte	8
	.word	.L211,.L207,.L208
	.byte	9
	.byte	'mtuMemtest',0,2,237,3,22
	.word	.L212,.L213
	.byte	9
	.byte	'mask',0,2,238,3,22
	.word	.L214,.L215
	.byte	0,0,6
	.word	.L216,.L8,.L10
	.byte	7
	.word	.L217,.L218
	.byte	8
	.word	.L219,.L8,.L10
	.byte	9
	.byte	'mtuMemstat',0,2,146,4,22
	.word	.L212,.L220
	.byte	9
	.byte	'mask',0,2,147,4,22
	.word	.L214,.L221
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_abbrev'
.L138:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6
	.byte	0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_line'
.L139:
	.word	.L543-.L542
.L542:
	.half	3
	.word	.L545-.L544
.L544:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.h',0,0,0,0,0
.L545:
	.byte	5,6,7,0,5,2
	.word	.L111
	.byte	3,249,0,1,5,38,9
	.half	.L368-.L111
	.byte	3,3,1,4,2,5,93,9
	.half	.L207-.L368
	.byte	3,240,2,1,5,81,9
	.half	.L546-.L207
	.byte	1,5,55,9
	.half	.L547-.L546
	.byte	1,5,81,9
	.half	.L369-.L547
	.byte	1,5,33,9
	.half	.L548-.L369
	.byte	1,5,35,9
	.half	.L371-.L548
	.byte	3,1,1,5,50,9
	.half	.L370-.L371
	.byte	1,5,37,9
	.half	.L549-.L370
	.byte	1,5,6,9
	.half	.L372-.L549
	.byte	3,1,1,5,20,9
	.half	.L550-.L372
	.byte	1,5,17,9
	.half	.L373-.L550
	.byte	1,4,1,5,46,9
	.half	.L208-.L373
	.byte	3,147,125,1,4,2,5,93,9
	.half	.L8-.L208
	.byte	3,144,3,1,5,81,9
	.half	.L551-.L8
	.byte	1,5,55,9
	.half	.L552-.L551
	.byte	1,5,81,9
	.half	.L374-.L552
	.byte	1,5,33,9
	.half	.L553-.L374
	.byte	1,5,35,9
	.half	.L376-.L553
	.byte	3,1,1,5,50,9
	.half	.L554-.L376
	.byte	1,5,37,9
	.half	.L375-.L554
	.byte	1,5,13,9
	.half	.L377-.L375
	.byte	3,1,1,5,25,9
	.half	.L555-.L377
	.byte	1,5,33,9
	.half	.L556-.L555
	.byte	1,5,5,9
	.half	.L557-.L556
	.byte	1,4,1,5,46,9
	.half	.L10-.L557
	.byte	3,238,124,1,5,1,7,9
	.half	.L558-.L10
	.byte	3,2,1,7,9
	.half	.L141-.L558
	.byte	0,1,1
.L543:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_ranges'
.L140:
	.word	-1,.L111,0,.L141-.L111,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_info'
.L142:
	.word	729
	.half	3
	.word	.L143
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L145,.L144
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_clearSramStart',0,1,135,1,6,1,1,1
	.word	.L113,.L222,.L112
	.byte	4
	.byte	'mbistSel',0,1,135,1,44
	.word	.L188,.L223
	.byte	5
	.word	.L113,.L222
	.byte	6
	.byte	'mc',0,1,137,1,13
	.word	.L201,.L224
	.byte	7
	.word	.L225,.L226,.L227
	.byte	8
	.word	.L228,.L229
	.byte	9
	.word	.L230,.L226,.L227
	.byte	6
	.byte	'mtuMemtest',0,2,245,3,22
	.word	.L212,.L231
	.byte	6
	.byte	'mask',0,2,246,3,22
	.word	.L214,.L232
	.byte	0,0,7
	.word	.L216,.L11,.L13
	.byte	8
	.word	.L217,.L233
	.byte	9
	.word	.L219,.L11,.L13
	.byte	6
	.byte	'mtuMemstat',0,2,146,4,22
	.word	.L212,.L234
	.byte	6
	.byte	'mask',0,2,147,4,22
	.word	.L214,.L235
	.byte	0,0,5
	.word	.L236,.L21
	.byte	6
	.byte	'item',0,1,148,1,32
	.word	.L237,.L238
	.byte	6
	.byte	'numBlocks',0,1,150,1,32
	.word	.L190,.L239
	.byte	5
	.word	.L240,.L21
	.byte	6
	.byte	'dataSize',0,1,153,1,32
	.word	.L192,.L241
	.byte	6
	.byte	'eccSize',0,1,154,1,32
	.word	.L190,.L242
	.byte	6
	.byte	'eccInvPos0',0,1,155,1,32
	.word	.L214,.L243
	.byte	6
	.byte	'eccInvPos1',0,1,156,1,32
	.word	.L214,.L244
	.byte	6
	.byte	'memSize',0,1,158,1,32
	.word	.L214,.L245
	.byte	6
	.byte	'bitPos',0,1,160,1,32
	.word	.L214,.L246
	.byte	6
	.byte	'wordIx',0,1,161,1,32
	.word	.L214,.L247
	.byte	6
	.byte	'data',0,1,162,1,32
	.word	.L192,.L248
	.byte	6
	.byte	'mem',0,1,164,1,32
	.word	.L214,.L249
	.byte	5
	.word	.L15,.L250
	.byte	6
	.byte	'i',0,1,168,1,20
	.word	.L214,.L251
	.byte	0,0,0,5
	.word	.L21,.L222
	.byte	6
	.byte	'mcontrolMask',0,1,196,1,12
	.word	.L192,.L252
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_abbrev'
.L143:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_line'
.L144:
	.word	.L560-.L559
.L559:
	.half	3
	.word	.L562-.L561
.L561:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.h',0,0,0,0,0
.L562:
	.byte	5,54,7,0,5,2
	.word	.L113
	.byte	3,136,1,1,5,60,9
	.half	.L563-.L113
	.byte	1,5,29,9
	.half	.L564-.L563
	.byte	1,5,52,9
	.half	.L379-.L564
	.byte	1,5,16,9
	.half	.L565-.L379
	.byte	1,4,2,5,93,9
	.half	.L226-.L565
	.byte	3,236,2,1,5,81,9
	.half	.L380-.L226
	.byte	1,5,55,9
	.half	.L566-.L380
	.byte	1,5,81,9
	.half	.L381-.L566
	.byte	1,5,33,9
	.half	.L567-.L381
	.byte	1,5,35,9
	.half	.L383-.L567
	.byte	3,1,1,5,50,9
	.half	.L568-.L383
	.byte	1,5,37,9
	.half	.L382-.L568
	.byte	1,5,6,9
	.half	.L384-.L382
	.byte	3,1,1,5,17,9
	.half	.L569-.L384
	.byte	1,4,1,5,46,9
	.half	.L227-.L569
	.byte	3,151,125,1,4,2,5,93,9
	.half	.L11-.L227
	.byte	3,132,3,1,5,81,9
	.half	.L570-.L11
	.byte	1,5,55,9
	.half	.L571-.L570
	.byte	1,5,81,9
	.half	.L385-.L571
	.byte	1,5,33,9
	.half	.L572-.L385
	.byte	1,5,35,9
	.half	.L387-.L572
	.byte	3,1,1,5,50,9
	.half	.L573-.L387
	.byte	1,5,37,9
	.half	.L386-.L573
	.byte	1,5,13,9
	.half	.L389-.L386
	.byte	3,1,1,5,25,9
	.half	.L574-.L389
	.byte	1,5,33,9
	.half	.L575-.L574
	.byte	1,5,5,9
	.half	.L576-.L575
	.byte	1,4,1,5,46,9
	.half	.L13-.L576
	.byte	3,250,124,1,5,80,7,9
	.half	.L236-.L13
	.byte	3,6,1,5,64,9
	.half	.L577-.L236
	.byte	1,5,80,9
	.half	.L578-.L577
	.byte	1,5,48,9
	.half	.L391-.L578
	.byte	3,2,1,5,49,9
	.half	.L240-.L391
	.byte	3,3,1,9
	.half	.L390-.L240
	.byte	3,1,1,5,60,9
	.half	.L393-.L390
	.byte	3,1,1,5,54,9
	.half	.L579-.L393
	.byte	1,5,60,9
	.half	.L395-.L579
	.byte	3,1,1,5,54,9
	.half	.L580-.L395
	.byte	1,9
	.half	.L396-.L580
	.byte	3,2,1,5,43,9
	.half	.L392-.L396
	.byte	3,2,1,9
	.half	.L394-.L392
	.byte	3,1,1,9
	.half	.L378-.L394
	.byte	3,1,1,5,18,9
	.half	.L398-.L378
	.byte	3,4,1,5,38,9
	.half	.L399-.L398
	.byte	1,5,20,9
	.half	.L15-.L399
	.byte	3,4,1,5,36,9
	.half	.L400-.L15
	.byte	1,5,21,9
	.half	.L17-.L400
	.byte	3,2,1,5,45,7,9
	.half	.L581-.L17
	.byte	1,5,30,7,9
	.half	.L18-.L581
	.byte	3,2,1,5,32,9
	.half	.L582-.L18
	.byte	1,5,26,9
	.half	.L583-.L582
	.byte	1,5,17,9
	.half	.L19-.L583
	.byte	3,3,1,5,31,9
	.half	.L584-.L19
	.byte	3,2,1,5,17,9
	.half	.L585-.L584
	.byte	1,5,30,7,9
	.half	.L586-.L585
	.byte	3,2,1,5,43,9
	.half	.L587-.L586
	.byte	1,5,37,9
	.half	.L588-.L587
	.byte	1,5,43,9
	.half	.L589-.L588
	.byte	3,1,1,9
	.half	.L590-.L589
	.byte	3,1,1,5,38,9
	.half	.L20-.L590
	.byte	3,115,1,5,36,9
	.half	.L16-.L20
	.byte	1,5,40,7,9
	.half	.L250-.L16
	.byte	3,124,1,5,38,9
	.half	.L14-.L250
	.byte	1,5,9,7,9
	.half	.L591-.L14
	.byte	3,23,1,5,22,7,9
	.half	.L592-.L591
	.byte	3,2,1,5,33,9
	.half	.L593-.L592
	.byte	1,5,25,9
	.half	.L21-.L593
	.byte	3,5,1,5,35,9
	.half	.L397-.L21
	.byte	3,1,1,5,70,9
	.half	.L594-.L397
	.byte	1,5,20,9
	.half	.L595-.L594
	.byte	1,5,70,9
	.half	.L596-.L595
	.byte	3,1,1,5,20,9
	.half	.L597-.L596
	.byte	1,5,1,9
	.half	.L598-.L597
	.byte	3,1,1,7,9
	.half	.L146-.L598
	.byte	0,1,1
.L560:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_ranges'
.L145:
	.word	-1,.L113,0,.L146-.L113,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_info'
.L147:
	.word	387
	.half	3
	.word	.L148
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L150,.L149
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_readSramAddress',0,1,149,2,6,1,1,1
	.word	.L121,.L253,.L120
	.byte	4
	.byte	'mbistSel',0,1,149,2,45
	.word	.L188,.L254
	.byte	4
	.byte	'sramAddress',0,1,149,2,62
	.word	.L192,.L255
	.byte	5
	.word	.L121,.L253
	.byte	6
	.byte	'mc',0,1,151,2,13
	.word	.L201,.L256
	.byte	6
	.byte	'mcontrolMask',0,1,154,2,13
	.word	.L192,.L257
	.byte	7
	.word	.L197,.L40,.L42
	.byte	8
	.word	.L198,.L258
	.byte	9
	.word	.L200,.L40,.L42
	.byte	6
	.byte	'mc',0,2,168,4,13
	.word	.L201,.L259
	.byte	6
	.byte	'status',0,2,169,4,13
	.word	.L192,.L260
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_abbrev'
.L148:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_line'
.L149:
	.word	.L600-.L599
.L599:
	.half	3
	.word	.L602-.L601
.L601:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.h',0,0,0,0,0
.L602:
	.byte	5,6,7,0,5,2
	.word	.L121
	.byte	3,148,2,1,5,54,9
	.half	.L425-.L121
	.byte	3,2,1,5,60,9
	.half	.L603-.L425
	.byte	1,5,29,9
	.half	.L604-.L603
	.byte	1,5,52,9
	.half	.L426-.L604
	.byte	1,5,16,9
	.half	.L605-.L426
	.byte	1,5,26,9
	.half	.L428-.L605
	.byte	3,3,1,5,35,9
	.half	.L429-.L428
	.byte	3,1,1,5,20,9
	.half	.L427-.L429
	.byte	1,5,56,9
	.half	.L606-.L427
	.byte	3,1,1,5,20,9
	.half	.L607-.L606
	.byte	1,5,22,9
	.half	.L608-.L607
	.byte	3,1,1,5,20,9
	.half	.L609-.L608
	.byte	1,5,17,9
	.half	.L610-.L609
	.byte	3,3,1,5,35,9
	.half	.L611-.L610
	.byte	3,3,1,5,68,9
	.half	.L612-.L611
	.byte	1,5,20,9
	.half	.L613-.L612
	.byte	1,5,35,9
	.half	.L614-.L613
	.byte	3,1,1,5,20,9
	.half	.L615-.L614
	.byte	1,5,29,9
	.half	.L616-.L615
	.byte	3,3,1,5,34,9
	.half	.L423-.L616
	.byte	1,5,37,9
	.half	.L424-.L423
	.byte	1,5,41,9
	.half	.L430-.L424
	.byte	3,2,1,5,14,9
	.half	.L41-.L430
	.byte	3,2,1,4,2,5,54,9
	.half	.L40-.L41
	.byte	3,253,1,1,5,60,9
	.half	.L617-.L40
	.byte	1,5,29,9
	.half	.L618-.L617
	.byte	1,5,52,9
	.half	.L432-.L618
	.byte	1,5,16,9
	.half	.L619-.L432
	.byte	1,5,25,9
	.half	.L434-.L619
	.byte	3,3,1,5,29,9
	.half	.L433-.L434
	.byte	3,1,1,5,5,9
	.half	.L435-.L433
	.byte	1,4,1,5,13,9
	.half	.L42-.L435
	.byte	3,253,125,1,5,1,7,9
	.half	.L620-.L42
	.byte	3,4,1,7,9
	.half	.L151-.L620
	.byte	0,1,1
.L600:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_ranges'
.L150:
	.word	-1,.L121,0,.L151-.L121,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_info'
.L152:
	.word	920
	.half	3
	.word	.L153
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L155,.L154
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_runNonDestructiveInversionTest',0,1,176,2,7
	.word	.L190
	.byte	1,1,1
	.word	.L123,.L261,.L122
	.byte	4
	.byte	'mbistSel',0,1,176,2,61
	.word	.L188,.L262
	.byte	4
	.byte	'rangeSel',0,1,176,2,77
	.word	.L190,.L263
	.byte	4
	.byte	'rangeAddrUp',0,1,176,2,93
	.word	.L190,.L264
	.byte	4
	.byte	'rangeAddrLow',0,1,176,2,112
	.word	.L190,.L265
	.byte	4
	.byte	'errorAddr',0,1,176,2,134,1
	.word	.L266,.L267
	.byte	5
	.word	.L123,.L261
	.byte	6
	.byte	'mc',0,1,181,2,13
	.word	.L201,.L268
	.byte	6
	.byte	'password',0,1,182,2,13
	.word	.L192,.L269
	.byte	6
	.byte	'retVal',0,1,183,2,13
	.word	.L190,.L270
	.byte	6
	.byte	'isEndInitEnabled',0,1,184,2,13
	.word	.L190,.L271
	.byte	7
	.word	.L194,.L272,.L43
	.byte	8
	.word	.L196,.L272,.L43
	.byte	0,7
	.word	.L225,.L44,.L273
	.byte	9
	.word	.L228,.L274
	.byte	10
	.word	.L230,.L44,.L273
	.byte	6
	.byte	'mtuMemtest',0,2,245,3,22
	.word	.L212,.L275
	.byte	6
	.byte	'mask',0,2,246,3,22
	.word	.L214,.L276
	.byte	0,0,7
	.word	.L216,.L45,.L47
	.byte	9
	.word	.L217,.L277
	.byte	10
	.word	.L219,.L45,.L47
	.byte	6
	.byte	'mtuMemstat',0,2,146,4,22
	.word	.L212,.L278
	.byte	6
	.byte	'mask',0,2,147,4,22
	.word	.L214,.L279
	.byte	0,0,7
	.word	.L197,.L48,.L50
	.byte	9
	.word	.L198,.L280
	.byte	10
	.word	.L200,.L48,.L50
	.byte	6
	.byte	'mc',0,2,168,4,13
	.word	.L201,.L281
	.byte	6
	.byte	'status',0,2,169,4,13
	.word	.L192,.L282
	.byte	0,0,7
	.word	.L283,.L284,.L51
	.byte	9
	.word	.L285,.L286
	.byte	10
	.word	.L287,.L284,.L51
	.byte	6
	.byte	'mc',0,2,184,4,13
	.word	.L201,.L288
	.byte	0,0,7
	.word	.L206,.L52,.L289
	.byte	9
	.word	.L209,.L290
	.byte	10
	.word	.L211,.L52,.L289
	.byte	6
	.byte	'mtuMemtest',0,2,237,3,22
	.word	.L212,.L291
	.byte	6
	.byte	'mask',0,2,238,3,22
	.word	.L214,.L292
	.byte	0,0,7
	.word	.L216,.L53,.L55
	.byte	9
	.word	.L217,.L277
	.byte	10
	.word	.L219,.L53,.L55
	.byte	6
	.byte	'mtuMemstat',0,2,146,4,22
	.word	.L212,.L293
	.byte	6
	.byte	'mask',0,2,147,4,22
	.word	.L214,.L294
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_abbrev'
.L153:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,0,49,16,17,1,18,1,0,0,9,5,0,49
	.byte	16,2,6,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_line'
.L154:
	.word	.L622-.L621
.L621:
	.half	3
	.word	.L624-.L623
.L623:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.h',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L624:
	.byte	5,7,7,0,5,2
	.word	.L123
	.byte	3,175,2,1,5,68,9
	.half	.L443-.L123
	.byte	3,5,1,5,74,9
	.half	.L625-.L443
	.byte	1,5,43,9
	.half	.L626-.L625
	.byte	1,5,66,9
	.half	.L444-.L626
	.byte	1,5,30,9
	.half	.L627-.L444
	.byte	1,9
	.half	.L445-.L627
	.byte	3,2,1,9
	.half	.L447-.L445
	.byte	3,1,1,5,51,9
	.half	.L448-.L447
	.byte	3,1,1,5,14,9
	.half	.L436-.L448
	.byte	1,4,3,5,43,9
	.half	.L272-.L436
	.byte	3,192,1,1,5,5,9
	.half	.L628-.L272
	.byte	1,4,1,9
	.half	.L43-.L628
	.byte	3,195,126,1,5,38,7,9
	.half	.L629-.L43
	.byte	3,3,1,5,26,9
	.half	.L450-.L629
	.byte	3,1,1,4,2,5,93,9
	.half	.L44-.L450
	.byte	3,181,1,1,5,81,9
	.half	.L630-.L44
	.byte	1,5,55,9
	.half	.L631-.L630
	.byte	1,5,81,9
	.half	.L451-.L631
	.byte	1,5,33,9
	.half	.L632-.L451
	.byte	1,5,35,9
	.half	.L453-.L632
	.byte	3,1,1,5,50,9
	.half	.L633-.L453
	.byte	1,5,37,9
	.half	.L452-.L633
	.byte	1,5,6,9
	.half	.L454-.L452
	.byte	3,1,1,5,17,9
	.half	.L634-.L454
	.byte	1,4,1,5,46,9
	.half	.L273-.L634
	.byte	3,208,126,1,4,2,5,93,9
	.half	.L45-.L273
	.byte	3,203,1,1,5,81,9
	.half	.L635-.L45
	.byte	1,5,55,9
	.half	.L636-.L635
	.byte	1,5,81,9
	.half	.L455-.L636
	.byte	1,5,33,9
	.half	.L637-.L455
	.byte	1,5,35,9
	.half	.L457-.L637
	.byte	3,1,1,5,50,9
	.half	.L638-.L457
	.byte	1,5,37,9
	.half	.L456-.L638
	.byte	1,5,13,9
	.half	.L459-.L456
	.byte	3,1,1,5,25,9
	.half	.L639-.L459
	.byte	1,5,33,9
	.half	.L640-.L639
	.byte	1,5,5,9
	.half	.L641-.L640
	.byte	1,4,1,5,46,9
	.half	.L47-.L641
	.byte	3,179,126,1,5,21,7,9
	.half	.L642-.L47
	.byte	3,4,1,5,19,9
	.half	.L643-.L642
	.byte	1,5,21,9
	.half	.L644-.L643
	.byte	3,1,1,5,19,9
	.half	.L645-.L644
	.byte	1,5,31,9
	.half	.L646-.L645
	.byte	3,2,1,5,53,9
	.half	.L647-.L646
	.byte	1,5,38,9
	.half	.L440-.L647
	.byte	1,5,59,9
	.half	.L648-.L440
	.byte	1,5,19,9
	.half	.L442-.L648
	.byte	1,5,28,9
	.half	.L649-.L442
	.byte	3,3,1,5,26,9
	.half	.L650-.L649
	.byte	1,5,19,9
	.half	.L651-.L650
	.byte	3,1,1,5,26,9
	.half	.L652-.L651
	.byte	1,5,32,9
	.half	.L653-.L652
	.byte	3,2,1,5,45,9
	.half	.L458-.L653
	.byte	3,3,1,5,29,9
	.half	.L654-.L458
	.byte	1,5,45,9
	.half	.L655-.L654
	.byte	1,5,55,9
	.half	.L656-.L655
	.byte	1,5,68,9
	.half	.L657-.L656
	.byte	1,5,71,9
	.half	.L658-.L657
	.byte	1,5,41,9
	.half	.L462-.L658
	.byte	3,3,1,5,14,9
	.half	.L49-.L462
	.byte	3,2,1,4,2,5,54,9
	.half	.L48-.L49
	.byte	3,204,1,1,5,60,9
	.half	.L659-.L48
	.byte	1,5,29,9
	.half	.L660-.L659
	.byte	1,5,52,9
	.half	.L463-.L660
	.byte	1,5,16,9
	.half	.L661-.L463
	.byte	1,5,25,9
	.half	.L465-.L661
	.byte	3,3,1,5,29,9
	.half	.L464-.L465
	.byte	3,1,1,5,5,9
	.half	.L466-.L464
	.byte	1,4,1,5,13,9
	.half	.L50-.L466
	.byte	3,174,126,1,5,34,7,9
	.half	.L662-.L50
	.byte	3,6,1,4,2,5,54,9
	.half	.L284-.L662
	.byte	3,216,1,1,5,60,9
	.half	.L663-.L284
	.byte	1,5,29,9
	.half	.L664-.L663
	.byte	1,5,52,9
	.half	.L468-.L664
	.byte	1,5,16,9
	.half	.L665-.L468
	.byte	1,5,31,9
	.half	.L470-.L665
	.byte	3,1,1,5,36,9
	.half	.L469-.L470
	.byte	1,5,34,9
	.half	.L666-.L469
	.byte	1,5,61,9
	.half	.L667-.L666
	.byte	1,5,5,9
	.half	.L668-.L667
	.byte	1,4,1,9
	.half	.L51-.L668
	.byte	3,170,126,1,5,33,7,9
	.half	.L669-.L51
	.byte	3,3,1,5,20,9
	.half	.L670-.L669
	.byte	1,9
	.half	.L671-.L670
	.byte	3,1,1,4,2,5,93,9
	.half	.L52-.L671
	.byte	3,134,1,1,5,81,9
	.half	.L672-.L52
	.byte	1,5,55,9
	.half	.L673-.L672
	.byte	1,5,81,9
	.half	.L471-.L673
	.byte	1,5,33,9
	.half	.L674-.L471
	.byte	1,5,35,9
	.half	.L446-.L674
	.byte	3,1,1,5,50,9
	.half	.L675-.L446
	.byte	1,5,37,9
	.half	.L472-.L675
	.byte	1,5,6,9
	.half	.L473-.L472
	.byte	3,1,1,5,20,9
	.half	.L676-.L473
	.byte	1,5,17,9
	.half	.L474-.L676
	.byte	1,4,1,5,46,9
	.half	.L289-.L474
	.byte	3,255,126,1,4,2,5,93,9
	.half	.L53-.L289
	.byte	3,164,1,1,5,81,9
	.half	.L677-.L53
	.byte	1,5,55,9
	.half	.L678-.L677
	.byte	1,5,81,9
	.half	.L475-.L678
	.byte	1,5,33,9
	.half	.L679-.L475
	.byte	1,5,35,9
	.half	.L477-.L679
	.byte	3,1,1,5,50,9
	.half	.L680-.L477
	.byte	1,5,37,9
	.half	.L476-.L680
	.byte	1,5,13,9
	.half	.L478-.L476
	.byte	3,1,1,5,25,9
	.half	.L681-.L478
	.byte	1,5,33,9
	.half	.L682-.L681
	.byte	1,5,5,9
	.half	.L683-.L682
	.byte	1,4,1,5,46,9
	.half	.L55-.L683
	.byte	3,218,126,1,5,5,7,9
	.half	.L684-.L55
	.byte	3,4,1,5,36,7,9
	.half	.L685-.L684
	.byte	3,3,1,5,5,9
	.half	.L56-.L685
	.byte	3,3,1,5,1,9
	.half	.L57-.L56
	.byte	3,1,1,7,9
	.half	.L156-.L57
	.byte	0,1,1
.L622:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_ranges'
.L155:
	.word	-1,.L123,0,.L156-.L123,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_info'
.L157:
	.word	477
	.half	3
	.word	.L158
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L160,.L159
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_writeSramAddress',0,1,252,2,6,1,1,1
	.word	.L125,.L295,.L124
	.byte	4
	.byte	'mbistSel',0,1,252,2,46
	.word	.L188,.L296
	.byte	4
	.byte	'sramAddress',0,1,252,2,63
	.word	.L192,.L297
	.byte	5
	.word	.L125,.L295
	.byte	6
	.byte	'mc',0,1,254,2,13
	.word	.L201,.L298
	.byte	6
	.byte	'isEndInitEnabled',0,1,255,2,13
	.word	.L190,.L299
	.byte	6
	.byte	'password',0,1,128,3,13
	.word	.L192,.L300
	.byte	7
	.word	.L194,.L301,.L58
	.byte	8
	.word	.L196,.L301,.L58
	.byte	0,5
	.word	.L59,.L295
	.byte	6
	.byte	'mcontrolMask',0,1,140,3,12
	.word	.L192,.L302
	.byte	7
	.word	.L197,.L61,.L63
	.byte	9
	.word	.L198,.L303
	.byte	10
	.word	.L200,.L61,.L63
	.byte	6
	.byte	'mc',0,2,168,4,13
	.word	.L201,.L304
	.byte	6
	.byte	'status',0,2,169,4,13
	.word	.L192,.L305
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_abbrev'
.L158:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,0,49,16,17,1,18,1,0,0,9,5,0,49,16,2
	.byte	6,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_line'
.L159:
	.word	.L687-.L686
.L686:
	.half	3
	.word	.L689-.L688
.L688:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.h',0,0,0,0
	.byte	'IfxScuWdt.h',0,1,0,0,0
.L689:
	.byte	5,6,7,0,5,2
	.word	.L125
	.byte	3,251,2,1,5,68,9
	.half	.L690-.L125
	.byte	3,2,1,5,74,9
	.half	.L482-.L690
	.byte	1,5,43,9
	.half	.L483-.L482
	.byte	1,5,66,9
	.half	.L484-.L483
	.byte	1,5,30,9
	.half	.L691-.L484
	.byte	1,9
	.half	.L485-.L691
	.byte	3,1,1,5,51,9
	.half	.L487-.L485
	.byte	3,2,1,5,14,9
	.half	.L481-.L487
	.byte	1,4,3,5,43,9
	.half	.L301-.L481
	.byte	3,248,0,1,5,5,9
	.half	.L692-.L301
	.byte	1,4,1,9
	.half	.L58-.L692
	.byte	3,139,127,1,5,38,7,9
	.half	.L693-.L58
	.byte	3,3,1,5,26,9
	.half	.L489-.L693
	.byte	3,1,1,5,25,9
	.half	.L59-.L489
	.byte	3,4,1,5,35,9
	.half	.L490-.L59
	.byte	3,1,1,5,20,9
	.half	.L694-.L490
	.byte	1,5,56,9
	.half	.L695-.L694
	.byte	3,1,1,5,20,9
	.half	.L696-.L695
	.byte	1,5,22,9
	.half	.L697-.L696
	.byte	3,1,1,5,20,9
	.half	.L698-.L697
	.byte	1,5,17,9
	.half	.L491-.L698
	.byte	3,3,1,5,35,9
	.half	.L492-.L491
	.byte	3,3,1,5,68,9
	.half	.L699-.L492
	.byte	1,5,20,9
	.half	.L700-.L699
	.byte	1,5,35,9
	.half	.L701-.L700
	.byte	3,1,1,5,20,9
	.half	.L702-.L701
	.byte	1,5,5,9
	.half	.L703-.L702
	.byte	3,2,1,5,36,7,9
	.half	.L704-.L703
	.byte	3,3,1,5,45,9
	.half	.L60-.L704
	.byte	3,4,1,5,29,9
	.half	.L494-.L60
	.byte	1,5,45,9
	.half	.L705-.L494
	.byte	1,5,55,9
	.half	.L706-.L705
	.byte	1,5,68,9
	.half	.L707-.L706
	.byte	1,5,71,9
	.half	.L495-.L707
	.byte	1,5,41,9
	.half	.L497-.L495
	.byte	3,3,1,5,14,9
	.half	.L62-.L497
	.byte	3,2,1,4,2,5,54,9
	.half	.L61-.L62
	.byte	3,132,1,1,5,60,9
	.half	.L498-.L61
	.byte	1,5,29,9
	.half	.L499-.L498
	.byte	1,5,52,9
	.half	.L500-.L499
	.byte	1,5,16,9
	.half	.L708-.L500
	.byte	1,5,25,9
	.half	.L502-.L708
	.byte	3,3,1,5,29,9
	.half	.L501-.L502
	.byte	3,1,1,5,5,9
	.half	.L503-.L501
	.byte	1,4,1,5,13,9
	.half	.L63-.L503
	.byte	3,246,126,1,5,1,7,9
	.half	.L709-.L63
	.byte	3,4,1,7,9
	.half	.L161-.L709
	.byte	0,1,1
.L687:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_ranges'
.L160:
	.word	-1,.L125,0,.L161-.L125,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_info'
.L162:
	.word	263
	.half	3
	.word	.L163
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L165,.L164
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_clearErrorTracking',0,1,73,6,1,1,1
	.word	.L107,.L306,.L106
	.byte	4
	.byte	'mbistSel',0,1,73,48
	.word	.L188,.L307
	.byte	5
	.word	.L107,.L306
	.byte	6
	.byte	'mc',0,1,75,13
	.word	.L201,.L308
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_abbrev'
.L163:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_line'
.L164:
	.word	.L711-.L710
.L710:
	.half	3
	.word	.L713-.L712
.L712:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L713:
	.byte	5,54,7,0,5,2
	.word	.L107
	.byte	3,202,0,1,5,60,9
	.half	.L714-.L107
	.byte	1,5,29,9
	.half	.L345-.L714
	.byte	1,5,52,9
	.half	.L346-.L345
	.byte	1,5,16,9
	.half	.L715-.L346
	.byte	1,5,13,9
	.half	.L347-.L715
	.byte	3,1,1,5,16,9
	.half	.L716-.L347
	.byte	1,5,1,9
	.half	.L717-.L716
	.byte	3,1,1,7,9
	.half	.L166-.L717
	.byte	0,1,1
.L711:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_ranges'
.L165:
	.word	-1,.L107,0,.L166-.L107,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_info'
.L167:
	.word	287
	.half	3
	.word	.L168
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L170,.L169
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_enableErrorTracking',0,1,202,1,6,1,1,1
	.word	.L115,.L309,.L114
	.byte	4
	.byte	'mbistSel',0,1,202,1,49
	.word	.L188,.L310
	.byte	4
	.byte	'enable',0,1,202,1,67
	.word	.L190,.L311
	.byte	5
	.word	.L115,.L309
	.byte	6
	.byte	'mc',0,1,204,1,13
	.word	.L201,.L312
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_abbrev'
.L168:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_line'
.L169:
	.word	.L719-.L718
.L718:
	.half	3
	.word	.L721-.L720
.L720:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L721:
	.byte	5,54,7,0,5,2
	.word	.L115
	.byte	3,203,1,1,5,60,9
	.half	.L722-.L115
	.byte	1,5,29,9
	.half	.L401-.L722
	.byte	1,5,52,9
	.half	.L402-.L401
	.byte	1,5,16,9
	.half	.L723-.L402
	.byte	1,5,5,9
	.half	.L403-.L723
	.byte	3,2,1,5,17,7,9
	.half	.L724-.L403
	.byte	3,2,1,5,20,9
	.half	.L725-.L724
	.byte	1,5,50,9
	.half	.L726-.L725
	.byte	1,5,17,9
	.half	.L22-.L726
	.byte	3,4,1,5,20,9
	.half	.L727-.L22
	.byte	1,5,1,9
	.half	.L23-.L727
	.byte	3,2,1,7,9
	.half	.L171-.L23
	.byte	0,1,1
.L719:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_ranges'
.L170:
	.word	-1,.L115,0,.L171-.L115,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_info'
.L172:
	.word	353
	.half	3
	.word	.L173
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L175,.L174
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_getSystemAddress',0,1,217,1,8
	.word	.L214
	.byte	1,1,1
	.word	.L117,.L313,.L116
	.byte	4
	.byte	'mbistSel',0,1,217,1,48
	.word	.L188,.L314
	.byte	4
	.byte	'trackedSramAddress',0,1,217,1,70
	.word	.L315,.L316
	.byte	5
	.word	.L117,.L313
	.byte	6
	.byte	'sramAddress',0,1,219,1,12
	.word	.L214,.L317
	.byte	6
	.byte	'mbi',0,1,220,1,12
	.word	.L214,.L318
	.byte	6
	.byte	'systemAddress',0,1,221,1,12
	.word	.L214,.L319
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_abbrev'
.L173:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_line'
.L174:
	.word	.L729-.L728
.L728:
	.half	3
	.word	.L731-.L730
.L730:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L731:
	.byte	5,48,7,0,5,2
	.word	.L117
	.byte	3,218,1,1,9
	.half	.L404-.L117
	.byte	3,1,1,5,10,9
	.half	.L406-.L404
	.byte	3,17,1,9
	.half	.L732-.L406
	.byte	3,124,1,9
	.half	.L733-.L732
	.byte	3,124,1,9
	.half	.L734-.L733
	.byte	3,124,1,9
	.half	.L735-.L734
	.byte	3,16,1,5,52,9
	.half	.L27-.L735
	.byte	3,113,1,5,66,9
	.half	.L405-.L27
	.byte	1,5,71,9
	.half	.L736-.L405
	.byte	1,5,58,9
	.half	.L737-.L736
	.byte	1,5,25,9
	.half	.L738-.L737
	.byte	1,5,36,9
	.half	.L407-.L738
	.byte	1,5,9,9
	.half	.L739-.L407
	.byte	3,1,1,5,52,9
	.half	.L26-.L739
	.byte	3,3,1,5,66,9
	.half	.L408-.L26
	.byte	1,5,71,9
	.half	.L740-.L408
	.byte	1,5,58,9
	.half	.L741-.L740
	.byte	1,5,36,9
	.half	.L742-.L741
	.byte	1,5,9,9
	.half	.L409-.L742
	.byte	3,1,1,5,52,9
	.half	.L25-.L409
	.byte	3,3,1,5,66,9
	.half	.L410-.L25
	.byte	1,5,71,9
	.half	.L743-.L410
	.byte	1,5,58,9
	.half	.L744-.L743
	.byte	1,5,25,9
	.half	.L745-.L744
	.byte	1,5,36,9
	.half	.L411-.L745
	.byte	1,5,9,9
	.half	.L746-.L411
	.byte	3,1,1,5,52,9
	.half	.L24-.L746
	.byte	3,3,1,5,66,9
	.half	.L412-.L24
	.byte	1,5,71,9
	.half	.L747-.L412
	.byte	1,5,58,9
	.half	.L748-.L747
	.byte	1,5,36,9
	.half	.L749-.L748
	.byte	1,5,9,9
	.half	.L413-.L749
	.byte	3,1,1,5,52,9
	.half	.L28-.L413
	.byte	3,3,1,5,66,9
	.half	.L414-.L28
	.byte	1,5,71,9
	.half	.L750-.L414
	.byte	1,5,58,9
	.half	.L751-.L750
	.byte	1,5,25,9
	.half	.L752-.L751
	.byte	1,5,36,9
	.half	.L415-.L752
	.byte	1,5,9,9
	.half	.L753-.L415
	.byte	3,1,1,5,23,9
	.half	.L29-.L753
	.byte	3,3,1,5,5,9
	.half	.L30-.L29
	.byte	3,3,1,5,1,9
	.half	.L35-.L30
	.byte	3,1,1,7,9
	.half	.L176-.L35
	.byte	0,1,1
.L729:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_ranges'
.L175:
	.word	-1,.L117,0,.L176-.L117,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_info'
.L177:
	.word	381
	.half	3
	.word	.L178
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L180,.L179
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_getTrackedSramAddresses',0,1,253,1,7
	.word	.L190
	.byte	1,1,1
	.word	.L119,.L320,.L118
	.byte	4
	.byte	'mbistSel',0,1,253,1,54
	.word	.L188,.L321
	.byte	4
	.byte	'trackedSramAddresses',0,1,253,1,77
	.word	.L322,.L323
	.byte	5
	.word	.L119,.L320
	.byte	6
	.byte	'mc',0,1,255,1,13
	.word	.L201,.L324
	.byte	6
	.byte	'validFlags',0,1,128,2,13
	.word	.L190,.L325
	.byte	6
	.byte	'numTrackedAddresses',0,1,129,2,13
	.word	.L190,.L326
	.byte	6
	.byte	'i',0,1,130,2,13
	.word	.L327,.L328
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_abbrev'
.L178:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_line'
.L179:
	.word	.L755-.L754
.L754:
	.half	3
	.word	.L757-.L756
.L756:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0,0
.L757:
	.byte	5,71,7,0,5,2
	.word	.L119
	.byte	3,254,1,1,5,77,9
	.half	.L758-.L119
	.byte	1,5,46,9
	.half	.L416-.L758
	.byte	1,5,69,9
	.half	.L417-.L416
	.byte	1,5,33,9
	.half	.L759-.L417
	.byte	1,5,44,9
	.half	.L418-.L759
	.byte	3,1,1,5,47,9
	.half	.L760-.L418
	.byte	1,5,71,9
	.half	.L761-.L760
	.byte	1,5,33,9
	.half	.L419-.L761
	.byte	3,1,1,5,12,9
	.half	.L420-.L419
	.byte	3,7,1,5,49,9
	.half	.L422-.L420
	.byte	1,5,27,9
	.half	.L37-.L422
	.byte	3,2,1,5,29,9
	.half	.L762-.L37
	.byte	1,5,24,9
	.half	.L763-.L762
	.byte	1,5,9,9
	.half	.L764-.L763
	.byte	1,5,33,7,9
	.half	.L765-.L764
	.byte	3,2,1,5,67,9
	.half	.L766-.L765
	.byte	1,5,70,9
	.half	.L767-.L766
	.byte	1,5,57,9
	.half	.L768-.L767
	.byte	1,5,13,9
	.half	.L769-.L768
	.byte	3,1,1,5,51,9
	.half	.L38-.L769
	.byte	3,123,1,5,49,9
	.half	.L36-.L38
	.byte	1,5,5,7,9
	.half	.L770-.L36
	.byte	3,9,1,5,1,9
	.half	.L39-.L770
	.byte	3,1,1,7,9
	.half	.L181-.L39
	.byte	0,1,1
.L755:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_ranges'
.L180:
	.word	-1,.L119,0,.L181-.L119,0,0
	.sdecl	'.debug_info',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_info'
.L182:
	.word	462
	.half	3
	.word	.L183
	.byte	4,1
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Debug\\',0,12,1
	.word	.L185,.L184
	.byte	2
	.word	.L128
	.byte	3
	.byte	'IfxMtu_waitForMbistDone',0,1,169,3,17,1,1
	.word	.L127,.L329,.L126
	.byte	4
	.byte	'towerDepth',0,1,169,3,48
	.word	.L214,.L330
	.byte	4
	.byte	'numInstructions',0,1,169,3,66
	.word	.L190,.L331
	.byte	4
	.byte	'mbistSel',0,1,169,3,99
	.word	.L188,.L332
	.byte	5
	.word	.L127,.L329
	.byte	6
	.byte	'waitFact',0,1,171,3,21
	.word	.L214,.L333
	.byte	6
	.byte	'waitTime',0,1,172,3,21
	.word	.L334,.L335
	.byte	7
	.word	.L336,.L337,.L338
	.byte	8
	.word	.L339,.L337,.L338
	.byte	6
	.byte	'pll2ErayFrequency',0,2,203,8,13
	.word	.L340,.L341
	.byte	0,0,7
	.word	.L336,.L342,.L343
	.byte	8
	.word	.L339,.L342,.L343
	.byte	6
	.byte	'pll2ErayFrequency',0,2,203,8,13
	.word	.L340,.L344
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_abbrev'
.L183:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_line'
.L184:
	.word	.L772-.L771
.L771:
	.half	3
	.word	.L774-.L773
.L773:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'G:\\Hello_world\\TC264\\A\\workspace\\Sig0809\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Scu\\Std',0,0
	.byte	'..\\Libraries\\BaseSw\\iLLD\\TC26B\\Tricore\\Mtu\\Std\\IfxMtu.c',0,0,0,0
	.byte	'IfxScuCcu.h',0,1,0,0,0
.L774:
	.byte	5,17,7,0,5,2
	.word	.L127
	.byte	3,168,3,1,5,46,9
	.half	.L775-.L127
	.byte	3,2,1,5,69,9
	.half	.L776-.L775
	.byte	1,5,54,9
	.half	.L777-.L776
	.byte	1,5,78,9
	.half	.L506-.L777
	.byte	1,5,5,9
	.half	.L507-.L506
	.byte	3,3,1,5,44,9
	.half	.L72-.L507
	.byte	3,8,1,5,29,9
	.half	.L778-.L72
	.byte	1,5,9,9
	.half	.L779-.L778
	.byte	3,1,1,5,44,9
	.half	.L66-.L779
	.byte	3,2,1,5,29,9
	.half	.L780-.L66
	.byte	1,5,9,9
	.half	.L781-.L780
	.byte	3,1,1,5,44,9
	.half	.L73-.L781
	.byte	3,4,1,5,29,9
	.half	.L782-.L73
	.byte	1,5,9,9
	.half	.L783-.L782
	.byte	3,2,1,5,46,9
	.half	.L76-.L783
	.byte	3,4,1,5,49,9
	.half	.L508-.L76
	.byte	1,4,2,5,57,9
	.half	.L337-.L508
	.byte	3,137,5,1,5,80,9
	.half	.L784-.L337
	.byte	1,5,87,9
	.half	.L785-.L784
	.byte	1,5,60,9
	.half	.L786-.L785
	.byte	1,5,5,9
	.half	.L509-.L786
	.byte	3,2,1,4,1,5,49,9
	.half	.L96-.L509
	.byte	3,245,122,1,5,87,9
	.half	.L338-.L96
	.byte	1,5,85,9
	.half	.L510-.L338
	.byte	1,5,9,9
	.half	.L511-.L510
	.byte	3,1,1,5,46,9
	.half	.L77-.L511
	.byte	3,3,1,5,49,9
	.half	.L512-.L77
	.byte	1,4,2,5,57,9
	.half	.L342-.L512
	.byte	3,133,5,1,5,80,9
	.half	.L787-.L342
	.byte	1,5,87,9
	.half	.L788-.L787
	.byte	1,5,60,9
	.half	.L789-.L788
	.byte	1,5,5,9
	.half	.L513-.L789
	.byte	3,2,1,4,1,5,49,9
	.half	.L98-.L513
	.byte	3,249,122,1,5,87,9
	.half	.L343-.L98
	.byte	1,5,85,9
	.half	.L514-.L343
	.byte	1,5,105,9
	.half	.L790-.L514
	.byte	1,5,103,9
	.half	.L791-.L790
	.byte	1,5,9,9
	.half	.L515-.L791
	.byte	3,1,1,5,44,9
	.half	.L88-.L515
	.byte	3,17,1,5,29,9
	.half	.L792-.L88
	.byte	1,5,9,9
	.half	.L793-.L792
	.byte	3,1,1,9
	.half	.L65-.L793
	.byte	3,2,1,5,5,9
	.half	.L93-.L65
	.byte	3,3,1,5,46,7,9
	.half	.L517-.L93
	.byte	3,2,1,5,44,9
	.half	.L518-.L517
	.byte	1,5,18,9
	.half	.L519-.L518
	.byte	1,5,48,9
	.half	.L794-.L519
	.byte	1,5,33,9
	.half	.L102-.L794
	.byte	3,4,1,5,52,9
	.half	.L521-.L102
	.byte	1,5,50,9
	.half	.L795-.L521
	.byte	1,5,18,9
	.half	.L796-.L795
	.byte	1,5,16,9
	.half	.L103-.L796
	.byte	3,3,1,5,27,9
	.half	.L797-.L103
	.byte	1,5,25,9
	.half	.L516-.L797
	.byte	1,5,14,9
	.half	.L798-.L516
	.byte	1,5,22,9
	.half	.L799-.L798
	.byte	3,2,1,5,14,9
	.half	.L105-.L799
	.byte	3,2,1,5,12,9
	.half	.L104-.L105
	.byte	3,126,1,5,20,9
	.half	.L800-.L104
	.byte	1,5,22,9
	.half	.L801-.L800
	.byte	1,5,1,7,9
	.half	.L802-.L801
	.byte	3,4,1,7,9
	.half	.L186-.L802
	.byte	0,1,1
.L772:
	.sdecl	'.debug_ranges',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_ranges'
.L185:
	.word	-1,.L127,0,.L186-.L127,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_loc'
.L106:
	.word	-1,.L107,0,.L306-.L107
	.half	2
	.byte	138,0
	.word	0,0
.L307:
	.word	-1,.L107,0,.L345-.L107
	.half	1
	.byte	84
	.word	0,0
.L308:
	.word	-1,.L107,.L346-.L107,.L306-.L107
	.half	1
	.byte	84
	.word	.L347-.L107,.L306-.L107
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_loc'
.L108:
	.word	-1,.L109,0,.L187-.L109
	.half	2
	.byte	138,0
	.word	0,0
.L191:
	.word	-1,.L109,.L350-.L109,.L187-.L109
	.half	1
	.byte	89
	.word	0,0
.L189:
	.word	-1,.L109,0,.L348-.L109
	.half	1
	.byte	84
	.word	.L349-.L109,.L187-.L109
	.half	1
	.byte	88
	.word	.L353-.L109,.L354-.L109
	.half	1
	.byte	84
	.word	.L357-.L109,.L358-.L109
	.half	1
	.byte	86
	.word	.L365-.L109,.L366-.L109
	.half	1
	.byte	84
	.word	0,0
.L199:
	.word	0,0
.L202:
	.word	-1,.L109,.L5-.L109,.L4-.L109
	.half	1
	.byte	111
	.word	.L5-.L109,.L4-.L109
	.half	5
	.byte	144,32,157,32,0
	.word	.L359-.L109,.L360-.L109
	.half	5
	.byte	144,32,157,32,0
	.word	.L361-.L109,.L187-.L109
	.half	1
	.byte	111
	.word	0,0
.L193:
	.word	-1,.L109,.L348-.L109,.L351-.L109
	.half	1
	.byte	82
	.word	.L195-.L109,.L187-.L109
	.half	1
	.byte	90
	.word	.L351-.L109,.L352-.L109
	.half	1
	.byte	84
	.word	.L355-.L109,.L356-.L109
	.half	1
	.byte	84
	.word	.L364-.L109,.L360-.L109
	.half	1
	.byte	84
	.word	.L367-.L109,.L7-.L109
	.half	1
	.byte	84
	.word	0,0
.L203:
	.word	-1,.L109,.L362-.L109,.L363-.L109
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_loc'
.L110:
	.word	-1,.L111,0,.L204-.L111
	.half	2
	.byte	138,0
	.word	0,0
.L215:
	.word	-1,.L111,.L372-.L111,.L373-.L111
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L221:
	.word	-1,.L111,.L377-.L111,.L204-.L111
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L205:
	.word	-1,.L111,0,.L207-.L111
	.half	1
	.byte	84
	.word	.L368-.L111,.L204-.L111
	.half	1
	.byte	88
	.word	0,0
.L210:
	.word	0,0
.L218:
	.word	0,0
.L220:
	.word	-1,.L111,.L374-.L111,.L375-.L111
	.half	1
	.byte	95
	.word	.L376-.L111,.L204-.L111
	.half	1
	.byte	111
	.word	0,0
.L213:
	.word	-1,.L111,.L369-.L111,.L370-.L111
	.half	5
	.byte	144,32,157,32,0
	.word	.L371-.L111,.L8-.L111
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_loc'
.L112:
	.word	-1,.L113,0,.L222-.L113
	.half	2
	.byte	138,0
	.word	0,0
.L246:
	.word	-1,.L113,.L394-.L113,.L222-.L113
	.half	1
	.byte	81
	.word	0,0
.L248:
	.word	-1,.L113,.L398-.L113,.L222-.L113
	.half	1
	.byte	85
	.word	0,0
.L241:
	.word	-1,.L113,.L390-.L113,.L392-.L113
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L243:
	.word	-1,.L113,.L395-.L113,.L222-.L113
	.half	1
	.byte	82
	.word	0,0
.L244:
	.word	-1,.L113,.L396-.L113,.L222-.L113
	.half	1
	.byte	83
	.word	0,0
.L242:
	.word	-1,.L113,.L393-.L113,.L394-.L113
	.half	1
	.byte	81
	.word	0,0
.L251:
	.word	-1,.L113,.L400-.L113,.L14-.L113
	.half	1
	.byte	87
	.word	0,0
.L238:
	.word	-1,.L113,.L391-.L113,.L15-.L113
	.half	1
	.byte	111
	.word	0,0
.L232:
	.word	-1,.L113,.L384-.L113,.L11-.L113
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L235:
	.word	-1,.L113,.L389-.L113,.L390-.L113
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L223:
	.word	-1,.L113,0,.L378-.L113
	.half	1
	.byte	84
	.word	0,0
.L229:
	.word	0,0
.L233:
	.word	0,0
.L224:
	.word	-1,.L113,.L379-.L113,.L380-.L113
	.half	1
	.byte	95
	.word	.L226-.L113,.L222-.L113
	.half	1
	.byte	98
	.word	0,0
.L252:
	.word	-1,.L113,.L397-.L113,.L222-.L113
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L249:
	.word	-1,.L113,.L399-.L113,.L222-.L113
	.half	1
	.byte	86
	.word	0,0
.L245:
	.word	-1,.L113,.L396-.L113,.L397-.L113
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L234:
	.word	-1,.L113,.L385-.L113,.L386-.L113
	.half	1
	.byte	95
	.word	.L387-.L113,.L388-.L113
	.half	1
	.byte	111
	.word	0,0
.L231:
	.word	-1,.L113,.L381-.L113,.L382-.L113
	.half	1
	.byte	95
	.word	.L383-.L113,.L11-.L113
	.half	1
	.byte	111
	.word	0,0
.L239:
	.word	-1,.L113,.L240-.L113,.L222-.L113
	.half	1
	.byte	88
	.word	0,0
.L247:
	.word	-1,.L113,.L378-.L113,.L222-.L113
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_loc'
.L114:
	.word	-1,.L115,0,.L309-.L115
	.half	2
	.byte	138,0
	.word	0,0
.L311:
	.word	-1,.L115,0,.L309-.L115
	.half	1
	.byte	85
	.word	0,0
.L310:
	.word	-1,.L115,0,.L401-.L115
	.half	1
	.byte	84
	.word	0,0
.L312:
	.word	-1,.L115,.L402-.L115,.L309-.L115
	.half	1
	.byte	84
	.word	.L403-.L115,.L309-.L115
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_loc'
.L116:
	.word	-1,.L117,0,.L313-.L117
	.half	2
	.byte	138,0
	.word	0,0
.L318:
	.word	-1,.L117,.L406-.L117,.L313-.L117
	.half	1
	.byte	81
	.word	0,0
.L314:
	.word	-1,.L117,0,.L313-.L117
	.half	1
	.byte	84
	.word	0,0
.L317:
	.word	-1,.L117,.L404-.L117,.L405-.L117
	.half	5
	.byte	144,32,157,32,0
	.word	.L26-.L117,.L408-.L117
	.half	5
	.byte	144,32,157,32,0
	.word	.L25-.L117,.L410-.L117
	.half	5
	.byte	144,32,157,32,0
	.word	.L24-.L117,.L412-.L117
	.half	5
	.byte	144,32,157,32,0
	.word	.L28-.L117,.L414-.L117
	.half	5
	.byte	144,32,157,32,0
	.word	.L29-.L117,.L30-.L117
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L319:
	.word	-1,.L117,.L407-.L117,.L26-.L117
	.half	1
	.byte	82
	.word	.L409-.L117,.L25-.L117
	.half	1
	.byte	82
	.word	.L411-.L117,.L24-.L117
	.half	1
	.byte	82
	.word	.L413-.L117,.L28-.L117
	.half	1
	.byte	82
	.word	.L415-.L117,.L29-.L117
	.half	1
	.byte	82
	.word	.L30-.L117,.L313-.L117
	.half	1
	.byte	82
	.word	0,0
.L316:
	.word	-1,.L117,0,.L313-.L117
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_loc'
.L118:
	.word	-1,.L119,0,.L320-.L119
	.half	2
	.byte	138,0
	.word	0,0
.L328:
	.word	-1,.L119,.L422-.L119,.L320-.L119
	.half	1
	.byte	81
	.word	0,0
.L321:
	.word	-1,.L119,0,.L416-.L119
	.half	1
	.byte	84
	.word	0,0
.L324:
	.word	-1,.L119,.L417-.L119,.L320-.L119
	.half	1
	.byte	84
	.word	.L418-.L119,.L320-.L119
	.half	1
	.byte	111
	.word	0,0
.L326:
	.word	-1,.L119,.L420-.L119,.L421-.L119
	.half	1
	.byte	82
	.word	.L38-.L119,.L320-.L119
	.half	1
	.byte	82
	.word	0,0
.L323:
	.word	-1,.L119,0,.L320-.L119
	.half	1
	.byte	100
	.word	0,0
.L325:
	.word	-1,.L119,.L419-.L119,.L320-.L119
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_loc'
.L120:
	.word	-1,.L121,0,.L253-.L121
	.half	2
	.byte	138,0
	.word	0,0
.L254:
	.word	-1,.L121,0,.L423-.L121
	.half	1
	.byte	84
	.word	.L425-.L121,.L253-.L121
	.half	1
	.byte	88
	.word	.L431-.L121,.L430-.L121
	.half	1
	.byte	86
	.word	0,0
.L258:
	.word	0,0
.L256:
	.word	-1,.L121,.L426-.L121,.L427-.L121
	.half	1
	.byte	95
	.word	.L428-.L121,.L41-.L121
	.half	1
	.byte	111
	.word	0,0
.L259:
	.word	-1,.L121,.L41-.L121,.L40-.L121
	.half	1
	.byte	111
	.word	.L432-.L121,.L433-.L121
	.half	1
	.byte	95
	.word	.L434-.L121,.L253-.L121
	.half	1
	.byte	111
	.word	0,0
.L257:
	.word	-1,.L121,.L429-.L121,.L430-.L121
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L255:
	.word	-1,.L121,0,.L424-.L121
	.half	1
	.byte	85
	.word	0,0
.L260:
	.word	-1,.L121,.L433-.L121,.L435-.L121
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_loc'
.L122:
	.word	-1,.L123,0,.L261-.L123
	.half	2
	.byte	138,0
	.word	0,0
.L267:
	.word	-1,.L123,0,.L436-.L123
	.half	1
	.byte	100
	.word	.L443-.L123,.L261-.L123
	.half	1
	.byte	108
	.word	0,0
.L271:
	.word	-1,.L123,.L448-.L123,.L261-.L123
	.half	1
	.byte	93
	.word	0,0
.L292:
	.word	-1,.L123,.L473-.L123,.L474-.L123
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L276:
	.word	-1,.L123,.L454-.L123,.L45-.L123
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L279:
	.word	-1,.L123,.L459-.L123,.L458-.L123
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L294:
	.word	-1,.L123,.L478-.L123,.L56-.L123
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L262:
	.word	-1,.L123,0,.L436-.L123
	.half	1
	.byte	84
	.word	.L437-.L123,.L261-.L123
	.half	1
	.byte	88
	.word	.L461-.L123,.L462-.L123
	.half	1
	.byte	86
	.word	0,0
.L290:
	.word	0,0
.L274:
	.word	0,0
.L277:
	.word	0,0
.L280:
	.word	0,0
.L286:
	.word	0,0
.L268:
	.word	-1,.L123,.L444-.L123,.L436-.L123
	.half	5
	.byte	144,32,157,32,0
	.word	.L445-.L123,.L446-.L123
	.half	1
	.byte	111
	.word	0,0
.L281:
	.word	-1,.L123,.L49-.L123,.L48-.L123
	.half	1
	.byte	98
	.word	.L463-.L123,.L464-.L123
	.half	1
	.byte	95
	.word	.L465-.L123,.L284-.L123
	.half	1
	.byte	98
	.word	0,0
.L288:
	.word	-1,.L123,.L468-.L123,.L469-.L123
	.half	1
	.byte	95
	.word	.L470-.L123,.L56-.L123
	.half	1
	.byte	98
	.word	0,0
.L278:
	.word	-1,.L123,.L455-.L123,.L456-.L123
	.half	1
	.byte	95
	.word	.L457-.L123,.L458-.L123
	.half	1
	.byte	98
	.word	0,0
.L293:
	.word	-1,.L123,.L475-.L123,.L476-.L123
	.half	1
	.byte	95
	.word	.L477-.L123,.L261-.L123
	.half	1
	.byte	111
	.word	0,0
.L291:
	.word	-1,.L123,.L471-.L123,.L472-.L123
	.half	1
	.byte	95
	.word	.L446-.L123,.L53-.L123
	.half	1
	.byte	111
	.word	0,0
.L275:
	.word	-1,.L123,.L451-.L123,.L452-.L123
	.half	1
	.byte	95
	.word	.L453-.L123,.L45-.L123
	.half	1
	.byte	98
	.word	0,0
.L269:
	.word	-1,.L123,.L436-.L123,.L449-.L123
	.half	1
	.byte	82
	.word	.L272-.L123,.L261-.L123
	.half	1
	.byte	94
	.word	.L449-.L123,.L450-.L123
	.half	1
	.byte	84
	.word	.L460-.L123,.L458-.L123
	.half	1
	.byte	84
	.word	.L467-.L123,.L284-.L123
	.half	1
	.byte	84
	.word	.L479-.L123,.L56-.L123
	.half	1
	.byte	84
	.word	0,0
.L265:
	.word	-1,.L123,0,.L436-.L123
	.half	1
	.byte	87
	.word	.L441-.L123,.L442-.L123
	.half	1
	.byte	91
	.word	0,0
.L264:
	.word	-1,.L123,0,.L436-.L123
	.half	1
	.byte	86
	.word	.L439-.L123,.L440-.L123
	.half	1
	.byte	89
	.word	0,0
.L263:
	.word	-1,.L123,0,.L436-.L123
	.half	1
	.byte	85
	.word	.L438-.L123,.L261-.L123
	.half	1
	.byte	90
	.word	0,0
.L270:
	.word	-1,.L123,.L447-.L123,.L261-.L123
	.half	1
	.byte	92
	.word	.L480-.L123,.L261-.L123
	.half	1
	.byte	82
	.word	0,0
.L282:
	.word	-1,.L123,.L464-.L123,.L466-.L123
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_loc'
.L126:
	.word	-1,.L127,0,.L504-.L127
	.half	2
	.byte	138,0
	.word	.L504-.L127,.L329-.L127
	.half	2
	.byte	138,8
	.word	.L329-.L127,.L329-.L127
	.half	2
	.byte	138,0
	.word	0,0
.L332:
	.word	-1,.L127,0,.L505-.L127
	.half	1
	.byte	86
	.word	.L72-.L127,.L508-.L127
	.half	1
	.byte	86
	.word	.L77-.L127,.L512-.L127
	.half	1
	.byte	86
	.word	.L88-.L127,.L93-.L127
	.half	1
	.byte	86
	.word	0,0
.L331:
	.word	-1,.L127,0,.L505-.L127
	.half	1
	.byte	85
	.word	.L506-.L127,.L507-.L127
	.half	1
	.byte	89
	.word	.L72-.L127,.L508-.L127
	.half	1
	.byte	85
	.word	.L338-.L127,.L510-.L127
	.half	1
	.byte	89
	.word	.L77-.L127,.L512-.L127
	.half	1
	.byte	85
	.word	.L343-.L127,.L514-.L127
	.half	1
	.byte	89
	.word	.L88-.L127,.L93-.L127
	.half	1
	.byte	85
	.word	.L93-.L127,.L517-.L127
	.half	1
	.byte	89
	.word	0,0
.L341:
	.word	-1,.L127,.L509-.L127,.L338-.L127
	.half	1
	.byte	95
	.word	0,0
.L344:
	.word	-1,.L127,.L513-.L127,.L343-.L127
	.half	1
	.byte	95
	.word	0,0
.L330:
	.word	-1,.L127,0,.L505-.L127
	.half	1
	.byte	84
	.word	.L72-.L127,.L508-.L127
	.half	1
	.byte	84
	.word	.L77-.L127,.L512-.L127
	.half	1
	.byte	84
	.word	.L88-.L127,.L93-.L127
	.half	1
	.byte	84
	.word	.L518-.L127,.L519-.L127
	.half	1
	.byte	88
	.word	.L520-.L127,.L521-.L127
	.half	1
	.byte	88
	.word	0,0
.L333:
	.word	-1,.L127,.L506-.L127,.L505-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	.L72-.L127,.L508-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	.L511-.L127,.L512-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	.L515-.L127,.L516-.L127
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L335:
	.word	-1,.L127,0,.L505-.L127
	.half	2
	.byte	145,120
	.word	.L72-.L127,.L329-.L127
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_loc'
.L124:
	.word	-1,.L125,0,.L295-.L125
	.half	2
	.byte	138,0
	.word	0,0
.L299:
	.word	-1,.L125,.L487-.L125,.L295-.L125
	.half	1
	.byte	90
	.word	0,0
.L296:
	.word	-1,.L125,0,.L481-.L125
	.half	1
	.byte	84
	.word	.L482-.L125,.L483-.L125
	.half	1
	.byte	88
	.word	.L60-.L125,.L494-.L125
	.half	1
	.byte	88
	.word	.L495-.L125,.L496-.L125
	.half	1
	.byte	88
	.word	.L496-.L125,.L497-.L125
	.half	1
	.byte	86
	.word	.L498-.L125,.L499-.L125
	.half	1
	.byte	88
	.word	0,0
.L303:
	.word	0,0
.L298:
	.word	-1,.L125,.L484-.L125,.L481-.L125
	.half	5
	.byte	144,32,157,32,0
	.word	.L485-.L125,.L486-.L125
	.half	1
	.byte	111
	.word	0,0
.L304:
	.word	-1,.L125,.L62-.L125,.L61-.L125
	.half	1
	.byte	111
	.word	.L500-.L125,.L501-.L125
	.half	1
	.byte	95
	.word	.L502-.L125,.L295-.L125
	.half	1
	.byte	111
	.word	0,0
.L302:
	.word	-1,.L125,.L490-.L125,.L60-.L125
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L300:
	.word	-1,.L125,.L481-.L125,.L488-.L125
	.half	1
	.byte	82
	.word	.L301-.L125,.L295-.L125
	.half	1
	.byte	91
	.word	.L488-.L125,.L489-.L125
	.half	1
	.byte	84
	.word	.L493-.L125,.L60-.L125
	.half	1
	.byte	84
	.word	0,0
.L297:
	.word	-1,.L125,0,.L481-.L125
	.half	1
	.byte	85
	.word	.L491-.L125,.L492-.L125
	.half	1
	.byte	89
	.word	0,0
.L305:
	.word	-1,.L125,.L501-.L125,.L503-.L125
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L803:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_clearErrorTracking')
	.sect	'.debug_frame'
	.word	24
	.word	.L803,.L107,.L306-.L107
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_clearSram')
	.sect	'.debug_frame'
	.word	12
	.word	.L803,.L109,.L187-.L109
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_clearSramContinue')
	.sect	'.debug_frame'
	.word	12
	.word	.L803,.L111,.L204-.L111
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_clearSramStart')
	.sect	'.debug_frame'
	.word	24
	.word	.L803,.L113,.L222-.L113
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_enableErrorTracking')
	.sect	'.debug_frame'
	.word	24
	.word	.L803,.L115,.L309-.L115
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_getSystemAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L803,.L117,.L313-.L117
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_getTrackedSramAddresses')
	.sect	'.debug_frame'
	.word	20
	.word	.L803,.L119,.L320-.L119
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_readSramAddress')
	.sect	'.debug_frame'
	.word	12
	.word	.L803,.L121,.L253-.L121
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_runNonDestructiveInversionTest')
	.sect	'.debug_frame'
	.word	12
	.word	.L803,.L123,.L261-.L123
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_writeSramAddress')
	.sect	'.debug_frame'
	.word	12
	.word	.L803,.L125,.L295-.L125
	.sdecl	'.debug_frame',debug,cluster('IfxMtu_waitForMbistDone')
	.sect	'.debug_frame'
	.word	36
	.word	.L803,.L127,.L329-.L127
	.byte	4
	.word	(.L504-.L127)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L329-.L504)/2
	.byte	19,0,8,26,0,0

; ..\Libraries\BaseSw\iLLD\TC26B\Tricore\Mtu\Std\IfxMtu.c	   496      {
	; Module end
